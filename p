ZnVuY3Rpb24gTmV3LUluTWVtb3J5TW9kdWxlCnsKICAgIFBhcmFtCiAgICAoCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDApXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTW9kdWxlTmFtZSA9IFtHdWlkXTo6TmV3R3VpZCgpLlRvU3RyaW5nKCkKICAgICkKICAgICRMb2FkZWRBc3NlbWJsaWVzID0gW0FwcERvbWFpbl06OkN1cnJlbnREb21haW4uR2V0QXNzZW1ibGllcygpCiAgICBGb3JFYWNoICgkQXNzZW1ibHkgaW4gJExvYWRlZEFzc2VtYmxpZXMpIHsKICAgICAgICBpZiAoJEFzc2VtYmx5LkZ1bGxOYW1lIC1hbmQgKCRBc3NlbWJseS5GdWxsTmFtZS5TcGxpdCgnLCcpWzBdIC1lcSAkTW9kdWxlTmFtZSkpIHsKICAgICAgICAgICAgcmV0dXJuICRBc3NlbWJseQogICAgICAgIH0KICAgIH0KICAgICREeW5Bc3NlbWJseSA9IE5ldy1PYmplY3QgUmVmbGVjdGlvbi5Bc3NlbWJseU5hbWUoJE1vZHVsZU5hbWUpCiAgICAkRG9tYWluID0gW0FwcERvbWFpbl06OkN1cnJlbnREb21haW4KICAgICRBc3NlbWJseUJ1aWxkZXIgPSAkRG9tYWluLkRlZmluZUR5bmFtaWNBc3NlbWJseSgkRHluQXNzZW1ibHksICdSdW4nKQogICAgJE1vZHVsZUJ1aWxkZXIgPSAkQXNzZW1ibHlCdWlsZGVyLkRlZmluZUR5bmFtaWNNb2R1bGUoJE1vZHVsZU5hbWUsICRGYWxzZSkKICAgIHJldHVybiAkTW9kdWxlQnVpbGRlcgp9
ZnVuY3Rpb24gZnVuYwp7CiAgICBQYXJhbQogICAgKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRGxsTmFtZSwKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMSwgTWFuZGF0b3J5ID0gJFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEZ1bmN0aW9uTmFtZSwKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMiwgTWFuZGF0b3J5ID0gJFRydWUpXQogICAgICAgIFtUeXBlXQogICAgICAgICRSZXR1cm5UeXBlLAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAzKV0KICAgICAgICBbVHlwZVtdXQogICAgICAgICRQYXJhbWV0ZXJUeXBlcywKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gNCldCiAgICAgICAgW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkNhbGxpbmdDb252ZW50aW9uXQogICAgICAgICROYXRpdmVDYWxsaW5nQ29udmVudGlvbiwKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gNSldCiAgICAgICAgW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkNoYXJTZXRdCiAgICAgICAgJENoYXJzZXQsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkU2V0TGFzdEVycm9yCiAgICApCiAgICAkUHJvcGVydGllcyA9IEB7CiAgICAgICAgRGxsTmFtZSA9ICREbGxOYW1lCiAgICAgICAgRnVuY3Rpb25OYW1lID0gJEZ1bmN0aW9uTmFtZQogICAgICAgIFJldHVyblR5cGUgPSAkUmV0dXJuVHlwZQogICAgfQogICAgaWYgKCRQYXJhbWV0ZXJUeXBlcykgeyAkUHJvcGVydGllc1snUGFyYW1ldGVyVHlwZXMnXSA9ICRQYXJhbWV0ZXJUeXBlcyB9CiAgICBpZiAoJE5hdGl2ZUNhbGxpbmdDb252ZW50aW9uKSB7ICRQcm9wZXJ0aWVzWydOYXRpdmVDYWxsaW5nQ29udmVudGlvbiddID0gJE5hdGl2ZUNhbGxpbmdDb252ZW50aW9uIH0KICAgIGlmICgkQ2hhcnNldCkgeyAkUHJvcGVydGllc1snQ2hhcnNldCddID0gJENoYXJzZXQgfQogICAgaWYgKCRTZXRMYXN0RXJyb3IpIHsgJFByb3BlcnRpZXNbJ1NldExhc3RFcnJvciddID0gJFNldExhc3RFcnJvciB9CiAgICBOZXctT2JqZWN0IFBTT2JqZWN0IC1Qcm9wZXJ0eSAkUHJvcGVydGllcwp9
ZnVuY3Rpb24gQWRkLVdpbjMyVHlwZQp7CiAgICBbT3V0cHV0VHlwZShbSGFzaHRhYmxlXSldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERsbE5hbWUsCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRGdW5jdGlvbk5hbWUsCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbVHlwZV0KICAgICAgICAkUmV0dXJuVHlwZSwKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW1R5cGVbXV0KICAgICAgICAkUGFyYW1ldGVyVHlwZXMsCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5DYWxsaW5nQ29udmVudGlvbl0KICAgICAgICAkTmF0aXZlQ2FsbGluZ0NvbnZlbnRpb24gPSBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuQ2FsbGluZ0NvbnZlbnRpb25dOjpTdGRDYWxsLAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuQ2hhclNldF0KICAgICAgICAkQ2hhcnNldCA9IFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5DaGFyU2V0XTo6QXV0bywKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWUgPSAkVHJ1ZSldCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkU2V0TGFzdEVycm9yLAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJFRydWUpXQogICAgICAgIFtWYWxpZGF0ZVNjcmlwdCh7KCRfIC1pcyBbUmVmbGVjdGlvbi5FbWl0Lk1vZHVsZUJ1aWxkZXJdKSAtb3IgKCRfIC1pcyBbUmVmbGVjdGlvbi5Bc3NlbWJseV0pfSldCiAgICAgICAgJE1vZHVsZSwKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsKCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkTmFtZXNwYWNlID0gJycKICAgICkKICAgIEJFR0lOCiAgICB7CiAgICAgICAgJFR5cGVIYXNoID0gQHt9CiAgICB9CiAgICBQUk9DRVNTCiAgICB7CiAgICAgICAgaWYgKCRNb2R1bGUgLWlzIFtSZWZsZWN0aW9uLkFzc2VtYmx5XSkKICAgICAgICB7CiAgICAgICAgICAgIGlmICgkTmFtZXNwYWNlKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAkVHlwZUhhc2hbJERsbE5hbWVdID0gJE1vZHVsZS5HZXRUeXBlKCIkTmFtZXNwYWNlLiREbGxOYW1lIikKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICRUeXBlSGFzaFskRGxsTmFtZV0gPSAkTW9kdWxlLkdldFR5cGUoJERsbE5hbWUpCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmICghJFR5cGVIYXNoLkNvbnRhaW5zS2V5KCREbGxOYW1lKSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgaWYgKCROYW1lc3BhY2UpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgJFR5cGVIYXNoWyREbGxOYW1lXSA9ICRNb2R1bGUuRGVmaW5lVHlwZSgiJE5hbWVzcGFjZS4kRGxsTmFtZSIsICdQdWJsaWMsQmVmb3JlRmllbGRJbml0JykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAkVHlwZUhhc2hbJERsbE5hbWVdID0gJE1vZHVsZS5EZWZpbmVUeXBlKCREbGxOYW1lLCAnUHVibGljLEJlZm9yZUZpZWxkSW5pdCcpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJE1ldGhvZCA9ICRUeXBlSGFzaFskRGxsTmFtZV0uRGVmaW5lTWV0aG9kKAogICAgICAgICAgICAgICAgJEZ1bmN0aW9uTmFtZSwKICAgICAgICAgICAgICAgICdQdWJsaWMsU3RhdGljLFBpbnZva2VJbXBsJywKICAgICAgICAgICAgICAgICRSZXR1cm5UeXBlLAogICAgICAgICAgICAgICAgJFBhcmFtZXRlclR5cGVzKQogICAgICAgICAgICAKICAgICAgICAgICAgJGkgPSAxCiAgICAgICAgICAgIEZvckVhY2goJFBhcmFtZXRlciBpbiAkUGFyYW1ldGVyVHlwZXMpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlmICgkUGFyYW1ldGVyLklzQnlSZWYpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgW3ZvaWRdICRNZXRob2QuRGVmaW5lUGFyYW1ldGVyKCRpLCAnT3V0JywgJE51bGwpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkaSsrCiAgICAgICAgICAgIH0KICAgICAgICAgICAgJERsbEltcG9ydCA9IFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5EbGxJbXBvcnRBdHRyaWJ1dGVdCiAgICAgICAgICAgICRTZXRMYXN0RXJyb3JGaWVsZCA9ICREbGxJbXBvcnQuR2V0RmllbGQoJ1NldExhc3RFcnJvcicpCiAgICAgICAgICAgICRDYWxsaW5nQ29udmVudGlvbkZpZWxkID0gJERsbEltcG9ydC5HZXRGaWVsZCgnQ2FsbGluZ0NvbnZlbnRpb24nKQogICAgICAgICAgICAkQ2hhcnNldEZpZWxkID0gJERsbEltcG9ydC5HZXRGaWVsZCgnQ2hhclNldCcpCiAgICAgICAgICAgIGlmICgkU2V0TGFzdEVycm9yKSB7ICRTTEVWYWx1ZSA9ICRUcnVlIH0gZWxzZSB7ICRTTEVWYWx1ZSA9ICRGYWxzZSB9CiAgICAgICAgICAgIAogICAgICAgICAgICAkQ29uc3RydWN0b3IgPSBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuRGxsSW1wb3J0QXR0cmlidXRlXS5HZXRDb25zdHJ1Y3RvcihbU3RyaW5nXSkKICAgICAgICAgICAgJERsbEltcG9ydEF0dHJpYnV0ZSA9IE5ldy1PYmplY3QgUmVmbGVjdGlvbi5FbWl0LkN1c3RvbUF0dHJpYnV0ZUJ1aWxkZXIoJENvbnN0cnVjdG9yLAogICAgICAgICAgICAgICAgJERsbE5hbWUsIFtSZWZsZWN0aW9uLlByb3BlcnR5SW5mb1tdXSBAKCksIFtPYmplY3RbXV0gQCgpLAogICAgICAgICAgICAgICAgW1JlZmxlY3Rpb24uRmllbGRJbmZvW11dIEAoJFNldExhc3RFcnJvckZpZWxkLCAkQ2FsbGluZ0NvbnZlbnRpb25GaWVsZCwgJENoYXJzZXRGaWVsZCksCiAgICAgICAgICAgICAgICBbT2JqZWN0W11dIEAoJFNMRVZhbHVlLCAoW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkNhbGxpbmdDb252ZW50aW9uXSAkTmF0aXZlQ2FsbGluZ0NvbnZlbnRpb24pLCAoW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkNoYXJTZXRdICRDaGFyc2V0KSkpCiAgICAgICAgICAgICRNZXRob2QuU2V0Q3VzdG9tQXR0cmlidXRlKCREbGxJbXBvcnRBdHRyaWJ1dGUpCiAgICAgICAgfQogICAgfQogICAgRU5ECiAgICB7CiAgICAgICAgaWYgKCRNb2R1bGUgLWlzIFtSZWZsZWN0aW9uLkFzc2VtYmx5XSkKICAgICAgICB7CiAgICAgICAgICAgIHJldHVybiAkVHlwZUhhc2gKICAgICAgICB9CiAgICAgICAgJFJldHVyblR5cGVzID0gQHt9CiAgICAgICAgRm9yRWFjaCAoJEtleSBpbiAkVHlwZUhhc2guS2V5cykKICAgICAgICB7CiAgICAgICAgICAgICRUeXBlID0gJFR5cGVIYXNoWyRLZXldLkNyZWF0ZVR5cGUoKQogICAgICAgICAgICAkUmV0dXJuVHlwZXNbJEtleV0gPSAkVHlwZQogICAgICAgIH0KICAgICAgICByZXR1cm4gJFJldHVyblR5cGVzCiAgICB9Cn0=
ZnVuY3Rpb24gcHNlbnVtCnsKICAgIFtPdXRwdXRUeXBlKFtUeXBlXSldCiAgICBQYXJhbQogICAgKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAwLCBNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlU2NyaXB0KHsoJF8gLWlzIFtSZWZsZWN0aW9uLkVtaXQuTW9kdWxlQnVpbGRlcl0pIC1vciAoJF8gLWlzIFtSZWZsZWN0aW9uLkFzc2VtYmx5XSl9KV0KICAgICAgICAkTW9kdWxlLAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAxLCBNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRGdWxsTmFtZSwKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMiwgTWFuZGF0b3J5ID0gJFRydWUpXQogICAgICAgIFtUeXBlXQogICAgICAgICRUeXBlLAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAzLCBNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbSGFzaHRhYmxlXQogICAgICAgICRFbnVtRWxlbWVudHMsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkQml0ZmllbGQKICAgICkKICAgIGlmICgkTW9kdWxlIC1pcyBbUmVmbGVjdGlvbi5Bc3NlbWJseV0pCiAgICB7CiAgICAgICAgcmV0dXJuICgkTW9kdWxlLkdldFR5cGUoJEZ1bGxOYW1lKSkKICAgIH0KICAgICRFbnVtVHlwZSA9ICRUeXBlIC1hcyBbVHlwZV0KICAgICRFbnVtQnVpbGRlciA9ICRNb2R1bGUuRGVmaW5lRW51bSgkRnVsbE5hbWUsICdQdWJsaWMnLCAkRW51bVR5cGUpCiAgICBpZiAoJEJpdGZpZWxkKQogICAgewogICAgICAgICRGbGFnc0NvbnN0cnVjdG9yID0gW0ZsYWdzQXR0cmlidXRlXS5HZXRDb25zdHJ1Y3RvcihAKCkpCiAgICAgICAgJEZsYWdzQ3VzdG9tQXR0cmlidXRlID0gTmV3LU9iamVjdCBSZWZsZWN0aW9uLkVtaXQuQ3VzdG9tQXR0cmlidXRlQnVpbGRlcigkRmxhZ3NDb25zdHJ1Y3RvciwgQCgpKQogICAgICAgICRFbnVtQnVpbGRlci5TZXRDdXN0b21BdHRyaWJ1dGUoJEZsYWdzQ3VzdG9tQXR0cmlidXRlKQogICAgfQogICAgRm9yRWFjaCAoJEtleSBpbiAkRW51bUVsZW1lbnRzLktleXMpCiAgICB7CiAgICAgICAgCiAgICAgICAgJE51bGwgPSAkRW51bUJ1aWxkZXIuRGVmaW5lTGl0ZXJhbCgkS2V5LCAkRW51bUVsZW1lbnRzWyRLZXldIC1hcyAkRW51bVR5cGUpCiAgICB9CiAgICAkRW51bUJ1aWxkZXIuQ3JlYXRlVHlwZSgpCn0=
ZnVuY3Rpb24gZmllbGQKewogICAgUGFyYW0KICAgICgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMCwgTWFuZGF0b3J5ID0gJFRydWUpXQogICAgICAgIFtVSW50MTZdCiAgICAgICAgJFBvc2l0aW9uLAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAxLCBNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1R5cGVdCiAgICAgICAgJFR5cGUsCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbiA9IDIpXQogICAgICAgIFtVSW50MTZdCiAgICAgICAgJE9mZnNldCwKICAgICAgICBbT2JqZWN0W11dCiAgICAgICAgJE1hcnNoYWxBcwogICAgKQogICAgQHsKICAgICAgICBQb3NpdGlvbiA9ICRQb3NpdGlvbgogICAgICAgIFR5cGUgPSAkVHlwZSAtYXMgW1R5cGVdCiAgICAgICAgT2Zmc2V0ID0gJE9mZnNldAogICAgICAgIE1hcnNoYWxBcyA9ICRNYXJzaGFsQXMKICAgIH0KfQ==
ZnVuY3Rpb24gc3RydWN0CnsKICAgIFtPdXRwdXRUeXBlKFtUeXBlXSldCiAgICBQYXJhbQogICAgKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAxLCBNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlU2NyaXB0KHsoJF8gLWlzIFtSZWZsZWN0aW9uLkVtaXQuTW9kdWxlQnVpbGRlcl0pIC1vciAoJF8gLWlzIFtSZWZsZWN0aW9uLkFzc2VtYmx5XSl9KV0KICAgICAgICAkTW9kdWxlLAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb24gPSAyLCBNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRGdWxsTmFtZSwKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uID0gMywgTWFuZGF0b3J5ID0gJFRydWUpXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgW0hhc2h0YWJsZV0KICAgICAgICAkU3RydWN0RmllbGRzLAogICAgICAgIFtSZWZsZWN0aW9uLkVtaXQuUGFja2luZ1NpemVdCiAgICAgICAgJFBhY2tpbmdTaXplID0gW1JlZmxlY3Rpb24uRW1pdC5QYWNraW5nU2l6ZV06OlVuc3BlY2lmaWVkLAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEV4cGxpY2l0TGF5b3V0CiAgICApCiAgICBpZiAoJE1vZHVsZSAtaXMgW1JlZmxlY3Rpb24uQXNzZW1ibHldKQogICAgewogICAgICAgIHJldHVybiAoJE1vZHVsZS5HZXRUeXBlKCRGdWxsTmFtZSkpCiAgICB9CiAgICBbUmVmbGVjdGlvbi5UeXBlQXR0cmlidXRlc10gJFN0cnVjdEF0dHJpYnV0ZXMgPSAnQW5zaUNsYXNzLAogICAgICAgIENsYXNzLAogICAgICAgIFB1YmxpYywKICAgICAgICBTZWFsZWQsCiAgICAgICAgQmVmb3JlRmllbGRJbml0JwogICAgaWYgKCRFeHBsaWNpdExheW91dCkKICAgIHsKICAgICAgICAkU3RydWN0QXR0cmlidXRlcyA9ICRTdHJ1Y3RBdHRyaWJ1dGVzIC1ib3IgW1JlZmxlY3Rpb24uVHlwZUF0dHJpYnV0ZXNdOjpFeHBsaWNpdExheW91dAogICAgfQogICAgZWxzZQogICAgewogICAgICAgICRTdHJ1Y3RBdHRyaWJ1dGVzID0gJFN0cnVjdEF0dHJpYnV0ZXMgLWJvciBbUmVmbGVjdGlvbi5UeXBlQXR0cmlidXRlc106OlNlcXVlbnRpYWxMYXlvdXQKICAgIH0KICAgICRTdHJ1Y3RCdWlsZGVyID0gJE1vZHVsZS5EZWZpbmVUeXBlKCRGdWxsTmFtZSwgJFN0cnVjdEF0dHJpYnV0ZXMsIFtWYWx1ZVR5cGVdLCAkUGFja2luZ1NpemUpCiAgICAkQ29uc3RydWN0b3JJbmZvID0gW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxBc0F0dHJpYnV0ZV0uR2V0Q29uc3RydWN0b3JzKClbMF0KICAgICRTaXplQ29uc3QgPSBAKFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsQXNBdHRyaWJ1dGVdLkdldEZpZWxkKCdTaXplQ29uc3QnKSkKICAgICRGaWVsZHMgPSBOZXctT2JqZWN0IEhhc2h0YWJsZVtdKCRTdHJ1Y3RGaWVsZHMuQ291bnQpCiAgICAKICAgIAogICAgCiAgICBGb3JFYWNoICgkRmllbGQgaW4gJFN0cnVjdEZpZWxkcy5LZXlzKQogICAgewogICAgICAgICRJbmRleCA9ICRTdHJ1Y3RGaWVsZHNbJEZpZWxkXVsnUG9zaXRpb24nXQogICAgICAgICRGaWVsZHNbJEluZGV4XSA9IEB7RmllbGROYW1lID0gJEZpZWxkOyBQcm9wZXJ0aWVzID0gJFN0cnVjdEZpZWxkc1skRmllbGRdfQogICAgfQogICAgRm9yRWFjaCAoJEZpZWxkIGluICRGaWVsZHMpCiAgICB7CiAgICAgICAgJEZpZWxkTmFtZSA9ICRGaWVsZFsnRmllbGROYW1lJ10KICAgICAgICAkRmllbGRQcm9wID0gJEZpZWxkWydQcm9wZXJ0aWVzJ10KICAgICAgICAkT2Zmc2V0ID0gJEZpZWxkUHJvcFsnT2Zmc2V0J10KICAgICAgICAkVHlwZSA9ICRGaWVsZFByb3BbJ1R5cGUnXQogICAgICAgICRNYXJzaGFsQXMgPSAkRmllbGRQcm9wWydNYXJzaGFsQXMnXQogICAgICAgICROZXdGaWVsZCA9ICRTdHJ1Y3RCdWlsZGVyLkRlZmluZUZpZWxkKCRGaWVsZE5hbWUsICRUeXBlLCAnUHVibGljJykKICAgICAgICBpZiAoJE1hcnNoYWxBcykKICAgICAgICB7CiAgICAgICAgICAgICRVbm1hbmFnZWRUeXBlID0gJE1hcnNoYWxBc1swXSAtYXMgKFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5Vbm1hbmFnZWRUeXBlXSkKICAgICAgICAgICAgaWYgKCRNYXJzaGFsQXNbMV0pCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICRTaXplID0gJE1hcnNoYWxBc1sxXQogICAgICAgICAgICAgICAgJEF0dHJpYkJ1aWxkZXIgPSBOZXctT2JqZWN0IFJlZmxlY3Rpb24uRW1pdC5DdXN0b21BdHRyaWJ1dGVCdWlsZGVyKCRDb25zdHJ1Y3RvckluZm8sCiAgICAgICAgICAgICAgICAgICAgJFVubWFuYWdlZFR5cGUsICRTaXplQ29uc3QsIEAoJFNpemUpKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJEF0dHJpYkJ1aWxkZXIgPSBOZXctT2JqZWN0IFJlZmxlY3Rpb24uRW1pdC5DdXN0b21BdHRyaWJ1dGVCdWlsZGVyKCRDb25zdHJ1Y3RvckluZm8sIFtPYmplY3RbXV0gQCgkVW5tYW5hZ2VkVHlwZSkpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgJE5ld0ZpZWxkLlNldEN1c3RvbUF0dHJpYnV0ZSgkQXR0cmliQnVpbGRlcikKICAgICAgICB9CiAgICAgICAgaWYgKCRFeHBsaWNpdExheW91dCkgeyAkTmV3RmllbGQuU2V0T2Zmc2V0KCRPZmZzZXQpIH0KICAgIH0KICAgIAogICAgCiAgICAkU2l6ZU1ldGhvZCA9ICRTdHJ1Y3RCdWlsZGVyLkRlZmluZU1ldGhvZCgnR2V0U2l6ZScsCiAgICAgICAgJ1B1YmxpYywgU3RhdGljJywKICAgICAgICBbSW50XSwKICAgICAgICBbVHlwZVtdXSBAKCkpCiAgICAkSUxHZW5lcmF0b3IgPSAkU2l6ZU1ldGhvZC5HZXRJTEdlbmVyYXRvcigpCiAgICAKICAgICRJTEdlbmVyYXRvci5FbWl0KFtSZWZsZWN0aW9uLkVtaXQuT3BDb2Rlc106OkxkdG9rZW4sICRTdHJ1Y3RCdWlsZGVyKQogICAgJElMR2VuZXJhdG9yLkVtaXQoW1JlZmxlY3Rpb24uRW1pdC5PcENvZGVzXTo6Q2FsbCwKICAgICAgICBbVHlwZV0uR2V0TWV0aG9kKCdHZXRUeXBlRnJvbUhhbmRsZScpKQogICAgJElMR2VuZXJhdG9yLkVtaXQoW1JlZmxlY3Rpb24uRW1pdC5PcENvZGVzXTo6Q2FsbCwKICAgICAgICBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF0uR2V0TWV0aG9kKCdTaXplT2YnLCBbVHlwZVtdXSBAKFtUeXBlXSkpKQogICAgJElMR2VuZXJhdG9yLkVtaXQoW1JlZmxlY3Rpb24uRW1pdC5PcENvZGVzXTo6UmV0KQogICAgCiAgICAKICAgICRJbXBsaWNpdENvbnZlcnRlciA9ICRTdHJ1Y3RCdWlsZGVyLkRlZmluZU1ldGhvZCgnb3BfSW1wbGljaXQnLAogICAgICAgICdQcml2YXRlU2NvcGUsIFB1YmxpYywgU3RhdGljLCBIaWRlQnlTaWcsIFNwZWNpYWxOYW1lJywKICAgICAgICAkU3RydWN0QnVpbGRlciwKICAgICAgICBbVHlwZVtdXSBAKFtJbnRQdHJdKSkKICAgICRJTEdlbmVyYXRvcjIgPSAkSW1wbGljaXRDb252ZXJ0ZXIuR2V0SUxHZW5lcmF0b3IoKQogICAgJElMR2VuZXJhdG9yMi5FbWl0KFtSZWZsZWN0aW9uLkVtaXQuT3BDb2Rlc106Ok5vcCkKICAgICRJTEdlbmVyYXRvcjIuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpMZGFyZ18wKQogICAgJElMR2VuZXJhdG9yMi5FbWl0KFtSZWZsZWN0aW9uLkVtaXQuT3BDb2Rlc106OkxkdG9rZW4sICRTdHJ1Y3RCdWlsZGVyKQogICAgJElMR2VuZXJhdG9yMi5FbWl0KFtSZWZsZWN0aW9uLkVtaXQuT3BDb2Rlc106OkNhbGwsCiAgICAgICAgW1R5cGVdLkdldE1ldGhvZCgnR2V0VHlwZUZyb21IYW5kbGUnKSkKICAgICRJTEdlbmVyYXRvcjIuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpDYWxsLAogICAgICAgIFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXS5HZXRNZXRob2QoJ1B0clRvU3RydWN0dXJlJywgW1R5cGVbXV0gQChbSW50UHRyXSwgW1R5cGVdKSkpCiAgICAkSUxHZW5lcmF0b3IyLkVtaXQoW1JlZmxlY3Rpb24uRW1pdC5PcENvZGVzXTo6VW5ib3hfQW55LCAkU3RydWN0QnVpbGRlcikKICAgICRJTEdlbmVyYXRvcjIuRW1pdChbUmVmbGVjdGlvbi5FbWl0Lk9wQ29kZXNdOjpSZXQpCiAgICAkU3RydWN0QnVpbGRlci5DcmVhdGVUeXBlKCkKfQ==
ZmlsdGVyIEdldC1JbmlDb250ZW50IHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lQnlQcm9wZXJ0eU5hbWU9JFRydWUpXQogICAgICAgIFtBbGlhcygnRnVsbE5hbWUnKV0KICAgICAgICBbVmFsaWRhdGVTY3JpcHQoeyBUZXN0LVBhdGggLVBhdGggJF8gfSldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRQYXRoCiAgICApCiAgICBGb3JFYWNoKCRUYXJnZXRQYXRoIGluICRQYXRoKSB7CiAgICAgICAgJEluaU9iamVjdCA9IEB7fQogICAgICAgIFN3aXRjaCAtUmVnZXggLUZpbGUgJFRhcmdldFBhdGggewogICAgICAgICAgICAiXlxbKC4rKVxdIiAKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJFNlY3Rpb24gPSAkbWF0Y2hlc1sxXS5UcmltKCkKICAgICAgICAgICAgICAgICRJbmlPYmplY3RbJFNlY3Rpb25dID0gQHt9CiAgICAgICAgICAgICAgICAkQ29tbWVudENvdW50ID0gMAogICAgICAgICAgICB9CiAgICAgICAgICAgICJeKDsuKikkIiAKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJFZhbHVlID0gJG1hdGNoZXNbMV0uVHJpbSgpCiAgICAgICAgICAgICAgICAkQ29tbWVudENvdW50ID0gJENvbW1lbnRDb3VudCArIDEKICAgICAgICAgICAgICAgICROYW1lID0gJ0NvbW1lbnQnICsgJENvbW1lbnRDb3VudAogICAgICAgICAgICAgICAgJEluaU9iamVjdFskU2VjdGlvbl1bJE5hbWVdID0gJFZhbHVlCiAgICAgICAgICAgIH0gCiAgICAgICAgICAgICIoLis/KVxzKj0oLiopIiAKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJE5hbWUsICRWYWx1ZSA9ICRtYXRjaGVzWzEuLjJdCiAgICAgICAgICAgICAgICAkTmFtZSA9ICROYW1lLlRyaW0oKQogICAgICAgICAgICAgICAgJFZhbHVlcyA9ICRWYWx1ZS5zcGxpdCgnLCcpIHwgRm9yRWFjaC1PYmplY3QgeyRfLlRyaW0oKX0KICAgICAgICAgICAgICAgIGlmKCRWYWx1ZXMgLWlzbm90IFtTeXN0ZW0uQXJyYXldKSB7JFZhbHVlcyA9IEAoJFZhbHVlcyl9CiAgICAgICAgICAgICAgICAkSW5pT2JqZWN0WyRTZWN0aW9uXVskTmFtZV0gPSAkVmFsdWVzCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgJEluaU9iamVjdAogICAgfQp9
ZmlsdGVyIEV4cG9ydC1Qb3dlclZpZXdDU1YgewogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSRUcnVlKV0KICAgICAgICBbU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU09iamVjdFtdXQogICAgICAgICRJbnB1dE9iamVjdCwKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kVHJ1ZSwgUG9zaXRpb249MCldCiAgICAgICAgW1N0cmluZ10KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgICRPdXRGaWxlCiAgICApCiAgICAkT2JqZWN0Q1NWID0gJElucHV0T2JqZWN0IHwgQ29udmVydFRvLUNzdiAtTm9UeXBlSW5mb3JtYXRpb24KICAgIAogICAgJE11dGV4ID0gTmV3LU9iamVjdCBTeXN0ZW0uVGhyZWFkaW5nLk11dGV4ICRGYWxzZSwnQ1NWTXV0ZXgnOwogICAgJE51bGwgPSAkTXV0ZXguV2FpdE9uZSgpCiAgICBpZiAoVGVzdC1QYXRoIC1QYXRoICRPdXRGaWxlKSB7CiAgICAgICAgCiAgICAgICAgJE9iamVjdENTViB8IEZvckVhY2gtT2JqZWN0IHsgJFN0YXJ0PSRUcnVlIH17IGlmICgkU3RhcnQpIHskU3RhcnQ9JEZhbHNlfSBlbHNlIHskX30gfSB8IE91dC1GaWxlIC1FbmNvZGluZyAnQVNDSUknIC1BcHBlbmQgLUZpbGVQYXRoICRPdXRGaWxlCiAgICB9CiAgICBlbHNlIHsKICAgICAgICAkT2JqZWN0Q1NWIHwgT3V0LUZpbGUgLUVuY29kaW5nICdBU0NJSScgLUFwcGVuZCAtRmlsZVBhdGggJE91dEZpbGUKICAgIH0KICAgICRNdXRleC5SZWxlYXNlTXV0ZXgoKQp9
ZmlsdGVyIEdldC1JUEFkZHJlc3MgewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb249MCwgVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlck5hbWUgPSAkRW52OkNvbXB1dGVyTmFtZQogICAgKQogICAgdHJ5IHsKICAgICAgICAKICAgICAgICAkQ29tcHV0ZXIgPSAkQ29tcHV0ZXJOYW1lIHwgR2V0LU5hbWVGaWVsZAogICAgICAgIAogICAgICAgIEAoKFtOZXQuRG5zXTo6R2V0SG9zdEVudHJ5KCRDb21wdXRlcikpLkFkZHJlc3NMaXN0KSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgaWYgKCRfLkFkZHJlc3NGYW1pbHkgLWVxICdJbnRlck5ldHdvcmsnKSB7CiAgICAgICAgICAgICAgICAkT3V0ID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRDb21wdXRlcgogICAgICAgICAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJUEFkZHJlc3MnICRfLklQQWRkcmVzc1RvU3RyaW5nCiAgICAgICAgICAgICAgICAkT3V0CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBjYXRjaCB7CiAgICAgICAgV3JpdGUtVmVyYm9zZSAtTWVzc2FnZSAnQ291bGQgbm90IHJlc29sdmUgaG9zdCB0byBhbiBJUCBBZGRyZXNzLicKICAgIH0KfQ==
ZmlsdGVyIENvbnZlcnQtTmFtZVRvU2lkIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgW0FsaWFzKCdOYW1lJyldCiAgICAgICAgJE9iamVjdE5hbWUsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluCiAgICApCiAgICAkT2JqZWN0TmFtZSA9ICRPYmplY3ROYW1lIC1SZXBsYWNlICIvIiwiXCIKICAgIAogICAgaWYoJE9iamVjdE5hbWUuQ29udGFpbnMoIlwiKSkgewogICAgICAgIAogICAgICAgICREb21haW4gPSAkT2JqZWN0TmFtZS5TcGxpdCgiXCIpWzBdCiAgICAgICAgJE9iamVjdE5hbWUgPSAkT2JqZWN0TmFtZS5TcGxpdCgiXCIpWzFdCiAgICB9CiAgICBlbHNlaWYoLW5vdCAkRG9tYWluKSB7CiAgICAgICAgJERvbWFpbiA9IChHZXQtTmV0RG9tYWluKS5OYW1lCiAgICB9CiAgICB0cnkgewogICAgICAgICRPYmogPSAoTmV3LU9iamVjdCBTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLk5UQWNjb3VudCgkRG9tYWluLCAkT2JqZWN0TmFtZSkpCiAgICAgICAgJFNJRCA9ICRPYmouVHJhbnNsYXRlKFtTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLlNlY3VyaXR5SWRlbnRpZmllcl0pLlZhbHVlCiAgICAgICAgCiAgICAgICAgJE91dCA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAkT3V0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ09iamVjdE5hbWUnICRPYmplY3ROYW1lCiAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdTSUQnICRTSUQKICAgICAgICAkT3V0CiAgICB9CiAgICBjYXRjaCB7CiAgICAgICAgV3JpdGUtVmVyYm9zZSAiSW52YWxpZCBvYmplY3QvbmFtZTogJERvbWFpblwkT2JqZWN0TmFtZSIKICAgICAgICAkTnVsbAogICAgfQp9
ZmlsdGVyIENvbnZlcnQtU2lkVG9OYW1lIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgW1ZhbGlkYXRlUGF0dGVybignXlMtMS0uKicpXQogICAgICAgICRTSUQKICAgICkKICAgIHRyeSB7CiAgICAgICAgJFNJRDIgPSAkU0lELnRyaW0oJyonKQogICAgICAgIAogICAgICAgIAogICAgICAgIFN3aXRjaCAoJFNJRDIpIHsKICAgICAgICAgICAgJ1MtMS0wJyAgICAgICAgIHsgJ051bGwgQXV0aG9yaXR5JyB9CiAgICAgICAgICAgICdTLTEtMC0wJyAgICAgICB7ICdOb2JvZHknIH0KICAgICAgICAgICAgJ1MtMS0xJyAgICAgICAgIHsgJ1dvcmxkIEF1dGhvcml0eScgfQogICAgICAgICAgICAnUy0xLTEtMCcgICAgICAgeyAnRXZlcnlvbmUnIH0KICAgICAgICAgICAgJ1MtMS0yJyAgICAgICAgIHsgJ0xvY2FsIEF1dGhvcml0eScgfQogICAgICAgICAgICAnUy0xLTItMCcgICAgICAgeyAnTG9jYWwnIH0KICAgICAgICAgICAgJ1MtMS0yLTEnICAgICAgIHsgJ0NvbnNvbGUgTG9nb24gJyB9CiAgICAgICAgICAgICdTLTEtMycgICAgICAgICB7ICdDcmVhdG9yIEF1dGhvcml0eScgfQogICAgICAgICAgICAnUy0xLTMtMCcgICAgICAgeyAnQ3JlYXRvciBPd25lcicgfQogICAgICAgICAgICAnUy0xLTMtMScgICAgICAgeyAnQ3JlYXRvciBHcm91cCcgfQogICAgICAgICAgICAnUy0xLTMtMicgICAgICAgeyAnQ3JlYXRvciBPd25lciBTZXJ2ZXInIH0KICAgICAgICAgICAgJ1MtMS0zLTMnICAgICAgIHsgJ0NyZWF0b3IgR3JvdXAgU2VydmVyJyB9CiAgICAgICAgICAgICdTLTEtMy00JyAgICAgICB7ICdPd25lciBSaWdodHMnIH0KICAgICAgICAgICAgJ1MtMS00JyAgICAgICAgIHsgJ05vbi11bmlxdWUgQXV0aG9yaXR5JyB9CiAgICAgICAgICAgICdTLTEtNScgICAgICAgICB7ICdOVCBBdXRob3JpdHknIH0KICAgICAgICAgICAgJ1MtMS01LTEnICAgICAgIHsgJ0RpYWx1cCcgfQogICAgICAgICAgICAnUy0xLTUtMicgICAgICAgeyAnTmV0d29yaycgfQogICAgICAgICAgICAnUy0xLTUtMycgICAgICAgeyAnQmF0Y2gnIH0KICAgICAgICAgICAgJ1MtMS01LTQnICAgICAgIHsgJ0ludGVyYWN0aXZlJyB9CiAgICAgICAgICAgICdTLTEtNS02JyAgICAgICB7ICdTZXJ2aWNlJyB9CiAgICAgICAgICAgICdTLTEtNS03JyAgICAgICB7ICdBbm9ueW1vdXMnIH0KICAgICAgICAgICAgJ1MtMS01LTgnICAgICAgIHsgJ1Byb3h5JyB9CiAgICAgICAgICAgICdTLTEtNS05JyAgICAgICB7ICdFbnRlcnByaXNlIERvbWFpbiBDb250cm9sbGVycycgfQogICAgICAgICAgICAnUy0xLTUtMTAnICAgICAgeyAnUHJpbmNpcGFsIFNlbGYnIH0KICAgICAgICAgICAgJ1MtMS01LTExJyAgICAgIHsgJ0F1dGhlbnRpY2F0ZWQgVXNlcnMnIH0KICAgICAgICAgICAgJ1MtMS01LTEyJyAgICAgIHsgJ1Jlc3RyaWN0ZWQgQ29kZScgfQogICAgICAgICAgICAnUy0xLTUtMTMnICAgICAgeyAnVGVybWluYWwgU2VydmVyIFVzZXJzJyB9CiAgICAgICAgICAgICdTLTEtNS0xNCcgICAgICB7ICdSZW1vdGUgSW50ZXJhY3RpdmUgTG9nb24nIH0KICAgICAgICAgICAgJ1MtMS01LTE1JyAgICAgIHsgJ1RoaXMgT3JnYW5pemF0aW9uICcgfQogICAgICAgICAgICAnUy0xLTUtMTcnICAgICAgeyAnVGhpcyBPcmdhbml6YXRpb24gJyB9CiAgICAgICAgICAgICdTLTEtNS0xOCcgICAgICB7ICdMb2NhbCBTeXN0ZW0nIH0KICAgICAgICAgICAgJ1MtMS01LTE5JyAgICAgIHsgJ05UIEF1dGhvcml0eScgfQogICAgICAgICAgICAnUy0xLTUtMjAnICAgICAgeyAnTlQgQXV0aG9yaXR5JyB9CiAgICAgICAgICAgICdTLTEtNS04MC0wJyAgICB7ICdBbGwgU2VydmljZXMgJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01NDQnICB7ICdCVUlMVElOXEFkbWluaXN0cmF0b3JzJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01NDUnICB7ICdCVUlMVElOXFVzZXJzJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01NDYnICB7ICdCVUlMVElOXEd1ZXN0cycgfQogICAgICAgICAgICAnUy0xLTUtMzItNTQ3JyAgeyAnQlVJTFRJTlxQb3dlciBVc2VycycgfQogICAgICAgICAgICAnUy0xLTUtMzItNTQ4JyAgeyAnQlVJTFRJTlxBY2NvdW50IE9wZXJhdG9ycycgfQogICAgICAgICAgICAnUy0xLTUtMzItNTQ5JyAgeyAnQlVJTFRJTlxTZXJ2ZXIgT3BlcmF0b3JzJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01NTAnICB7ICdCVUlMVElOXFByaW50IE9wZXJhdG9ycycgfQogICAgICAgICAgICAnUy0xLTUtMzItNTUxJyAgeyAnQlVJTFRJTlxCYWNrdXAgT3BlcmF0b3JzJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01NTInICB7ICdCVUlMVElOXFJlcGxpY2F0b3JzJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01NTQnICB7ICdCVUlMVElOXFByZS1XaW5kb3dzIDIwMDAgQ29tcGF0aWJsZSBBY2Nlc3MnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU1NScgIHsgJ0JVSUxUSU5cUmVtb3RlIERlc2t0b3AgVXNlcnMnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU1NicgIHsgJ0JVSUxUSU5cTmV0d29yayBDb25maWd1cmF0aW9uIE9wZXJhdG9ycycgfQogICAgICAgICAgICAnUy0xLTUtMzItNTU3JyAgeyAnQlVJTFRJTlxJbmNvbWluZyBGb3Jlc3QgVHJ1c3QgQnVpbGRlcnMnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU1OCcgIHsgJ0JVSUxUSU5cUGVyZm9ybWFuY2UgTW9uaXRvciBVc2VycycgfQogICAgICAgICAgICAnUy0xLTUtMzItNTU5JyAgeyAnQlVJTFRJTlxQZXJmb3JtYW5jZSBMb2cgVXNlcnMnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU2MCcgIHsgJ0JVSUxUSU5cV2luZG93cyBBdXRob3JpemF0aW9uIEFjY2VzcyBHcm91cCcgfQogICAgICAgICAgICAnUy0xLTUtMzItNTYxJyAgeyAnQlVJTFRJTlxUZXJtaW5hbCBTZXJ2ZXIgTGljZW5zZSBTZXJ2ZXJzJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01NjInICB7ICdCVUlMVElOXERpc3RyaWJ1dGVkIENPTSBVc2VycycgfQogICAgICAgICAgICAnUy0xLTUtMzItNTY5JyAgeyAnQlVJTFRJTlxDcnlwdG9ncmFwaGljIE9wZXJhdG9ycycgfQogICAgICAgICAgICAnUy0xLTUtMzItNTczJyAgeyAnQlVJTFRJTlxFdmVudCBMb2cgUmVhZGVycycgfQogICAgICAgICAgICAnUy0xLTUtMzItNTc0JyAgeyAnQlVJTFRJTlxDZXJ0aWZpY2F0ZSBTZXJ2aWNlIERDT00gQWNjZXNzJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01NzUnICB7ICdCVUlMVElOXFJEUyBSZW1vdGUgQWNjZXNzIFNlcnZlcnMnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU3NicgIHsgJ0JVSUxUSU5cUkRTIEVuZHBvaW50IFNlcnZlcnMnIH0KICAgICAgICAgICAgJ1MtMS01LTMyLTU3NycgIHsgJ0JVSUxUSU5cUkRTIE1hbmFnZW1lbnQgU2VydmVycycgfQogICAgICAgICAgICAnUy0xLTUtMzItNTc4JyAgeyAnQlVJTFRJTlxIeXBlci1WIEFkbWluaXN0cmF0b3JzJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01NzknICB7ICdCVUlMVElOXEFjY2VzcyBDb250cm9sIEFzc2lzdGFuY2UgT3BlcmF0b3JzJyB9CiAgICAgICAgICAgICdTLTEtNS0zMi01ODAnICB7ICdCVUlMVElOXEFjY2VzcyBDb250cm9sIEFzc2lzdGFuY2UgT3BlcmF0b3JzJyB9CiAgICAgICAgICAgIERlZmF1bHQgeyAKICAgICAgICAgICAgICAgICRPYmogPSAoTmV3LU9iamVjdCBTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLlNlY3VyaXR5SWRlbnRpZmllcigkU0lEMikpCiAgICAgICAgICAgICAgICAkT2JqLlRyYW5zbGF0ZSggW1N5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuTlRBY2NvdW50XSkuVmFsdWUKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGNhdGNoIHsKICAgICAgICBXcml0ZS1WZXJib3NlICJJbnZhbGlkIFNJRDogJFNJRCIKICAgICAgICAkU0lECiAgICB9Cn0=
ZmlsdGVyIENvbnZlcnQtQUROYW1lIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJE9iamVjdE5hbWUsCiAgICAgICAgW1N0cmluZ10KICAgICAgICBbVmFsaWRhdGVTZXQoIk5UNCIsIlNpbXBsZSIsIkNhbm9uaWNhbCIpXQogICAgICAgICRJbnB1dFR5cGUsCiAgICAgICAgW1N0cmluZ10KICAgICAgICBbVmFsaWRhdGVTZXQoIk5UNCIsIlNpbXBsZSIsIkNhbm9uaWNhbCIpXQogICAgICAgICRPdXRwdXRUeXBlCiAgICApCiAgICAkTmFtZVR5cGVzID0gQHsKICAgICAgICAnQ2Fub25pY2FsJyA9IDIKICAgICAgICAnTlQ0JyAgICAgICA9IDMKICAgICAgICAnU2ltcGxlJyAgICA9IDUKICAgIH0KICAgIGlmKC1ub3QgJFBTQm91bmRQYXJhbWV0ZXJzWydJbnB1dFR5cGUnXSkgewogICAgICAgIGlmKCAoJE9iamVjdE5hbWUuc3BsaXQoJy8nKSkuQ291bnQgLWVxIDIgKSB7CiAgICAgICAgICAgICRPYmplY3ROYW1lID0gJE9iamVjdE5hbWUucmVwbGFjZSgnLycsICdcJykKICAgICAgICB9CiAgICAgICAgaWYoJE9iamVjdE5hbWUgLW1hdGNoICJeW0EtWmEtel0rXFxbQS1aYS16IF0rIikgewogICAgICAgICAgICAkSW5wdXRUeXBlID0gJ05UNCcKICAgICAgICB9CiAgICAgICAgZWxzZWlmKCRPYmplY3ROYW1lIC1tYXRjaCAiXltBLVphLXogXStAW0EtWmEtelwuXSsiKSB7CiAgICAgICAgICAgICRJbnB1dFR5cGUgPSAnU2ltcGxlJwogICAgICAgIH0KICAgICAgICBlbHNlaWYoJE9iamVjdE5hbWUgLW1hdGNoICJeW0EtWmEtelwuXSsvW0EtWmEtel0rL1tBLVphLXovIF0rIikgewogICAgICAgICAgICAkSW5wdXRUeXBlID0gJ0Nhbm9uaWNhbCcKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIkNhbiBub3QgaWRlbnRpZnkgSW5UeXBlIGZvciAkT2JqZWN0TmFtZSIKICAgICAgICAgICAgcmV0dXJuICRPYmplY3ROYW1lCiAgICAgICAgfQogICAgfQogICAgZWxzZWlmKCRJbnB1dFR5cGUgLWVxICdOVDQnKSB7CiAgICAgICAgJE9iamVjdE5hbWUgPSAkT2JqZWN0TmFtZS5yZXBsYWNlKCcvJywgJ1wnKQogICAgfQogICAgaWYoLW5vdCAkUFNCb3VuZFBhcmFtZXRlcnNbJ091dHB1dFR5cGUnXSkgewogICAgICAgICRPdXRwdXRUeXBlID0gU3dpdGNoKCRJbnB1dFR5cGUpIHsKICAgICAgICAgICAgJ05UNCcgeydDYW5vbmljYWwnfQogICAgICAgICAgICAnU2ltcGxlJyB7J05UNCd9CiAgICAgICAgICAgICdDYW5vbmljYWwnIHsnTlQ0J30KICAgICAgICB9CiAgICB9CiAgICAKICAgICREb21haW4gPSBTd2l0Y2goJElucHV0VHlwZSkgewogICAgICAgICdOVDQnIHsgJE9iamVjdE5hbWUuc3BsaXQoIlwiKVswXSB9CiAgICAgICAgJ1NpbXBsZScgeyAkT2JqZWN0TmFtZS5zcGxpdCgiQCIpWzFdIH0KICAgICAgICAnQ2Fub25pY2FsJyB7ICRPYmplY3ROYW1lLnNwbGl0KCIvIilbMF0gfQogICAgfQogICAgCiAgICBmdW5jdGlvbiBJbnZva2UtTWV0aG9kKFtfX0NvbU9iamVjdF0gJE9iamVjdCwgW1N0cmluZ10gJE1ldGhvZCwgJFBhcmFtZXRlcnMpIHsKICAgICAgICAkT3V0cHV0ID0gJE9iamVjdC5HZXRUeXBlKCkuSW52b2tlTWVtYmVyKCRNZXRob2QsICJJbnZva2VNZXRob2QiLCAkTnVsbCwgJE9iamVjdCwgJFBhcmFtZXRlcnMpCiAgICAgICAgaWYgKCAkT3V0cHV0ICkgeyAkT3V0cHV0IH0KICAgIH0KICAgIGZ1bmN0aW9uIFNldC1Qcm9wZXJ0eShbX19Db21PYmplY3RdICRPYmplY3QsIFtTdHJpbmddICRQcm9wZXJ0eSwgJFBhcmFtZXRlcnMpIHsKICAgICAgICBbVm9pZF0gJE9iamVjdC5HZXRUeXBlKCkuSW52b2tlTWVtYmVyKCRQcm9wZXJ0eSwgIlNldFByb3BlcnR5IiwgJE51bGwsICRPYmplY3QsICRQYXJhbWV0ZXJzKQogICAgfQogICAgJFRyYW5zbGF0ZSA9IE5ldy1PYmplY3QgLUNvbU9iamVjdCBOYW1lVHJhbnNsYXRlCiAgICB0cnkgewogICAgICAgIEludm9rZS1NZXRob2QgJFRyYW5zbGF0ZSAiSW5pdCIgKDEsICREb21haW4pCiAgICB9CiAgICBjYXRjaCBbU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5NZXRob2RJbnZvY2F0aW9uRXhjZXB0aW9uXSB7IAogICAgICAgIFdyaXRlLVZlcmJvc2UgIkVycm9yIHdpdGggdHJhbnNsYXRlIGluaXQgaW4gQ29udmVydC1BRE5hbWU6ICRfIgogICAgfQogICAgU2V0LVByb3BlcnR5ICRUcmFuc2xhdGUgIkNoYXNlUmVmZXJyYWwiICgweDYwKQogICAgdHJ5IHsKICAgICAgICBJbnZva2UtTWV0aG9kICRUcmFuc2xhdGUgIlNldCIgKCROYW1lVHlwZXNbJElucHV0VHlwZV0sICRPYmplY3ROYW1lKQogICAgICAgIChJbnZva2UtTWV0aG9kICRUcmFuc2xhdGUgIkdldCIgKCROYW1lVHlwZXNbJE91dHB1dFR5cGVdKSkKICAgIH0KICAgIGNhdGNoIFtTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLk1ldGhvZEludm9jYXRpb25FeGNlcHRpb25dIHsKICAgICAgICBXcml0ZS1WZXJib3NlICJFcnJvciB3aXRoIHRyYW5zbGF0ZSBTZXQvR2V0IGluIENvbnZlcnQtQUROYW1lOiAkXyIKICAgIH0KfQ==
ZnVuY3Rpb24gQ29udmVydEZyb20tVUFDVmFsdWUgewogICAgCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICAkVmFsdWUsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkU2hvd0FsbAogICAgKQogICAgYmVnaW4gewogICAgICAgIAogICAgICAgICRVQUNWYWx1ZXMgPSBOZXctT2JqZWN0IFN5c3RlbS5Db2xsZWN0aW9ucy5TcGVjaWFsaXplZC5PcmRlcmVkRGljdGlvbmFyeQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJTQ1JJUFQiLCAxKQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJBQ0NPVU5URElTQUJMRSIsIDIpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIkhPTUVESVJfUkVRVUlSRUQiLCA4KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJMT0NLT1VUIiwgMTYpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIlBBU1NXRF9OT1RSRVFEIiwgMzIpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIlBBU1NXRF9DQU5UX0NIQU5HRSIsIDY0KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJFTkNSWVBURURfVEVYVF9QV0RfQUxMT1dFRCIsIDEyOCkKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiVEVNUF9EVVBMSUNBVEVfQUNDT1VOVCIsIDI1NikKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiTk9STUFMX0FDQ09VTlQiLCA1MTIpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIklOVEVSRE9NQUlOX1RSVVNUX0FDQ09VTlQiLCAyMDQ4KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJXT1JLU1RBVElPTl9UUlVTVF9BQ0NPVU5UIiwgNDA5NikKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiU0VSVkVSX1RSVVNUX0FDQ09VTlQiLCA4MTkyKQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJET05UX0VYUElSRV9QQVNTV09SRCIsIDY1NTM2KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJNTlNfTE9HT05fQUNDT1VOVCIsIDEzMTA3MikKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiU01BUlRDQVJEX1JFUVVJUkVEIiwgMjYyMTQ0KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJUUlVTVEVEX0ZPUl9ERUxFR0FUSU9OIiwgNTI0Mjg4KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJOT1RfREVMRUdBVEVEIiwgMTA0ODU3NikKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiVVNFX0RFU19LRVlfT05MWSIsIDIwOTcxNTIpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIkRPTlRfUkVRX1BSRUFVVEgiLCA0MTk0MzA0KQogICAgICAgICRVQUNWYWx1ZXMuQWRkKCJQQVNTV09SRF9FWFBJUkVEIiwgODM4ODYwOCkKICAgICAgICAkVUFDVmFsdWVzLkFkZCgiVFJVU1RFRF9UT19BVVRIX0ZPUl9ERUxFR0FUSU9OIiwgMTY3NzcyMTYpCiAgICAgICAgJFVBQ1ZhbHVlcy5BZGQoIlBBUlRJQUxfU0VDUkVUU19BQ0NPVU5UIiwgNjcxMDg4NjQpCiAgICB9CiAgICBwcm9jZXNzIHsKICAgICAgICAkUmVzdWx0VUFDVmFsdWVzID0gTmV3LU9iamVjdCBTeXN0ZW0uQ29sbGVjdGlvbnMuU3BlY2lhbGl6ZWQuT3JkZXJlZERpY3Rpb25hcnkKICAgICAgICBpZigkVmFsdWUgLWlzIFtJbnRdKSB7CiAgICAgICAgICAgICRJbnRWYWx1ZSA9ICRWYWx1ZQogICAgICAgIH0KICAgICAgICBlbHNlaWYgKCRWYWx1ZSAtaXMgW1BTQ3VzdG9tT2JqZWN0XSkgewogICAgICAgICAgICBpZigkVmFsdWUudXNlcmFjY291bnRjb250cm9sKSB7CiAgICAgICAgICAgICAgICAkSW50VmFsdWUgPSAkVmFsdWUudXNlcmFjY291bnRjb250cm9sCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIkludmFsaWQgb2JqZWN0IGlucHV0IGZvciAtVmFsdWUgOiAkVmFsdWUiCiAgICAgICAgICAgIHJldHVybiAkTnVsbCAKICAgICAgICB9CiAgICAgICAgaWYoJFNob3dBbGwpIHsKICAgICAgICAgICAgZm9yZWFjaCAoJFVBQ1ZhbHVlIGluICRVQUNWYWx1ZXMuR2V0RW51bWVyYXRvcigpKSB7CiAgICAgICAgICAgICAgICBpZiggKCRJbnRWYWx1ZSAtYmFuZCAkVUFDVmFsdWUuVmFsdWUpIC1lcSAkVUFDVmFsdWUuVmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICAkUmVzdWx0VUFDVmFsdWVzLkFkZCgkVUFDVmFsdWUuTmFtZSwgIiQoJFVBQ1ZhbHVlLlZhbHVlKSsiKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJFJlc3VsdFVBQ1ZhbHVlcy5BZGQoJFVBQ1ZhbHVlLk5hbWUsICIkKCRVQUNWYWx1ZS5WYWx1ZSkiKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBmb3JlYWNoICgkVUFDVmFsdWUgaW4gJFVBQ1ZhbHVlcy5HZXRFbnVtZXJhdG9yKCkpIHsKICAgICAgICAgICAgICAgIGlmKCAoJEludFZhbHVlIC1iYW5kICRVQUNWYWx1ZS5WYWx1ZSkgLWVxICRVQUNWYWx1ZS5WYWx1ZSkgewogICAgICAgICAgICAgICAgICAgICRSZXN1bHRVQUNWYWx1ZXMuQWRkKCRVQUNWYWx1ZS5OYW1lLCAiJCgkVUFDVmFsdWUuVmFsdWUpIikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAkUmVzdWx0VUFDVmFsdWVzCiAgICB9Cn0=
ZmlsdGVyIEdldC1Qcm94eSB7CiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICRFTlY6Q09NUFVURVJOQU1FCiAgICApCiAgICB0cnkgewogICAgICAgICRSZWcgPSBbTWljcm9zb2Z0LldpbjMyLlJlZ2lzdHJ5S2V5XTo6T3BlblJlbW90ZUJhc2VLZXkoJ0N1cnJlbnRVc2VyJywgJENvbXB1dGVyTmFtZSkKICAgICAgICAkUmVnS2V5ID0gJFJlZy5PcGVuU3Via2V5KCJTT0ZUV0FSRVxcTWljcm9zb2Z0XFxXaW5kb3dzXFxDdXJyZW50VmVyc2lvblxcSW50ZXJuZXQgU2V0dGluZ3MiKQogICAgICAgICRQcm94eVNlcnZlciA9ICRSZWdLZXkuR2V0VmFsdWUoJ1Byb3h5U2VydmVyJykKICAgICAgICAkQXV0b0NvbmZpZ1VSTCA9ICRSZWdLZXkuR2V0VmFsdWUoJ0F1dG9Db25maWdVUkwnKQogICAgICAgICRXcGFkID0gIiIKICAgICAgICBpZigkQXV0b0NvbmZpZ1VSTCAtYW5kICgkQXV0b0NvbmZpZ1VSTCAtbmUgIiIpKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkV3BhZCA9IChOZXctT2JqZWN0IE5ldC5XZWJjbGllbnQpLkRvd25sb2FkU3RyaW5nKCRBdXRvQ29uZmlnVVJMKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIkVycm9yIGNvbm5lY3RpbmcgdG8gQXV0b0NvbmZpZ1VSTCA6ICRBdXRvQ29uZmlnVVJMIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGlmKCRQcm94eVNlcnZlciAtb3IgJEF1dG9Db25maWdVcmwpIHsKICAgICAgICAgICAgJFByb3BlcnRpZXMgPSBAewogICAgICAgICAgICAgICAgJ1Byb3h5U2VydmVyJyA9ICRQcm94eVNlcnZlcgogICAgICAgICAgICAgICAgJ0F1dG9Db25maWdVUkwnID0gJEF1dG9Db25maWdVUkwKICAgICAgICAgICAgICAgICdXcGFkJyA9ICRXcGFkCiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIE5ldy1PYmplY3QgLVR5cGVOYW1lIFBTT2JqZWN0IC1Qcm9wZXJ0eSAkUHJvcGVydGllcwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiTm8gcHJveHkgc2V0dGluZ3MgZm91bmQgZm9yICRDb21wdXRlck5hbWUiCiAgICAgICAgfQogICAgfQogICAgY2F0Y2ggewogICAgICAgIFdyaXRlLVdhcm5pbmcgIkVycm9yIGVudW1lcmF0aW5nIHByb3h5IHNldHRpbmdzIGZvciAkQ29tcHV0ZXJOYW1lIDogJF8iCiAgICB9Cn0=
ZnVuY3Rpb24gUmVxdWVzdC1TUE5UaWNrZXQgewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbQWxpYXMoJ1NlcnZpY2VQcmluY2lwYWxOYW1lJyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRTUE4sCiAgICAgICAgCiAgICAgICAgW0FsaWFzKCdFbmNyeXB0ZWRQYXJ0JyldCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRW5jUGFydAogICAgKQogICAgYmVnaW4gewogICAgICAgIEFkZC1UeXBlIC1Bc3NlbWJseU5hbWUgU3lzdGVtLklkZW50aXR5TW9kZWwKICAgIH0KICAgIHByb2Nlc3MgewogICAgICAgIEZvckVhY2goJFVzZXJTUE4gaW4gJFNQTikgewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJSZXF1ZXN0aW5nIHRpY2tldCBmb3I6ICRVc2VyU1BOIgogICAgICAgICAgICBpZiAoISRFbmNQYXJ0KSB7CiAgICAgICAgICAgICAgICBOZXctT2JqZWN0IFN5c3RlbS5JZGVudGl0eU1vZGVsLlRva2Vucy5LZXJiZXJvc1JlcXVlc3RvclNlY3VyaXR5VG9rZW4gLUFyZ3VtZW50TGlzdCAkVXNlclNQTgogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJFRpY2tldCA9IE5ldy1PYmplY3QgU3lzdGVtLklkZW50aXR5TW9kZWwuVG9rZW5zLktlcmJlcm9zUmVxdWVzdG9yU2VjdXJpdHlUb2tlbiAtQXJndW1lbnRMaXN0ICRVc2VyU1BOCiAgICAgICAgICAgICAgICAkVGlja2V0Qnl0ZVN0cmVhbSA9ICRUaWNrZXQuR2V0UmVxdWVzdCgpCiAgICAgICAgICAgICAgICBpZiAoJFRpY2tldEJ5dGVTdHJlYW0pCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgJFRpY2tldEhleFN0cmVhbSA9IFtTeXN0ZW0uQml0Q29udmVydGVyXTo6VG9TdHJpbmcoJFRpY2tldEJ5dGVTdHJlYW0pIC1yZXBsYWNlICItIgogICAgICAgICAgICAgICAgICAgIFtTeXN0ZW0uQ29sbGVjdGlvbnMuQXJyYXlMaXN0XSRQYXJ0cyA9ICgkVGlja2V0SGV4U3RyZWFtIC1yZXBsYWNlICdeKC4qPykwNDgyMC4uLiguKiknLCckMicpIC1TcGxpdCAiQTQ4MjAxIgogICAgICAgICAgICAgICAgICAgICRQYXJ0cy5SZW1vdmVBdCgkUGFydHMuQ291bnQgLSAxKQogICAgICAgICAgICAgICAgICAgICRQYXJ0cyAtam9pbiAiQTQ4MjAxIgogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0=
ZnVuY3Rpb24gR2V0LVBhdGhBY2wgewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5PSRUcnVlLCBWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkUGF0aCwKICAgICAgICBbU3dpdGNoXQogICAgICAgICRSZWN1cnNlCiAgICApCiAgICBiZWdpbiB7CiAgICAgICAgZnVuY3Rpb24gQ29udmVydC1GaWxlUmlnaHQgewogICAgICAgICAgICAKICAgICAgICAgICAgW0NtZGxldEJpbmRpbmcoKV0KICAgICAgICAgICAgcGFyYW0oCiAgICAgICAgICAgICAgICBbSW50XQogICAgICAgICAgICAgICAgJEZTUgogICAgICAgICAgICApCiAgICAgICAgICAgICRBY2Nlc3NNYXNrID0gQHsKICAgICAgICAgICAgICBbdWludDMyXScweDgwMDAwMDAwJyA9ICdHZW5lcmljUmVhZCcKICAgICAgICAgICAgICBbdWludDMyXScweDQwMDAwMDAwJyA9ICdHZW5lcmljV3JpdGUnCiAgICAgICAgICAgICAgW3VpbnQzMl0nMHgyMDAwMDAwMCcgPSAnR2VuZXJpY0V4ZWN1dGUnCiAgICAgICAgICAgICAgW3VpbnQzMl0nMHgxMDAwMDAwMCcgPSAnR2VuZXJpY0FsbCcKICAgICAgICAgICAgICBbdWludDMyXScweDAyMDAwMDAwJyA9ICdNYXhpbXVtQWxsb3dlZCcKICAgICAgICAgICAgICBbdWludDMyXScweDAxMDAwMDAwJyA9ICdBY2Nlc3NTeXN0ZW1TZWN1cml0eScKICAgICAgICAgICAgICBbdWludDMyXScweDAwMTAwMDAwJyA9ICdTeW5jaHJvbml6ZScKICAgICAgICAgICAgICBbdWludDMyXScweDAwMDgwMDAwJyA9ICdXcml0ZU93bmVyJwogICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwNDAwMDAnID0gJ1dyaXRlREFDJwogICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMjAwMDAnID0gJ1JlYWRDb250cm9sJwogICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMTAwMDAnID0gJ0RlbGV0ZScKICAgICAgICAgICAgICBbdWludDMyXScweDAwMDAwMTAwJyA9ICdXcml0ZUF0dHJpYnV0ZXMnCiAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAwMDA4MCcgPSAnUmVhZEF0dHJpYnV0ZXMnCiAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAwMDA0MCcgPSAnRGVsZXRlQ2hpbGQnCiAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAwMDAyMCcgPSAnRXhlY3V0ZS9UcmF2ZXJzZScKICAgICAgICAgICAgICBbdWludDMyXScweDAwMDAwMDEwJyA9ICdXcml0ZUV4dGVuZGVkQXR0cmlidXRlcycKICAgICAgICAgICAgICBbdWludDMyXScweDAwMDAwMDA4JyA9ICdSZWFkRXh0ZW5kZWRBdHRyaWJ1dGVzJwogICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMDAwMDQnID0gJ0FwcGVuZERhdGEvQWRkU3ViZGlyZWN0b3J5JwogICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMDAwMDInID0gJ1dyaXRlRGF0YS9BZGRGaWxlJwogICAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMDAwMDEnID0gJ1JlYWREYXRhL0xpc3REaXJlY3RvcnknCiAgICAgICAgICAgIH0KICAgICAgICAgICAgJFNpbXBsZVBlcm1pc3Npb25zID0gQHsKICAgICAgICAgICAgICBbdWludDMyXScweDFmMDFmZicgPSAnRnVsbENvbnRyb2wnCiAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMzAxYmYnID0gJ01vZGlmeScKICAgICAgICAgICAgICBbdWludDMyXScweDAyMDBhOScgPSAnUmVhZEFuZEV4ZWN1dGUnCiAgICAgICAgICAgICAgW3VpbnQzMl0nMHgwMjAxOWYnID0gJ1JlYWRBbmRXcml0ZScKICAgICAgICAgICAgICBbdWludDMyXScweDAyMDA4OScgPSAnUmVhZCcKICAgICAgICAgICAgICBbdWludDMyXScweDAwMDExNicgPSAnV3JpdGUnCiAgICAgICAgICAgIH0KICAgICAgICAgICAgJFBlcm1pc3Npb25zID0gQCgpCiAgICAgICAgICAgIAogICAgICAgICAgICAkUGVybWlzc2lvbnMgKz0gJFNpbXBsZVBlcm1pc3Npb25zLktleXMgfCAgJSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoJEZTUiAtYmFuZCAkXykgLWVxICRfKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNpbXBsZVBlcm1pc3Npb25zWyRfXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRGU1IgPSAkRlNSIC1iYW5kICgtbm90ICRfKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAkUGVybWlzc2lvbnMgKz0gJEFjY2Vzc01hc2suS2V5cyB8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHsgJEZTUiAtYmFuZCAkXyB9IHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICUgeyAkQWNjZXNzTWFza1skX10gfQogICAgICAgICAgICAoJFBlcm1pc3Npb25zIHwgP3skX30pIC1qb2luICIsIgogICAgICAgIH0KICAgIH0KICAgIHByb2Nlc3MgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgICRBQ0wgPSBHZXQtQWNsIC1QYXRoICRQYXRoCiAgICAgICAgICAgICRBQ0wuR2V0QWNjZXNzUnVsZXMoJHRydWUsJHRydWUsW1N5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuU2VjdXJpdHlJZGVudGlmaWVyXSkgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAkTmFtZXMgPSBAKCkKICAgICAgICAgICAgICAgIGlmICgkXy5JZGVudGl0eVJlZmVyZW5jZSAtbWF0Y2ggJ15TLTEtNS0yMS1bMC05XSstWzAtOV0rLVswLTldKy1bMC05XSsnKSB7CiAgICAgICAgICAgICAgICAgICAgJE9iamVjdCA9IEdldC1BRE9iamVjdCAtU0lEICRfLklkZW50aXR5UmVmZXJlbmNlCiAgICAgICAgICAgICAgICAgICAgJE5hbWVzID0gQCgpCiAgICAgICAgICAgICAgICAgICAgJFNJRHMgPSBAKCRPYmplY3Qub2JqZWN0c2lkKQogICAgICAgICAgICAgICAgICAgIGlmICgkUmVjdXJzZSAtYW5kIChAKCcyNjg0MzU0NTYnLCcyNjg0MzU0NTcnLCc1MzY4NzA5MTInLCc1MzY4NzA5MTMnKSAtY29udGFpbnMgJE9iamVjdC5zYW1BY2NvdW50VHlwZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFNJRHMgKz0gR2V0LU5ldEdyb3VwTWVtYmVyIC1TSUQgJE9iamVjdC5vYmplY3RzaWQgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBNZW1iZXJTaWQKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgJFNJRHMgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgICROYW1lcyArPSAsQCgkXywgKENvbnZlcnQtU2lkVG9OYW1lICRfKSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkTmFtZXMgKz0gLEAoJF8uSWRlbnRpdHlSZWZlcmVuY2UuVmFsdWUsIChDb252ZXJ0LVNpZFRvTmFtZSAkXy5JZGVudGl0eVJlZmVyZW5jZS5WYWx1ZSkpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBGb3JFYWNoKCROYW1lIGluICROYW1lcykgewogICAgICAgICAgICAgICAgICAgICRPdXQgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdQYXRoJyAkUGF0aAogICAgICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnRmlsZVN5c3RlbVJpZ2h0cycgKENvbnZlcnQtRmlsZVJpZ2h0IC1GU1IgJF8uRmlsZVN5c3RlbVJpZ2h0cy52YWx1ZV9fKQogICAgICAgICAgICAgICAgICAgICRPdXQgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSWRlbnRpdHlSZWZlcmVuY2UnICROYW1lWzFdCiAgICAgICAgICAgICAgICAgICAgJE91dCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJZGVudGl0eVNJRCcgJE5hbWVbMF0KICAgICAgICAgICAgICAgICAgICAkT3V0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0FjY2Vzc0NvbnRyb2xUeXBlJyAkXy5BY2Nlc3NDb250cm9sVHlwZQogICAgICAgICAgICAgICAgICAgICRPdXQKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgJF8KICAgICAgICB9CiAgICB9Cn0=
ZmlsdGVyIEdldC1OYW1lRmllbGQgewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmUgPSAkVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbT2JqZWN0XQogICAgICAgICRPYmplY3QsCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lID0gJFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERuc0hvc3ROYW1lLAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZSA9ICRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICROYW1lCiAgICApCiAgICBpZigkUFNCb3VuZFBhcmFtZXRlcnNbJ0Ruc0hvc3ROYW1lJ10pIHsKICAgICAgICAkRG5zSG9zdE5hbWUKICAgIH0KICAgIGVsc2VpZigkUFNCb3VuZFBhcmFtZXRlcnNbJ05hbWUnXSkgewogICAgICAgICROYW1lCiAgICB9CiAgICBlbHNlaWYoJE9iamVjdCkgewogICAgICAgIGlmICggW2Jvb2xdKCRPYmplY3QuUFNvYmplY3QuUHJvcGVydGllcy5uYW1lIC1tYXRjaCAiZG5zaG9zdG5hbWUiKSApIHsKICAgICAgICAgICAgCiAgICAgICAgICAgICRPYmplY3QuZG5zaG9zdG5hbWUKICAgICAgICB9CiAgICAgICAgZWxzZWlmICggW2Jvb2xdKCRPYmplY3QuUFNvYmplY3QuUHJvcGVydGllcy5uYW1lIC1tYXRjaCAibmFtZSIpICkgewogICAgICAgICAgICAKICAgICAgICAgICAgJE9iamVjdC5uYW1lCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAKICAgICAgICAgICAgJE9iamVjdAogICAgICAgIH0KICAgIH0KICAgIGVsc2UgewogICAgICAgIHJldHVybiAkTnVsbAogICAgfQp9
ZnVuY3Rpb24gQ29udmVydC1MREFQUHJvcGVydHkgewogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgICRQcm9wZXJ0aWVzCiAgICApCiAgICAkT2JqZWN0UHJvcGVydGllcyA9IEB7fQogICAgJFByb3BlcnRpZXMuUHJvcGVydHlOYW1lcyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICBpZiAoKCRfIC1lcSAib2JqZWN0c2lkIikgLW9yICgkXyAtZXEgInNpZGhpc3RvcnkiKSkgewogICAgICAgICAgICAKICAgICAgICAgICAgJE9iamVjdFByb3BlcnRpZXNbJF9dID0gKE5ldy1PYmplY3QgU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5TZWN1cml0eUlkZW50aWZpZXIoJFByb3BlcnRpZXNbJF9dWzBdLDApKS5WYWx1ZQogICAgICAgIH0KICAgICAgICBlbHNlaWYoJF8gLWVxICJvYmplY3RndWlkIikgewogICAgICAgICAgICAKICAgICAgICAgICAgJE9iamVjdFByb3BlcnRpZXNbJF9dID0gKE5ldy1PYmplY3QgR3VpZCAoLCRQcm9wZXJ0aWVzWyRfXVswXSkpLkd1aWQKICAgICAgICB9CiAgICAgICAgZWxzZWlmKCAoJF8gLWVxICJsYXN0bG9nb24iKSAtb3IgKCRfIC1lcSAibGFzdGxvZ29udGltZXN0YW1wIikgLW9yICgkXyAtZXEgInB3ZGxhc3RzZXQiKSAtb3IgKCRfIC1lcSAibGFzdGxvZ29mZiIpIC1vciAoJF8gLWVxICJiYWRQYXNzd29yZFRpbWUiKSApIHsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmICgkUHJvcGVydGllc1skX11bMF0gLWlzIFtTeXN0ZW0uTWFyc2hhbEJ5UmVmT2JqZWN0XSkgewogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkVGVtcCA9ICRQcm9wZXJ0aWVzWyRfXVswXQogICAgICAgICAgICAgICAgW0ludDMyXSRIaWdoID0gJFRlbXAuR2V0VHlwZSgpLkludm9rZU1lbWJlcigiSGlnaFBhcnQiLCBbU3lzdGVtLlJlZmxlY3Rpb24uQmluZGluZ0ZsYWdzXTo6R2V0UHJvcGVydHksICRudWxsLCAkVGVtcCwgJG51bGwpCiAgICAgICAgICAgICAgICBbSW50MzJdJExvdyAgPSAkVGVtcC5HZXRUeXBlKCkuSW52b2tlTWVtYmVyKCJMb3dQYXJ0IiwgIFtTeXN0ZW0uUmVmbGVjdGlvbi5CaW5kaW5nRmxhZ3NdOjpHZXRQcm9wZXJ0eSwgJG51bGwsICRUZW1wLCAkbnVsbCkKICAgICAgICAgICAgICAgICRPYmplY3RQcm9wZXJ0aWVzWyRfXSA9IChbZGF0ZXRpbWVdOjpGcm9tRmlsZVRpbWUoW0ludDY0XSgiMHh7MDp4OH17MTp4OH0iIC1mICRIaWdoLCAkTG93KSkpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkT2JqZWN0UHJvcGVydGllc1skX10gPSAoW2RhdGV0aW1lXTo6RnJvbUZpbGVUaW1lKCgkUHJvcGVydGllc1skX11bMF0pKSkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlaWYoJFByb3BlcnRpZXNbJF9dWzBdIC1pcyBbU3lzdGVtLk1hcnNoYWxCeVJlZk9iamVjdF0pIHsKICAgICAgICAgICAgCiAgICAgICAgICAgICRQcm9wID0gJFByb3BlcnRpZXNbJF9dCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkVGVtcCA9ICRQcm9wWyRfXVswXQogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAkXwogICAgICAgICAgICAgICAgW0ludDMyXSRIaWdoID0gJFRlbXAuR2V0VHlwZSgpLkludm9rZU1lbWJlcigiSGlnaFBhcnQiLCBbU3lzdGVtLlJlZmxlY3Rpb24uQmluZGluZ0ZsYWdzXTo6R2V0UHJvcGVydHksICRudWxsLCAkVGVtcCwgJG51bGwpCiAgICAgICAgICAgICAgICBbSW50MzJdJExvdyAgPSAkVGVtcC5HZXRUeXBlKCkuSW52b2tlTWVtYmVyKCJMb3dQYXJ0IiwgIFtTeXN0ZW0uUmVmbGVjdGlvbi5CaW5kaW5nRmxhZ3NdOjpHZXRQcm9wZXJ0eSwgJG51bGwsICRUZW1wLCAkbnVsbCkKICAgICAgICAgICAgICAgICRPYmplY3RQcm9wZXJ0aWVzWyRfXSA9IFtJbnQ2NF0oIjB4ezA6eDh9ezE6eDh9IiAtZiAkSGlnaCwgJExvdykKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAkT2JqZWN0UHJvcGVydGllc1skX10gPSAkUHJvcFskX10KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlaWYoJFByb3BlcnRpZXNbJF9dLmNvdW50IC1lcSAxKSB7CiAgICAgICAgICAgICRPYmplY3RQcm9wZXJ0aWVzWyRfXSA9ICRQcm9wZXJ0aWVzWyRfXVswXQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJE9iamVjdFByb3BlcnRpZXNbJF9dID0gJFByb3BlcnRpZXNbJF9dCiAgICAgICAgfQogICAgfQogICAgTmV3LU9iamVjdCAtVHlwZU5hbWUgUFNPYmplY3QgLVByb3BlcnR5ICRPYmplY3RQcm9wZXJ0aWVzCn0=
ZmlsdGVyIEdldC1Eb21haW5TZWFyY2hlciB7CiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKICAgICAgICBbU3RyaW5nXQogICAgICAgICRBRFNwYXRoLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEFEU3ByZWZpeCwKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMDAwKV0gCiAgICAgICAgW0ludF0KICAgICAgICAkUGFnZVNpemUgPSAyMDAsCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKICAgIGlmKC1ub3QgJENyZWRlbnRpYWwpIHsKICAgICAgICBpZigtbm90ICREb21haW4pIHsKICAgICAgICAgICAgJERvbWFpbiA9IChHZXQtTmV0RG9tYWluKS5uYW1lCiAgICAgICAgfQogICAgICAgIGVsc2VpZigtbm90ICREb21haW5Db250cm9sbGVyKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICREb21haW5Db250cm9sbGVyID0gKChHZXQtTmV0RG9tYWluKS5QZGNSb2xlT3duZXIpLk5hbWUKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICB0aHJvdyAiR2V0LURvbWFpblNlYXJjaGVyOiBFcnJvciBpbiByZXRyaWV2aW5nIFBEQyBmb3IgY3VycmVudCBkb21haW4iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBlbHNlaWYgKC1ub3QgJERvbWFpbkNvbnRyb2xsZXIpIHsKICAgICAgICAKICAgICAgICB0cnkgewogICAgICAgICAgICAkRG9tYWluQ29udHJvbGxlciA9ICgoR2V0LU5ldERvbWFpbiAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCkuUGRjUm9sZU93bmVyKS5OYW1lCiAgICAgICAgfQogICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgdGhyb3cgIkdldC1Eb21haW5TZWFyY2hlcjogRXJyb3IgaW4gcmV0cmlldmluZyBQREMgZm9yIGN1cnJlbnQgZG9tYWluIgogICAgICAgIH0KICAgICAgICBpZighJERvbWFpbkNvbnRyb2xsZXIpIHsKICAgICAgICAgICAgdGhyb3cgIkdldC1Eb21haW5TZWFyY2hlcjogRXJyb3IgaW4gcmV0cmlldmluZyBQREMgZm9yIGN1cnJlbnQgZG9tYWluIgogICAgICAgIH0KICAgIH0KICAgICRTZWFyY2hTdHJpbmcgPSAiTERBUDovLyIKICAgIGlmKCREb21haW5Db250cm9sbGVyKSB7CiAgICAgICAgJFNlYXJjaFN0cmluZyArPSAkRG9tYWluQ29udHJvbGxlcgogICAgICAgIGlmKCREb21haW4pewogICAgICAgICAgICAkU2VhcmNoU3RyaW5nICs9ICcvJwogICAgICAgIH0KICAgIH0KICAgIGlmKCRBRFNwcmVmaXgpIHsKICAgICAgICAkU2VhcmNoU3RyaW5nICs9ICRBRFNwcmVmaXggKyAnLCcKICAgIH0KICAgIGlmKCRBRFNwYXRoKSB7CiAgICAgICAgaWYoJEFEU3BhdGggLU1hdGNoICdeR0M6Ly8nKSB7CiAgICAgICAgICAgIAogICAgICAgICAgICAkRE4gPSAkQWRzUGF0aC5Ub1VwcGVyKCkuVHJpbSgnLycpCiAgICAgICAgICAgICRTZWFyY2hTdHJpbmcgPSAnJwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgaWYoJEFEU3BhdGggLW1hdGNoICdeTERBUDovLycpIHsKICAgICAgICAgICAgICAgIGlmKCRBRFNwYXRoIC1tYXRjaCAiTERBUDovLy4rLy4rIikgewogICAgICAgICAgICAgICAgICAgICRTZWFyY2hTdHJpbmcgPSAnJwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJEFEU3BhdGggPSAkQURTcGF0aC5TdWJzdHJpbmcoNykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAkRE4gPSAkQURTcGF0aAogICAgICAgIH0KICAgIH0KICAgIGVsc2UgewogICAgICAgIGlmKCREb21haW4gLWFuZCAoJERvbWFpbi5UcmltKCkgLW5lICIiKSkgewogICAgICAgICAgICAkRE4gPSAiREM9JCgkRG9tYWluLlJlcGxhY2UoJy4nLCAnLERDPScpKSIKICAgICAgICB9CiAgICB9CiAgICAkU2VhcmNoU3RyaW5nICs9ICRETgogICAgV3JpdGUtVmVyYm9zZSAiR2V0LURvbWFpblNlYXJjaGVyIHNlYXJjaCBzdHJpbmc6ICRTZWFyY2hTdHJpbmciCiAgICBpZigkQ3JlZGVudGlhbCkgewogICAgICAgIFdyaXRlLVZlcmJvc2UgIlVzaW5nIGFsdGVybmF0ZSBjcmVkZW50aWFscyBmb3IgTERBUCBjb25uZWN0aW9uIgogICAgICAgICREb21haW5PYmplY3QgPSBOZXctT2JqZWN0IERpcmVjdG9yeVNlcnZpY2VzLkRpcmVjdG9yeUVudHJ5KCRTZWFyY2hTdHJpbmcsICRDcmVkZW50aWFsLlVzZXJOYW1lLCAkQ3JlZGVudGlhbC5HZXROZXR3b3JrQ3JlZGVudGlhbCgpLlBhc3N3b3JkKQogICAgICAgICRTZWFyY2hlciA9IE5ldy1PYmplY3QgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkRpcmVjdG9yeVNlYXJjaGVyKCREb21haW5PYmplY3QpCiAgICB9CiAgICBlbHNlIHsKICAgICAgICAkU2VhcmNoZXIgPSBOZXctT2JqZWN0IFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5EaXJlY3RvcnlTZWFyY2hlcihbQURTSV0kU2VhcmNoU3RyaW5nKQogICAgfQogICAgJFNlYXJjaGVyLlBhZ2VTaXplID0gJFBhZ2VTaXplCiAgICAkU2VhcmNoZXIuQ2FjaGVSZXN1bHRzID0gJEZhbHNlCiAgICAkU2VhcmNoZXIKfQ==
ZmlsdGVyIENvbnZlcnQtRE5TUmVjb3JkIHsKICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb249MCwgVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kVHJ1ZSwgTWFuZGF0b3J5PSRUcnVlKV0KICAgICAgICBbQnl0ZVtdXQogICAgICAgICRETlNSZWNvcmQKICAgICkKICAgIGZ1bmN0aW9uIEdldC1OYW1lIHsKICAgICAgICAKICAgICAgICBbQ21kbGV0QmluZGluZygpXQogICAgICAgIHBhcmFtKAogICAgICAgICAgICBbQnl0ZVtdXQogICAgICAgICAgICAkUmF3CiAgICAgICAgKQogICAgICAgIFtJbnRdJExlbmd0aCA9ICRSYXdbMF0KICAgICAgICBbSW50XSRTZWdtZW50cyA9ICRSYXdbMV0KICAgICAgICBbSW50XSRJbmRleCA9ICAyCiAgICAgICAgW1N0cmluZ10kTmFtZSAgPSAiIgogICAgICAgIHdoaWxlICgkU2VnbWVudHMtLSAtZ3QgMCkKICAgICAgICB7CiAgICAgICAgICAgIFtJbnRdJFNlZ21lbnRMZW5ndGggPSAkUmF3WyRJbmRleCsrXQogICAgICAgICAgICB3aGlsZSAoJFNlZ21lbnRMZW5ndGgtLSAtZ3QgMCkgewogICAgICAgICAgICAgICAgJE5hbWUgKz0gW0NoYXJdJFJhd1skSW5kZXgrK10KICAgICAgICAgICAgfQogICAgICAgICAgICAkTmFtZSArPSAiLiIKICAgICAgICB9CiAgICAgICAgJE5hbWUKICAgIH0KICAgICRSRGF0YUxlbiA9IFtCaXRDb252ZXJ0ZXJdOjpUb1VJbnQxNigkRE5TUmVjb3JkLCAwKQogICAgJFJEYXRhVHlwZSA9IFtCaXRDb252ZXJ0ZXJdOjpUb1VJbnQxNigkRE5TUmVjb3JkLCAyKQogICAgJFVwZGF0ZWRBdFNlcmlhbCA9IFtCaXRDb252ZXJ0ZXJdOjpUb1VJbnQzMigkRE5TUmVjb3JkLCA4KQogICAgJFRUTFJhdyA9ICRETlNSZWNvcmRbMTIuLjE1XQogICAgCiAgICAkTnVsbCA9IFthcnJheV06OlJldmVyc2UoJFRUTFJhdykKICAgICRUVEwgPSBbQml0Q29udmVydGVyXTo6VG9VSW50MzIoJFRUTFJhdywgMCkKICAgICRBZ2UgPSBbQml0Q29udmVydGVyXTo6VG9VSW50MzIoJEROU1JlY29yZCwgMjApCiAgICBpZigkQWdlIC1uZSAwKSB7CiAgICAgICAgJFRpbWVTdGFtcCA9ICgoR2V0LURhdGUgLVllYXIgMTYwMSAtTW9udGggMSAtRGF5IDEgLUhvdXIgMCAtTWludXRlIDAgLVNlY29uZCAwKS5BZGRIb3VycygkYWdlKSkuVG9TdHJpbmcoKQogICAgfQogICAgZWxzZSB7CiAgICAgICAgJFRpbWVTdGFtcCA9ICJbc3RhdGljXSIKICAgIH0KICAgICRETlNSZWNvcmRPYmplY3QgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICBpZigkUkRhdGFUeXBlIC1lcSAxKSB7CiAgICAgICAgJElQID0gInswfS57MX0uezJ9LnszfSIgLWYgJEROU1JlY29yZFsyNF0sICRETlNSZWNvcmRbMjVdLCAkRE5TUmVjb3JkWzI2XSwgJEROU1JlY29yZFsyN10KICAgICAgICAkRGF0YSA9ICRJUAogICAgICAgICRETlNSZWNvcmRPYmplY3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUmVjb3JkVHlwZScgJ0EnCiAgICB9CiAgICBlbHNlaWYoJFJEYXRhVHlwZSAtZXEgMikgewogICAgICAgICROU05hbWUgPSBHZXQtTmFtZSAkRE5TUmVjb3JkWzI0Li4kRE5TUmVjb3JkLmxlbmd0aF0KICAgICAgICAkRGF0YSA9ICROU05hbWUKICAgICAgICAkRE5TUmVjb3JkT2JqZWN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1JlY29yZFR5cGUnICdOUycKICAgIH0KICAgIGVsc2VpZigkUkRhdGFUeXBlIC1lcSA1KSB7CiAgICAgICAgJEFsaWFzID0gR2V0LU5hbWUgJEROU1JlY29yZFsyNC4uJEROU1JlY29yZC5sZW5ndGhdCiAgICAgICAgJERhdGEgPSAkQWxpYXMKICAgICAgICAkRE5TUmVjb3JkT2JqZWN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1JlY29yZFR5cGUnICdDTkFNRScKICAgIH0KICAgIGVsc2VpZigkUkRhdGFUeXBlIC1lcSA2KSB7CiAgICAgICAgCiAgICAgICAgJERhdGEgPSAkKFtTeXN0ZW0uQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKCRETlNSZWNvcmRbMjQuLiRETlNSZWNvcmQubGVuZ3RoXSkpCiAgICAgICAgJEROU1JlY29yZE9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdSZWNvcmRUeXBlJyAnU09BJwogICAgfQogICAgZWxzZWlmKCRSRGF0YVR5cGUgLWVxIDEyKSB7CiAgICAgICAgJFB0ciA9IEdldC1OYW1lICRETlNSZWNvcmRbMjQuLiRETlNSZWNvcmQubGVuZ3RoXQogICAgICAgICREYXRhID0gJFB0cgogICAgICAgICRETlNSZWNvcmRPYmplY3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUmVjb3JkVHlwZScgJ1BUUicKICAgIH0KICAgIGVsc2VpZigkUkRhdGFUeXBlIC1lcSAxMykgewogICAgICAgIAogICAgICAgICREYXRhID0gJChbU3lzdGVtLkNvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZygkRE5TUmVjb3JkWzI0Li4kRE5TUmVjb3JkLmxlbmd0aF0pKQogICAgICAgICRETlNSZWNvcmRPYmplY3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUmVjb3JkVHlwZScgJ0hJTkZPJwogICAgfQogICAgZWxzZWlmKCRSRGF0YVR5cGUgLWVxIDE1KSB7CiAgICAgICAgCiAgICAgICAgJERhdGEgPSAkKFtTeXN0ZW0uQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKCRETlNSZWNvcmRbMjQuLiRETlNSZWNvcmQubGVuZ3RoXSkpCiAgICAgICAgJEROU1JlY29yZE9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdSZWNvcmRUeXBlJyAnTVgnCiAgICB9CiAgICBlbHNlaWYoJFJEYXRhVHlwZSAtZXEgMTYpIHsKICAgICAgICBbc3RyaW5nXSRUWFQgID0gIiIKICAgICAgICBbaW50XSRTZWdtZW50TGVuZ3RoID0gJEROU1JlY29yZFsyNF0KICAgICAgICAkSW5kZXggPSAyNQogICAgICAgIHdoaWxlICgkU2VnbWVudExlbmd0aC0tIC1ndCAwKSB7CiAgICAgICAgICAgICRUWFQgKz0gW2NoYXJdJEROU1JlY29yZFskaW5kZXgrK10KICAgICAgICB9CiAgICAgICAgJERhdGEgPSAkVFhUCiAgICAgICAgJEROU1JlY29yZE9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdSZWNvcmRUeXBlJyAnVFhUJwogICAgfQogICAgZWxzZWlmKCRSRGF0YVR5cGUgLWVxIDI4KSB7CiAgICAgICAgCiAgICAgICAgJERhdGEgPSAkKFtTeXN0ZW0uQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKCRETlNSZWNvcmRbMjQuLiRETlNSZWNvcmQubGVuZ3RoXSkpCiAgICAgICAgJEROU1JlY29yZE9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdSZWNvcmRUeXBlJyAnQUFBQScKICAgIH0KICAgIGVsc2VpZigkUkRhdGFUeXBlIC1lcSAzMykgewogICAgICAgIAogICAgICAgICREYXRhID0gJChbU3lzdGVtLkNvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZygkRE5TUmVjb3JkWzI0Li4kRE5TUmVjb3JkLmxlbmd0aF0pKQogICAgICAgICRETlNSZWNvcmRPYmplY3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUmVjb3JkVHlwZScgJ1NSVicKICAgIH0KICAgIGVsc2UgewogICAgICAgICREYXRhID0gJChbU3lzdGVtLkNvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZygkRE5TUmVjb3JkWzI0Li4kRE5TUmVjb3JkLmxlbmd0aF0pKQogICAgICAgICRETlNSZWNvcmRPYmplY3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUmVjb3JkVHlwZScgJ1VOS05PV04nCiAgICB9CiAgICAkRE5TUmVjb3JkT2JqZWN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VwZGF0ZWRBdFNlcmlhbCcgJFVwZGF0ZWRBdFNlcmlhbAogICAgJEROU1JlY29yZE9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdUVEwnICRUVEwKICAgICRETlNSZWNvcmRPYmplY3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQWdlJyAkQWdlCiAgICAkRE5TUmVjb3JkT2JqZWN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1RpbWVTdGFtcCcgJFRpbWVTdGFtcAogICAgJEROU1JlY29yZE9iamVjdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdEYXRhJyAkRGF0YQogICAgJEROU1JlY29yZE9iamVjdAp9
ZmlsdGVyIEdldC1ETlNab25lIHsKICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb249MCwgVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsLAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEZ1bGxEYXRhCiAgICApCiAgICAkRE5TU2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1QYWdlU2l6ZSAkUGFnZVNpemUgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgICRETlNTZWFyY2hlci5maWx0ZXI9IihvYmplY3RDbGFzcz1kbnNab25lKSIKICAgIGlmKCRETlNTZWFyY2hlcikgewogICAgICAgICRSZXN1bHRzID0gJEROU1NlYXJjaGVyLkZpbmRBbGwoKQogICAgICAgICRSZXN1bHRzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgIAogICAgICAgICAgICAkUHJvcGVydGllcyA9IENvbnZlcnQtTERBUFByb3BlcnR5IC1Qcm9wZXJ0aWVzICRfLlByb3BlcnRpZXMKICAgICAgICAgICAgJFByb3BlcnRpZXMgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnWm9uZU5hbWUnICRQcm9wZXJ0aWVzLm5hbWUKICAgICAgICAgICAgaWYgKCRGdWxsRGF0YSkgewogICAgICAgICAgICAgICAgJFByb3BlcnRpZXMKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRQcm9wZXJ0aWVzIHwgU2VsZWN0LU9iamVjdCBab25lTmFtZSxkaXN0aW5ndWlzaGVkbmFtZSx3aGVuY3JlYXRlZCx3aGVuY2hhbmdlZAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgICRSZXN1bHRzLmRpc3Bvc2UoKQogICAgICAgICRETlNTZWFyY2hlci5kaXNwb3NlKCkKICAgIH0KICAgICRETlNTZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLVBhZ2VTaXplICRQYWdlU2l6ZSAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtQURTcHJlZml4ICJDTj1NaWNyb3NvZnRETlMsREM9RG9tYWluRG5zWm9uZXMiCiAgICAkRE5TU2VhcmNoZXIuZmlsdGVyPSIob2JqZWN0Q2xhc3M9ZG5zWm9uZSkiCiAgICBpZigkRE5TU2VhcmNoZXIpIHsKICAgICAgICAkUmVzdWx0cyA9ICRETlNTZWFyY2hlci5GaW5kQWxsKCkKICAgICAgICAkUmVzdWx0cyB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAKICAgICAgICAgICAgJFByb3BlcnRpZXMgPSBDb252ZXJ0LUxEQVBQcm9wZXJ0eSAtUHJvcGVydGllcyAkXy5Qcm9wZXJ0aWVzCiAgICAgICAgICAgICRQcm9wZXJ0aWVzIHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgJ1pvbmVOYW1lJyAkUHJvcGVydGllcy5uYW1lCiAgICAgICAgICAgIGlmICgkRnVsbERhdGEpIHsKICAgICAgICAgICAgICAgICRQcm9wZXJ0aWVzCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkUHJvcGVydGllcyB8IFNlbGVjdC1PYmplY3QgWm9uZU5hbWUsZGlzdGluZ3Vpc2hlZG5hbWUsd2hlbmNyZWF0ZWQsd2hlbmNoYW5nZWQKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAkUmVzdWx0cy5kaXNwb3NlKCkKICAgICAgICAkRE5TU2VhcmNoZXIuZGlzcG9zZSgpCiAgICB9Cn0=
ZmlsdGVyIEdldC1ETlNSZWNvcmQgewogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbj0wLCBWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSRUcnVlLCBNYW5kYXRvcnk9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFpvbmVOYW1lLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXQogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCiAgICAkRE5TU2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1QYWdlU2l6ZSAkUGFnZVNpemUgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLUFEU3ByZWZpeCAiREM9JCgkWm9uZU5hbWUpLENOPU1pY3Jvc29mdEROUyxEQz1Eb21haW5EbnNab25lcyIKICAgICRETlNTZWFyY2hlci5maWx0ZXI9IihvYmplY3RDbGFzcz1kbnNOb2RlKSIKICAgIGlmKCRETlNTZWFyY2hlcikgewogICAgICAgICRSZXN1bHRzID0gJEROU1NlYXJjaGVyLkZpbmRBbGwoKQogICAgICAgICRSZXN1bHRzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICRQcm9wZXJ0aWVzID0gQ29udmVydC1MREFQUHJvcGVydHkgLVByb3BlcnRpZXMgJF8uUHJvcGVydGllcyB8IFNlbGVjdC1PYmplY3QgbmFtZSxkaXN0aW5ndWlzaGVkbmFtZSxkbnNyZWNvcmQsd2hlbmNyZWF0ZWQsd2hlbmNoYW5nZWQKICAgICAgICAgICAgICAgICRQcm9wZXJ0aWVzIHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgJ1pvbmVOYW1lJyAkWm9uZU5hbWUKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgKCRQcm9wZXJ0aWVzLmRuc3JlY29yZCAtaXMgW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5SZXN1bHRQcm9wZXJ0eVZhbHVlQ29sbGVjdGlvbl0pIHsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAkUmVjb3JkID0gQ29udmVydC1ETlNSZWNvcmQgLUROU1JlY29yZCAkUHJvcGVydGllcy5kbnNyZWNvcmRbMF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICRSZWNvcmQgPSBDb252ZXJ0LUROU1JlY29yZCAtRE5TUmVjb3JkICRQcm9wZXJ0aWVzLmRuc3JlY29yZAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYoJFJlY29yZCkgewogICAgICAgICAgICAgICAgICAgICRSZWNvcmQucHNvYmplY3QucHJvcGVydGllcyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgJFByb3BlcnRpZXMgfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAkXy5OYW1lICRfLlZhbHVlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJFByb3BlcnRpZXMKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJFUlJPUjogJF8iCiAgICAgICAgICAgICAgICAkUHJvcGVydGllcwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgICRSZXN1bHRzLmRpc3Bvc2UoKQogICAgICAgICRETlNTZWFyY2hlci5kaXNwb3NlKCkKICAgIH0KfQ==
ZmlsdGVyIEdldC1OZXREb21haW4gewogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCiAgICBpZigkQ3JlZGVudGlhbCkgewogICAgICAgIAogICAgICAgIFdyaXRlLVZlcmJvc2UgIlVzaW5nIGFsdGVybmF0ZSBjcmVkZW50aWFscyBmb3IgR2V0LU5ldERvbWFpbiIKICAgICAgICBpZighJERvbWFpbikgewogICAgICAgICAgICAKICAgICAgICAgICAgJERvbWFpbiA9ICRDcmVkZW50aWFsLkdldE5ldHdvcmtDcmVkZW50aWFsKCkuRG9tYWluCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkV4dHJhY3RlZCBkb21haW4gJyREb21haW4nIGZyb20gLUNyZWRlbnRpYWwiCiAgICAgICAgfQogICAKICAgICAgICAkRG9tYWluQ29udGV4dCA9IE5ldy1PYmplY3QgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeS5EaXJlY3RvcnlDb250ZXh0KCdEb21haW4nLCAkRG9tYWluLCAkQ3JlZGVudGlhbC5Vc2VyTmFtZSwgJENyZWRlbnRpYWwuR2V0TmV0d29ya0NyZWRlbnRpYWwoKS5QYXNzd29yZCkKICAgICAgICAKICAgICAgICB0cnkgewogICAgICAgICAgICBbU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeS5Eb21haW5dOjpHZXREb21haW4oJERvbWFpbkNvbnRleHQpCiAgICAgICAgfQogICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiVGhlIHNwZWNpZmllZCBkb21haW4gZG9lcyAnJERvbWFpbicgbm90IGV4aXN0LCBjb3VsZCBub3QgYmUgY29udGFjdGVkLCB0aGVyZSBpc24ndCBhbiBleGlzdGluZyB0cnVzdCwgb3IgdGhlIHNwZWNpZmllZCBjcmVkZW50aWFscyBhcmUgaW52YWxpZC4iCiAgICAgICAgICAgICROdWxsCiAgICAgICAgfQogICAgfQogICAgZWxzZWlmKCREb21haW4pIHsKICAgICAgICAkRG9tYWluQ29udGV4dCA9IE5ldy1PYmplY3QgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeS5EaXJlY3RvcnlDb250ZXh0KCdEb21haW4nLCAkRG9tYWluKQogICAgICAgIHRyeSB7CiAgICAgICAgICAgIFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5LkRvbWFpbl06OkdldERvbWFpbigkRG9tYWluQ29udGV4dCkKICAgICAgICB9CiAgICAgICAgY2F0Y2ggewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJUaGUgc3BlY2lmaWVkIGRvbWFpbiAnJERvbWFpbicgZG9lcyBub3QgZXhpc3QsIGNvdWxkIG5vdCBiZSBjb250YWN0ZWQsIG9yIHRoZXJlIGlzbid0IGFuIGV4aXN0aW5nIHRydXN0LiIKICAgICAgICAgICAgJE51bGwKICAgICAgICB9CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBbU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeS5Eb21haW5dOjpHZXRDdXJyZW50RG9tYWluKCkKICAgIH0KfQ==
ZmlsdGVyIEdldC1OZXRGb3Jlc3QgewogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRm9yZXN0LAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCiAgICBpZigkQ3JlZGVudGlhbCkgewogICAgICAgIAogICAgICAgIFdyaXRlLVZlcmJvc2UgIlVzaW5nIGFsdGVybmF0ZSBjcmVkZW50aWFscyBmb3IgR2V0LU5ldEZvcmVzdCIKICAgICAgICBpZighJEZvcmVzdCkgewogICAgICAgICAgICAKICAgICAgICAgICAgJEZvcmVzdCA9ICRDcmVkZW50aWFsLkdldE5ldHdvcmtDcmVkZW50aWFsKCkuRG9tYWluCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkV4dHJhY3RlZCBkb21haW4gJyRGb3Jlc3QnIGZyb20gLUNyZWRlbnRpYWwiCiAgICAgICAgfQogICAKICAgICAgICAkRm9yZXN0Q29udGV4dCA9IE5ldy1PYmplY3QgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeS5EaXJlY3RvcnlDb250ZXh0KCdGb3Jlc3QnLCAkRm9yZXN0LCAkQ3JlZGVudGlhbC5Vc2VyTmFtZSwgJENyZWRlbnRpYWwuR2V0TmV0d29ya0NyZWRlbnRpYWwoKS5QYXNzd29yZCkKICAgICAgICAKICAgICAgICB0cnkgewogICAgICAgICAgICAkRm9yZXN0T2JqZWN0ID0gW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnkuRm9yZXN0XTo6R2V0Rm9yZXN0KCRGb3Jlc3RDb250ZXh0KQogICAgICAgIH0KICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlRoZSBzcGVjaWZpZWQgZm9yZXN0ICckRm9yZXN0JyBkb2VzIG5vdCBleGlzdCwgY291bGQgbm90IGJlIGNvbnRhY3RlZCwgdGhlcmUgaXNuJ3QgYW4gZXhpc3RpbmcgdHJ1c3QsIG9yIHRoZSBzcGVjaWZpZWQgY3JlZGVudGlhbHMgYXJlIGludmFsaWQuIgogICAgICAgICAgICAkTnVsbAogICAgICAgIH0KICAgIH0KICAgIGVsc2VpZigkRm9yZXN0KSB7CiAgICAgICAgJEZvcmVzdENvbnRleHQgPSBOZXctT2JqZWN0IFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnkuRGlyZWN0b3J5Q29udGV4dCgnRm9yZXN0JywgJEZvcmVzdCkKICAgICAgICB0cnkgewogICAgICAgICAgICAkRm9yZXN0T2JqZWN0ID0gW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnkuRm9yZXN0XTo6R2V0Rm9yZXN0KCRGb3Jlc3RDb250ZXh0KQogICAgICAgIH0KICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlRoZSBzcGVjaWZpZWQgZm9yZXN0ICckRm9yZXN0JyBkb2VzIG5vdCBleGlzdCwgY291bGQgbm90IGJlIGNvbnRhY3RlZCwgb3IgdGhlcmUgaXNuJ3QgYW4gZXhpc3RpbmcgdHJ1c3QuIgogICAgICAgICAgICByZXR1cm4gJE51bGwKICAgICAgICB9CiAgICB9CiAgICBlbHNlIHsKICAgICAgICAKICAgICAgICAkRm9yZXN0T2JqZWN0ID0gW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnkuRm9yZXN0XTo6R2V0Q3VycmVudEZvcmVzdCgpCiAgICB9CiAgICBpZigkRm9yZXN0T2JqZWN0KSB7CiAgICAgICAgCiAgICAgICAgJEZvcmVzdFNpZCA9IChOZXctT2JqZWN0IFN5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuTlRBY2NvdW50KCRGb3Jlc3RPYmplY3QuUm9vdERvbWFpbiwia3JidGd0IikpLlRyYW5zbGF0ZShbU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5TZWN1cml0eUlkZW50aWZpZXJdKS5WYWx1ZQogICAgICAgICRQYXJ0cyA9ICRGb3Jlc3RTaWQgLVNwbGl0ICItIgogICAgICAgICRGb3Jlc3RTaWQgPSAkUGFydHNbMC4uJCgkUGFydHMubGVuZ3RoLTIpXSAtam9pbiAiLSIKICAgICAgICAkRm9yZXN0T2JqZWN0IHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgJ1Jvb3REb21haW5TaWQnICRGb3Jlc3RTaWQKICAgICAgICAkRm9yZXN0T2JqZWN0CiAgICB9Cn0=
ZmlsdGVyIEdldC1OZXRGb3Jlc3REb21haW4gewogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRm9yZXN0LAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCiAgICAkRm9yZXN0T2JqZWN0ID0gR2V0LU5ldEZvcmVzdCAtRm9yZXN0ICRGb3Jlc3QgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgIGlmKCRGb3Jlc3RPYmplY3QpIHsKICAgICAgICAkRm9yZXN0T2JqZWN0LkRvbWFpbnMKICAgIH0KfQ==
ZmlsdGVyIEdldC1OZXRGb3Jlc3RDYXRhbG9nIHsKICAgIAogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRm9yZXN0LAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCiAgICAkRm9yZXN0T2JqZWN0ID0gR2V0LU5ldEZvcmVzdCAtRm9yZXN0ICRGb3Jlc3QgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgIGlmKCRGb3Jlc3RPYmplY3QpIHsKICAgICAgICAkRm9yZXN0T2JqZWN0LkZpbmRBbGxHbG9iYWxDYXRhbG9ncygpCiAgICB9Cn0=
ZmlsdGVyIEdldC1OZXREb21haW5Db250cm9sbGVyIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKICAgICAgICBbU3dpdGNoXQogICAgICAgICRMREFQLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCiAgICBpZigkTERBUCAtb3IgJERvbWFpbkNvbnRyb2xsZXIpIHsKICAgICAgICAKICAgICAgICBHZXQtTmV0Q29tcHV0ZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1GdWxsRGF0YSAtRmlsdGVyICcodXNlckFjY291bnRDb250cm9sOjEuMi44NDAuMTEzNTU2LjEuNC44MDM6PTgxOTIpJwogICAgfQogICAgZWxzZSB7CiAgICAgICAgJEZvdW5kRG9tYWluID0gR2V0LU5ldERvbWFpbiAtRG9tYWluICREb21haW4gLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgICAgICBpZigkRm91bmREb21haW4pIHsKICAgICAgICAgICAgJEZvdW5kZG9tYWluLkRvbWFpbkNvbnRyb2xsZXJzCiAgICAgICAgfQogICAgfQp9
ZnVuY3Rpb24gR2V0LU5ldFVzZXIgewogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbj0wLCBWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkVXNlck5hbWUsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQURTcGF0aCwKICAgICAgICBbU3RyaW5nXQogICAgICAgICRGaWx0ZXIsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkU1BOLAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEFkbWluQ291bnQsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVW5jb25zdHJhaW5lZCwKICAgICAgICBbU3dpdGNoXQogICAgICAgICRBbGxvd0RlbGVnYXRpb24sCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCiAgICBiZWdpbiB7CiAgICAgICAgCiAgICAgICAgJFVzZXJTZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciAtRG9tYWluICREb21haW4gLUFEU3BhdGggJEFEU3BhdGggLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLVBhZ2VTaXplICRQYWdlU2l6ZSAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbAogICAgfQogICAgcHJvY2VzcyB7CiAgICAgICAgaWYoJFVzZXJTZWFyY2hlcikgewogICAgICAgICAgICAKICAgICAgICAgICAgaWYoJFVuY29uc3RyYWluZWQpIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkNoZWNraW5nIGZvciB1bmNvbnN0cmFpbmVkIGRlbGVnYXRpb24iCiAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICIodXNlckFjY291bnRDb250cm9sOjEuMi44NDAuMTEzNTU2LjEuNC44MDM6PTUyNDI4OCkiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoJEFsbG93RGVsZWdhdGlvbikgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiQ2hlY2tpbmcgZm9yIHVzZXJzIHdobyBjYW4gYmUgZGVsZWdhdGVkIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICIoISh1c2VyQWNjb3VudENvbnRyb2w6MS4yLjg0MC4xMTM1NTYuMS40LjgwMzo9MTA0ODU3NCkpIgogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKCRBZG1pbkNvdW50KSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJDaGVja2luZyBmb3IgYWRtaW5Db3VudD0xIgogICAgICAgICAgICAgICAgJEZpbHRlciArPSAiKGFkbWluY291bnQ9MSkiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIGlmKCRVc2VyTmFtZSkgewogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkVXNlclNlYXJjaGVyLmZpbHRlcj0iKCYoc2FtQWNjb3VudFR5cGU9ODA1MzA2MzY4KShzYW1BY2NvdW50TmFtZT0kVXNlck5hbWUpJEZpbHRlcikiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZWlmKCRTUE4pIHsKICAgICAgICAgICAgICAgICRVc2VyU2VhcmNoZXIuZmlsdGVyPSIoJihzYW1BY2NvdW50VHlwZT04MDUzMDYzNjgpKHNlcnZpY2VQcmluY2lwYWxOYW1lPSopJEZpbHRlcikiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICRVc2VyU2VhcmNoZXIuZmlsdGVyPSIoJihzYW1BY2NvdW50VHlwZT04MDUzMDYzNjgpJEZpbHRlcikiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgJFJlc3VsdHMgPSAkVXNlclNlYXJjaGVyLkZpbmRBbGwoKQogICAgICAgICAgICAkUmVzdWx0cyB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkVXNlciA9IENvbnZlcnQtTERBUFByb3BlcnR5IC1Qcm9wZXJ0aWVzICRfLlByb3BlcnRpZXMKICAgICAgICAgICAgICAgICRVc2VyLlBTT2JqZWN0LlR5cGVOYW1lcy5BZGQoJ1Bvd2VyVmlldy5Vc2VyJykKICAgICAgICAgICAgICAgICRVc2VyCiAgICAgICAgICAgIH0KICAgICAgICAgICAgJFJlc3VsdHMuZGlzcG9zZSgpCiAgICAgICAgICAgICRVc2VyU2VhcmNoZXIuZGlzcG9zZSgpCiAgICAgICAgfQogICAgfQp9
ZnVuY3Rpb24gQWRkLU5ldFVzZXIgewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFVzZXJOYW1lID0gJ2JhY2tkb29yJywKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFBhc3N3b3JkID0gJ1Bhc3N3b3JkMTIzIScsCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRHcm91cE5hbWUsCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJ2xvY2FsaG9zdCcsCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4KICAgICkKICAgIGlmICgkRG9tYWluKSB7CiAgICAgICAgJERvbWFpbk9iamVjdCA9IEdldC1OZXREb21haW4gLURvbWFpbiAkRG9tYWluCiAgICAgICAgaWYoLW5vdCAkRG9tYWluT2JqZWN0KSB7CiAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIkVycm9yIGluIGdyYWJiaW5nICREb21haW4gb2JqZWN0IgogICAgICAgICAgICByZXR1cm4gJE51bGwKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgQWRkLVR5cGUgLUFzc2VtYmx5TmFtZSBTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWNjb3VudE1hbmFnZW1lbnQKICAgICAgICAKICAgICAgICAKICAgICAgICAkQ29udGV4dCA9IE5ldy1PYmplY3QgLVR5cGVOYW1lIFN5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudC5QcmluY2lwYWxDb250ZXh0IC1Bcmd1bWVudExpc3QgKFtTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWNjb3VudE1hbmFnZW1lbnQuQ29udGV4dFR5cGVdOjpEb21haW4pLCAkRG9tYWluT2JqZWN0CiAgICAgICAgCiAgICAgICAgJFVzZXIgPSBOZXctT2JqZWN0IC1UeXBlTmFtZSBTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWNjb3VudE1hbmFnZW1lbnQuVXNlclByaW5jaXBhbCAtQXJndW1lbnRMaXN0ICRDb250ZXh0CiAgICAgICAgCiAgICAgICAgJFVzZXIuTmFtZSA9ICRVc2VyTmFtZQogICAgICAgICRVc2VyLlNhbUFjY291bnROYW1lID0gJFVzZXJOYW1lCiAgICAgICAgJFVzZXIuUGFzc3dvcmROb3RSZXF1aXJlZCA9ICRGYWxzZQogICAgICAgICRVc2VyLlNldFBhc3N3b3JkKCRQYXNzd29yZCkKICAgICAgICAkVXNlci5FbmFibGVkID0gJFRydWUKICAgICAgICBXcml0ZS1WZXJib3NlICJDcmVhdGluZyB1c2VyICRVc2VyTmFtZSB0byB3aXRoIHBhc3N3b3JkICckUGFzc3dvcmQnIGluIGRvbWFpbiAkRG9tYWluIgogICAgICAgIHRyeSB7CiAgICAgICAgICAgIAogICAgICAgICAgICAkVXNlci5TYXZlKCkKICAgICAgICAgICAgIlsqXSBVc2VyICRVc2VyTmFtZSBzdWNjZXNzZnVsbHkgY3JlYXRlZCBpbiBkb21haW4gJERvbWFpbiIKICAgICAgICB9CiAgICAgICAgY2F0Y2ggewogICAgICAgICAgICBXcml0ZS1XYXJuaW5nICdbIV0gVXNlciBhbHJlYWR5IGV4aXN0cyEnCiAgICAgICAgICAgIHJldHVybgogICAgICAgIH0KICAgIH0KICAgIGVsc2UgewogICAgICAgIAogICAgICAgIFdyaXRlLVZlcmJvc2UgIkNyZWF0aW5nIHVzZXIgJFVzZXJOYW1lIHRvIHdpdGggcGFzc3dvcmQgJyRQYXNzd29yZCcgb24gJENvbXB1dGVyTmFtZSIKICAgICAgICAKICAgICAgICAkT2JqT3UgPSBbQURTSV0iV2luTlQ6Ly8kQ29tcHV0ZXJOYW1lIgogICAgICAgICRPYmpVc2VyID0gJE9iak91LkNyZWF0ZSgnVXNlcicsICRVc2VyTmFtZSkKICAgICAgICAkT2JqVXNlci5TZXRQYXNzd29yZCgkUGFzc3dvcmQpCiAgICAgICAgCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJE51bGwgPSAkT2JqVXNlci5TZXRJbmZvKCkKICAgICAgICAgICAgIlsqXSBVc2VyICRVc2VyTmFtZSBzdWNjZXNzZnVsbHkgY3JlYXRlZCBvbiBob3N0ICRDb21wdXRlck5hbWUiCiAgICAgICAgfQogICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgV3JpdGUtV2FybmluZyAnWyFdIEFjY291bnQgYWxyZWFkeSBleGlzdHMhJwogICAgICAgICAgICByZXR1cm4KICAgICAgICB9CiAgICB9CiAgICAKICAgIGlmICgkR3JvdXBOYW1lKSB7CiAgICAgICAgCiAgICAgICAgaWYgKCREb21haW4pIHsKICAgICAgICAgICAgQWRkLU5ldEdyb3VwVXNlciAtVXNlck5hbWUgJFVzZXJOYW1lIC1Hcm91cE5hbWUgJEdyb3VwTmFtZSAtRG9tYWluICREb21haW4KICAgICAgICAgICAgIlsqXSBVc2VyICRVc2VyTmFtZSBzdWNjZXNzZnVsbHkgYWRkZWQgdG8gZ3JvdXAgJEdyb3VwTmFtZSBpbiBkb21haW4gJERvbWFpbiIKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIEFkZC1OZXRHcm91cFVzZXIgLVVzZXJOYW1lICRVc2VyTmFtZSAtR3JvdXBOYW1lICRHcm91cE5hbWUgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lCiAgICAgICAgICAgICJbKl0gVXNlciAkVXNlck5hbWUgc3VjY2Vzc2Z1bGx5IGFkZGVkIHRvIGdyb3VwICRHcm91cE5hbWUgb24gaG9zdCAkQ29tcHV0ZXJOYW1lIgogICAgICAgIH0KICAgIH0KfQ==
ZnVuY3Rpb24gQWRkLU5ldEdyb3VwVXNlciB7CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnkgPSAkVHJ1ZSldCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRVc2VyTmFtZSwKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICRUcnVlKV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEdyb3VwTmFtZSwKICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRDb21wdXRlck5hbWUsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluCiAgICApCiAgICAKICAgIEFkZC1UeXBlIC1Bc3NlbWJseU5hbWUgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50CiAgICAKICAgIGlmKCRDb21wdXRlck5hbWUgLWFuZCAoJENvbXB1dGVyTmFtZSAtbmUgImxvY2FsaG9zdCIpKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiQWRkaW5nIHVzZXIgJFVzZXJOYW1lIHRvICRHcm91cE5hbWUgb24gaG9zdCAkQ29tcHV0ZXJOYW1lIgogICAgICAgICAgICAoW0FEU0ldIldpbk5UOi8vJENvbXB1dGVyTmFtZS8kR3JvdXBOYW1lLGdyb3VwIikuYWRkKCJXaW5OVDovLyRDb21wdXRlck5hbWUvJFVzZXJOYW1lLHVzZXIiKQogICAgICAgICAgICAiWypdIFVzZXIgJFVzZXJOYW1lIHN1Y2Nlc3NmdWxseSBhZGRlZCB0byBncm91cCAkR3JvdXBOYW1lIG9uICRDb21wdXRlck5hbWUiCiAgICAgICAgfQogICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiWyFdIEVycm9yIGFkZGluZyB1c2VyICRVc2VyTmFtZSB0byBncm91cCAkR3JvdXBOYW1lIG9uICRDb21wdXRlck5hbWUiCiAgICAgICAgICAgIHJldHVybgogICAgICAgIH0KICAgIH0KICAgIAogICAgZWxzZSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgaWYgKCREb21haW4pIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkFkZGluZyB1c2VyICRVc2VyTmFtZSB0byAkR3JvdXBOYW1lIG9uIGRvbWFpbiAkRG9tYWluIgogICAgICAgICAgICAgICAgJENUID0gW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudC5Db250ZXh0VHlwZV06OkRvbWFpbgogICAgICAgICAgICAgICAgJERvbWFpbk9iamVjdCA9IEdldC1OZXREb21haW4gLURvbWFpbiAkRG9tYWluCiAgICAgICAgICAgICAgICBpZigtbm90ICREb21haW5PYmplY3QpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJE51bGwKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJENvbnRleHQgPSBOZXctT2JqZWN0IC1UeXBlTmFtZSBTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWNjb3VudE1hbmFnZW1lbnQuUHJpbmNpcGFsQ29udGV4dCAtQXJndW1lbnRMaXN0ICRDVCwgJERvbWFpbk9iamVjdCAgICAgICAgICAgIAogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJBZGRpbmcgdXNlciAkVXNlck5hbWUgdG8gJEdyb3VwTmFtZSBvbiBsb2NhbGhvc3QiCiAgICAgICAgICAgICAgICAkQ29udGV4dCA9IE5ldy1PYmplY3QgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50LlByaW5jaXBhbENvbnRleHQoW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudC5Db250ZXh0VHlwZV06Ok1hY2hpbmUsICRFbnY6Q29tcHV0ZXJOYW1lKQogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAkR3JvdXAgPSBbU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjY291bnRNYW5hZ2VtZW50Lkdyb3VwUHJpbmNpcGFsXTo6RmluZEJ5SWRlbnRpdHkoJENvbnRleHQsJEdyb3VwTmFtZSkKICAgICAgICAgICAgCiAgICAgICAgICAgICRHcm91cC5NZW1iZXJzLmFkZCgkQ29udGV4dCwgW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY2NvdW50TWFuYWdlbWVudC5JZGVudGl0eVR5cGVdOjpTYW1BY2NvdW50TmFtZSwgJFVzZXJOYW1lKQogICAgICAgICAgICAKICAgICAgICAgICAgJEdyb3VwLlNhdmUoKQogICAgICAgIH0KICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIkVycm9yIGFkZGluZyAkVXNlck5hbWUgdG8gJEdyb3VwTmFtZSA6ICRfIgogICAgICAgIH0KICAgIH0KfQ==
ZnVuY3Rpb24gR2V0LVVzZXJQcm9wZXJ0eSB7CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRQcm9wZXJ0aWVzLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKICAgICAgICAKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQogICAgaWYoJFByb3BlcnRpZXMpIHsKICAgICAgICAKICAgICAgICAkUHJvcGVydGllcyA9ICwibmFtZSIgKyAkUHJvcGVydGllcwogICAgICAgIEdldC1OZXRVc2VyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtUGFnZVNpemUgJFBhZ2VTaXplIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIHwgU2VsZWN0LU9iamVjdCAtUHJvcGVydHkgJFByb3BlcnRpZXMKICAgIH0KICAgIGVsc2UgewogICAgICAgIAogICAgICAgIEdldC1OZXRVc2VyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtUGFnZVNpemUgJFBhZ2VTaXplIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIHwgU2VsZWN0LU9iamVjdCAtRmlyc3QgMSB8IEdldC1NZW1iZXIgLU1lbWJlclR5cGUgKlByb3BlcnR5IHwgU2VsZWN0LU9iamVjdCAtUHJvcGVydHkgJ05hbWUnCiAgICB9Cn0=
ZmlsdGVyIEZpbmQtVXNlckZpZWxkIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uPTAsVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaFRlcm0gPSAncGFzcycsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2VhcmNoRmllbGQgPSAnZGVzY3JpcHRpb24nLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEFEU3BhdGgsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCiAKICAgIEdldC1OZXRVc2VyIC1BRFNwYXRoICRBRFNwYXRoIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtRmlsdGVyICIoJFNlYXJjaEZpZWxkPSokU2VhcmNoVGVybSopIiAtUGFnZVNpemUgJFBhZ2VTaXplIHwgU2VsZWN0LU9iamVjdCBzYW1hY2NvdW50bmFtZSwkU2VhcmNoRmllbGQKfQ==
ZmlsdGVyIEdldC1Vc2VyRXZlbnQgewogICAgUGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJEVudjpDb21wdXRlck5hbWUsCiAgICAgICAgW1N0cmluZ10KICAgICAgICBbVmFsaWRhdGVTZXQoImxvZ29uIiwidGd0IiwiYWxsIildCiAgICAgICAgJEV2ZW50VHlwZSA9ICJsb2dvbiIsCiAgICAgICAgW0RhdGVUaW1lXQogICAgICAgICREYXRlU3RhcnQgPSBbRGF0ZVRpbWVdOjpUb2RheS5BZGREYXlzKC01KSwKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQogICAgaWYoJEV2ZW50VHlwZS5Ub0xvd2VyKCkgLWxpa2UgImxvZ29uIikgewogICAgICAgIFtJbnQzMltdXSRJRCA9IEAoNDYyNCkKICAgIH0KICAgIGVsc2VpZigkRXZlbnRUeXBlLlRvTG93ZXIoKSAtbGlrZSAidGd0IikgewogICAgICAgIFtJbnQzMltdXSRJRCA9IEAoNDc2OCkKICAgIH0KICAgIGVsc2UgewogICAgICAgIFtJbnQzMltdXSRJRCA9IEAoNDYyNCwgNDc2OCkKICAgIH0KICAgIGlmKCRDcmVkZW50aWFsKSB7CiAgICAgICAgV3JpdGUtVmVyYm9zZSAiVXNpbmcgYWx0ZXJuYXRpdmUgY3JlZGVudGlhbHMiCiAgICAgICAgJEFyZ3VtZW50cyA9IEB7CiAgICAgICAgICAgICdDb21wdXRlck5hbWUnID0gJENvbXB1dGVyTmFtZTsKICAgICAgICAgICAgJ0NyZWRlbnRpYWwnID0gJENyZWRlbnRpYWw7CiAgICAgICAgICAgICdGaWx0ZXJIYXNoVGFibGUnID0gQHsgTG9nTmFtZSA9ICdTZWN1cml0eSc7IElEPSRJRDsgU3RhcnRUaW1lPSREYXRlU3RhcnR9OwogICAgICAgICAgICAnRXJyb3JBY3Rpb24nID0gJ1NpbGVudGx5Q29udGludWUnOwogICAgICAgIH0KICAgIH0KICAgIGVsc2UgewogICAgICAgICRBcmd1bWVudHMgPSBAewogICAgICAgICAgICAnQ29tcHV0ZXJOYW1lJyA9ICRDb21wdXRlck5hbWU7CiAgICAgICAgICAgICdGaWx0ZXJIYXNoVGFibGUnID0gQHsgTG9nTmFtZSA9ICdTZWN1cml0eSc7IElEPSRJRDsgU3RhcnRUaW1lPSREYXRlU3RhcnR9OwogICAgICAgICAgICAnRXJyb3JBY3Rpb24nID0gJ1NpbGVudGx5Q29udGludWUnOyAgICAgICAgICAgIAogICAgICAgIH0KICAgIH0KICAgIAogICAgR2V0LVdpbkV2ZW50IEBBcmd1bWVudHMgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgaWYoJElEIC1jb250YWlucyA0NjI0KSB7ICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgaWYoJF8ubWVzc2FnZSAtbWF0Y2ggJyg/cykoPzw9TG9nb24gVHlwZTopLio/KD89KEltcGVyc29uYXRpb24gTGV2ZWw6fE5ldyBMb2dvbjopKScpIHsKICAgICAgICAgICAgICAgIGlmKCRNYXRjaGVzKSB7CiAgICAgICAgICAgICAgICAgICAgJExvZ29uVHlwZSA9ICRNYXRjaGVzWzBdLnRyaW0oKQogICAgICAgICAgICAgICAgICAgICRNYXRjaGVzID0gJE51bGwKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRMb2dvblR5cGUgPSAiIgogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICBpZiAoKCRMb2dvblR5cGUgLWVxIDIpIC1vciAoJExvZ29uVHlwZSAtZXEgMykpIHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgaWYoJF8ubWVzc2FnZSAtbWF0Y2ggJyg/cykoPzw9TmV3IExvZ29uOikuKj8oPz1Qcm9jZXNzIEluZm9ybWF0aW9uOiknKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRNYXRjaGVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVXNlck5hbWUgPSAkTWF0Y2hlc1swXS5zcGxpdCgiYG4iKVsyXS5zcGxpdCgiOiIpWzFdLnRyaW0oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJERvbWFpbiA9ICRNYXRjaGVzWzBdLnNwbGl0KCJgbiIpWzNdLnNwbGl0KCI6IilbMV0udHJpbSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWF0Y2hlcyA9ICROdWxsCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYoJF8ubWVzc2FnZSAtbWF0Y2ggJyg/cykoPzw9TmV0d29yayBJbmZvcm1hdGlvbjopLio/KD89U291cmNlIFBvcnQ6KScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoJE1hdGNoZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRBZGRyZXNzID0gJE1hdGNoZXNbMF0uc3BsaXQoImBuIilbMl0uc3BsaXQoIjoiKVsxXS50cmltKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNYXRjaGVzID0gJE51bGwKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBpZiAoJFVzZXJOYW1lIC1hbmQgKC1ub3QgJFVzZXJOYW1lLmVuZHNXaXRoKCckJykpIC1hbmQgKCRVc2VyTmFtZSAtbmUgJ0FOT05ZTU9VUyBMT0dPTicpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRMb2dvbkV2ZW50UHJvcGVydGllcyA9IEB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRG9tYWluJyA9ICREb21haW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDb21wdXRlck5hbWUnID0gJENvbXB1dGVyTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZXJuYW1lJyA9ICRVc2VyTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FkZHJlc3MnID0gJEFkZHJlc3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdJRCcgPSAnNDYyNCcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdMb2dvblR5cGUnID0gJExvZ29uVHlwZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1RpbWUnID0gJF8uVGltZUNyZWF0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBOZXctT2JqZWN0IC1UeXBlTmFtZSBQU09iamVjdCAtUHJvcGVydHkgJExvZ29uRXZlbnRQcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkVycm9yIHBhcnNpbmcgZXZlbnQgbG9nczogJF8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYoJElEIC1jb250YWlucyA0NzY4KSB7CiAgICAgICAgICAgIAogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgaWYoJF8ubWVzc2FnZSAtbWF0Y2ggJyg/cykoPzw9QWNjb3VudCBJbmZvcm1hdGlvbjopLio/KD89U2VydmljZSBJbmZvcm1hdGlvbjopJykgewogICAgICAgICAgICAgICAgICAgIGlmKCRNYXRjaGVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRVc2VybmFtZSA9ICRNYXRjaGVzWzBdLnNwbGl0KCJgbiIpWzFdLnNwbGl0KCI6IilbMV0udHJpbSgpCiAgICAgICAgICAgICAgICAgICAgICAgICREb21haW4gPSAkTWF0Y2hlc1swXS5zcGxpdCgiYG4iKVsyXS5zcGxpdCgiOiIpWzFdLnRyaW0oKQogICAgICAgICAgICAgICAgICAgICAgICAkTWF0Y2hlcyA9ICROdWxsCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYoJF8ubWVzc2FnZSAtbWF0Y2ggJyg/cykoPzw9TmV0d29yayBJbmZvcm1hdGlvbjopLio/KD89QWRkaXRpb25hbCBJbmZvcm1hdGlvbjopJykgewogICAgICAgICAgICAgICAgICAgIGlmKCRNYXRjaGVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRBZGRyZXNzID0gJE1hdGNoZXNbMF0uc3BsaXQoImBuIilbMV0uc3BsaXQoIjoiKVstMV0udHJpbSgpCiAgICAgICAgICAgICAgICAgICAgICAgICRNYXRjaGVzID0gJE51bGwKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkTG9nb25FdmVudFByb3BlcnRpZXMgPSBAewogICAgICAgICAgICAgICAgICAgICdEb21haW4nID0gJERvbWFpbgogICAgICAgICAgICAgICAgICAgICdDb21wdXRlck5hbWUnID0gJENvbXB1dGVyTmFtZQogICAgICAgICAgICAgICAgICAgICdVc2VybmFtZScgPSAkVXNlck5hbWUKICAgICAgICAgICAgICAgICAgICAnQWRkcmVzcycgPSAkQWRkcmVzcwogICAgICAgICAgICAgICAgICAgICdJRCcgPSAnNDc2OCcKICAgICAgICAgICAgICAgICAgICAnTG9nb25UeXBlJyA9ICcnCiAgICAgICAgICAgICAgICAgICAgJ1RpbWUnID0gJF8uVGltZUNyZWF0ZWQKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIE5ldy1PYmplY3QgLVR5cGVOYW1lIFBTT2JqZWN0IC1Qcm9wZXJ0eSAkTG9nb25FdmVudFByb3BlcnRpZXMKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJFcnJvciBwYXJzaW5nIGV2ZW50IGxvZ3M6ICRfIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9
ZnVuY3Rpb24gR2V0LU9iamVjdEFjbCB7CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0gKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2FtQWNjb3VudE5hbWUsCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZUJ5UHJvcGVydHlOYW1lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICROYW1lID0gIioiLAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmVCeVByb3BlcnR5TmFtZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRGlzdGluZ3Vpc2hlZE5hbWUgPSAiKiIsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkUmVzb2x2ZUdVSURzLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEZpbHRlciwKICAgICAgICBbU3RyaW5nXQogICAgICAgICRBRFNwYXRoLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEFEU3ByZWZpeCwKICAgICAgICBbU3RyaW5nXQogICAgICAgIFtWYWxpZGF0ZVNldCgiQWxsIiwiUmVzZXRQYXNzd29yZCIsIldyaXRlTWVtYmVycyIpXQogICAgICAgICRSaWdodHNGaWx0ZXIsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwCiAgICApCiAgICBiZWdpbiB7CiAgICAgICAgJFNlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQURTcGF0aCAkQURTcGF0aCAtQURTcHJlZml4ICRBRFNwcmVmaXggLVBhZ2VTaXplICRQYWdlU2l6ZSAKICAgICAgICAKICAgICAgICBpZigkUmVzb2x2ZUdVSURzKSB7CiAgICAgICAgICAgICRHVUlEcyA9IEdldC1HVUlETWFwIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtUGFnZVNpemUgJFBhZ2VTaXplCiAgICAgICAgfQogICAgfQogICAgcHJvY2VzcyB7CiAgICAgICAgaWYgKCRTZWFyY2hlcikgewogICAgICAgICAgICBpZigkU2FtQWNjb3VudE5hbWUpIHsKICAgICAgICAgICAgICAgICRTZWFyY2hlci5maWx0ZXI9IigmKHNhbWFjY291bnRuYW1lPSRTYW1BY2NvdW50TmFtZSkobmFtZT0kTmFtZSkoZGlzdGluZ3Vpc2hlZG5hbWU9JERpc3Rpbmd1aXNoZWROYW1lKSRGaWx0ZXIpIiAgCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkU2VhcmNoZXIuZmlsdGVyPSIoJihuYW1lPSROYW1lKShkaXN0aW5ndWlzaGVkbmFtZT0kRGlzdGluZ3Vpc2hlZE5hbWUpJEZpbHRlcikiICAKICAgICAgICAgICAgfQogIAogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgJFJlc3VsdHMgPSAkU2VhcmNoZXIuRmluZEFsbCgpCiAgICAgICAgICAgICAgICAkUmVzdWx0cyB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICRPYmplY3QgPSBbYWRzaV0oJF8ucGF0aCkKICAgICAgICAgICAgICAgICAgICBpZigkT2JqZWN0LmRpc3Rpbmd1aXNoZWRuYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRBY2Nlc3MgPSAkT2JqZWN0LlBzQmFzZS5PYmplY3RTZWN1cml0eS5hY2Nlc3MKICAgICAgICAgICAgICAgICAgICAgICAgJEFjY2VzcyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfIHwgQWRkLU1lbWJlciBOb3RlUHJvcGVydHkgJ09iamVjdEROJyAkT2JqZWN0LmRpc3Rpbmd1aXNoZWRuYW1lWzBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkT2JqZWN0Lm9iamVjdHNpZFswXSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFMgPSAoTmV3LU9iamVjdCBTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLlNlY3VyaXR5SWRlbnRpZmllcigkT2JqZWN0Lm9iamVjdHNpZFswXSwwKSkuVmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRTID0gJE51bGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJF8gfCBBZGQtTWVtYmVyIE5vdGVQcm9wZXJ0eSAnT2JqZWN0U0lEJyAkUwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJF8KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgaWYoJFJpZ2h0c0ZpbHRlcikgewogICAgICAgICAgICAgICAgICAgICAgICAkR3VpZEZpbHRlciA9IFN3aXRjaCAoJFJpZ2h0c0ZpbHRlcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlJlc2V0UGFzc3dvcmQiIHsgIjAwMjk5NTcwLTI0NmQtMTFkMC1hNzY4LTAwYWEwMDZlMDUyOSIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIldyaXRlTWVtYmVycyIgeyAiYmY5Njc5YzAtMGRlNi0xMWQwLWEyODUtMDBhYTAwMzA0OWUyIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0IHsgIjAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCJ9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoJF8uT2JqZWN0VHlwZSAtZXEgJEd1aWRGaWx0ZXIpIHsgJF8gfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgJF8KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgIGlmKCRHVUlEcykgewogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgJEFjbFByb3BlcnRpZXMgPSBAe30KICAgICAgICAgICAgICAgICAgICAgICAgJF8ucHNvYmplY3QucHJvcGVydGllcyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAoJF8uTmFtZSAtZXEgJ09iamVjdFR5cGUnKSAtb3IgKCRfLk5hbWUgLWVxICdJbmhlcml0ZWRPYmplY3RUeXBlJykgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEFjbFByb3BlcnRpZXNbJF8uTmFtZV0gPSAkR1VJRFNbJF8uVmFsdWUudG9TdHJpbmcoKV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQWNsUHJvcGVydGllc1skXy5OYW1lXSA9ICRfLlZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEFjbFByb3BlcnRpZXNbJF8uTmFtZV0gPSAkXy5WYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIE5ldy1PYmplY3QgLVR5cGVOYW1lIFBTT2JqZWN0IC1Qcm9wZXJ0eSAkQWNsUHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsgJF8gfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJFJlc3VsdHMuZGlzcG9zZSgpCiAgICAgICAgICAgICAgICAkU2VhcmNoZXIuZGlzcG9zZSgpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAkXwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9
ZnVuY3Rpb24gQWRkLU9iamVjdEFjbCB7CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0gKAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFRhcmdldFNhbUFjY291bnROYW1lLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFRhcmdldE5hbWUgPSAiKiIsCiAgICAgICAgW0FsaWFzKCdETicpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFRhcmdldERpc3Rpbmd1aXNoZWROYW1lID0gIioiLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFRhcmdldEZpbHRlciwKICAgICAgICBbU3RyaW5nXQogICAgICAgICRUYXJnZXRBRFNwYXRoLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFRhcmdldEFEU3ByZWZpeCwKICAgICAgICBbU3RyaW5nXQogICAgICAgIFtWYWxpZGF0ZVBhdHRlcm4oJ15TLTEtNS0yMS1bMC05XSstWzAtOV0rLVswLTldKy1bMC05XSsnKV0KICAgICAgICAkUHJpbmNpcGFsU0lELAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFByaW5jaXBhbE5hbWUsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkUHJpbmNpcGFsU2FtQWNjb3VudE5hbWUsCiAgICAgICAgW1N0cmluZ10KICAgICAgICBbVmFsaWRhdGVTZXQoIkFsbCIsIlJlc2V0UGFzc3dvcmQiLCJXcml0ZU1lbWJlcnMiLCJEQ1N5bmMiKV0KICAgICAgICAkUmlnaHRzID0gIkFsbCIsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkUmlnaHRzR1VJRCwKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMDAwKV0gCiAgICAgICAgW0ludF0KICAgICAgICAkUGFnZVNpemUgPSAyMDAKICAgICkKICAgIGJlZ2luIHsKICAgICAgICAkU2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1BRFNwYXRoICRUYXJnZXRBRFNwYXRoIC1BRFNwcmVmaXggJFRhcmdldEFEU3ByZWZpeCAtUGFnZVNpemUgJFBhZ2VTaXplCiAgICAgICAgaWYoJFByaW5jaXBhbFNJRCkgewogICAgICAgICAgICAkUmVzb2x2ZWRQcmluY2lwYWxTSUQgPSAkUHJpbmNpcGFsU0lECiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkUHJpbmNpcGFsID0gR2V0LUFET2JqZWN0IC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtTmFtZSAkUHJpbmNpcGFsTmFtZSAtU2FtQWNjb3VudE5hbWUgJFByaW5jaXBhbFNhbUFjY291bnROYW1lIC1QYWdlU2l6ZSAkUGFnZVNpemUKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmKCEkUHJpbmNpcGFsKSB7CiAgICAgICAgICAgICAgICB0aHJvdyAiRXJyb3IgcmVzb2x2aW5nIHByaW5jaXBhbCIKICAgICAgICAgICAgfQogICAgICAgICAgICAkUmVzb2x2ZWRQcmluY2lwYWxTSUQgPSAkUHJpbmNpcGFsLm9iamVjdHNpZAogICAgICAgIH0KICAgICAgICBpZighJFJlc29sdmVkUHJpbmNpcGFsU0lEKSB7CiAgICAgICAgICAgIHRocm93ICJFcnJvciByZXNvbHZpbmcgcHJpbmNpcGFsIgogICAgICAgIH0KICAgIH0KICAgIHByb2Nlc3MgewogICAgICAgIGlmICgkU2VhcmNoZXIpIHsKICAgICAgICAgICAgaWYoJFRhcmdldFNhbUFjY291bnROYW1lKSB7CiAgICAgICAgICAgICAgICAkU2VhcmNoZXIuZmlsdGVyPSIoJihzYW1hY2NvdW50bmFtZT0kVGFyZ2V0U2FtQWNjb3VudE5hbWUpKG5hbWU9JFRhcmdldE5hbWUpKGRpc3Rpbmd1aXNoZWRuYW1lPSRUYXJnZXREaXN0aW5ndWlzaGVkTmFtZSkkVGFyZ2V0RmlsdGVyKSIgIAogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJFNlYXJjaGVyLmZpbHRlcj0iKCYobmFtZT0kVGFyZ2V0TmFtZSkoZGlzdGluZ3Vpc2hlZG5hbWU9JFRhcmdldERpc3Rpbmd1aXNoZWROYW1lKSRUYXJnZXRGaWx0ZXIpIiAgCiAgICAgICAgICAgIH0KICAKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICRSZXN1bHRzID0gJFNlYXJjaGVyLkZpbmRBbGwoKQogICAgICAgICAgICAgICAgJFJlc3VsdHMgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAkVGFyZ2V0RE4gPSAkXy5Qcm9wZXJ0aWVzLmRpc3Rpbmd1aXNoZWRuYW1lCiAgICAgICAgICAgICAgICAgICAgJElkZW50aXR5ID0gW1N5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuSWRlbnRpdHlSZWZlcmVuY2VdIChbU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5TZWN1cml0eUlkZW50aWZpZXJdJFJlc29sdmVkUHJpbmNpcGFsU0lEKQogICAgICAgICAgICAgICAgICAgICRJbmhlcml0YW5jZVR5cGUgPSBbU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeVNlY3VyaXR5SW5oZXJpdGFuY2VdICJOb25lIgogICAgICAgICAgICAgICAgICAgICRDb250cm9sVHlwZSA9IFtTeXN0ZW0uU2VjdXJpdHkuQWNjZXNzQ29udHJvbC5BY2Nlc3NDb250cm9sVHlwZV0gIkFsbG93IgogICAgICAgICAgICAgICAgICAgICRBQ0VzID0gQCgpCiAgICAgICAgICAgICAgICAgICAgaWYoJFJpZ2h0c0dVSUQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJEdVSURzID0gQCgkUmlnaHRzR1VJRCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRHVUlEcyA9IFN3aXRjaCAoJFJpZ2h0cykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiUmVzZXRQYXNzd29yZCIgeyAiMDAyOTk1NzAtMjQ2ZC0xMWQwLWE3NjgtMDBhYTAwNmUwNTI5IiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJXcml0ZU1lbWJlcnMiIHsgImJmOTY3OWMwLTBkZTYtMTFkMC1hMjg1LTAwYWEwMDMwNDllMiIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiRENTeW5jIiB7ICIxMTMxZjZhYS05YzA3LTExZDEtZjc5Zi0wMGMwNGZjMmRjZDIiLCAiMTEzMWY2YWQtOWMwNy0xMWQxLWY3OWYtMDBjMDRmYzJkY2QyIiwgIjg5ZTk1Yjc2LTQ0NGQtNGM2Mi05OTFhLTBmYWNiZWRhNjQwYyJ9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYoJEdVSURzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2goJEdVSUQgaW4gJEdVSURzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTmV3R1VJRCA9IE5ldy1PYmplY3QgR3VpZCAkR1VJRAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEFEUmlnaHRzID0gW1N5c3RlbS5EaXJlY3RvcnlTZXJ2aWNlcy5BY3RpdmVEaXJlY3RvcnlSaWdodHNdICJFeHRlbmRlZFJpZ2h0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEFDRXMgKz0gTmV3LU9iamVjdCBTeXN0ZW0uRGlyZWN0b3J5U2VydmljZXMuQWN0aXZlRGlyZWN0b3J5QWNjZXNzUnVsZSAkSWRlbnRpdHksJEFEUmlnaHRzLCRDb250cm9sVHlwZSwkTmV3R1VJRCwkSW5oZXJpdGFuY2VUeXBlCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAkQURSaWdodHMgPSBbU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeVJpZ2h0c10gIkdlbmVyaWNBbGwiCiAgICAgICAgICAgICAgICAgICAgICAgICRBQ0VzICs9IE5ldy1PYmplY3QgU3lzdGVtLkRpcmVjdG9yeVNlcnZpY2VzLkFjdGl2ZURpcmVjdG9yeUFjY2Vzc1J1bGUgJElkZW50aXR5LCRBRFJpZ2h0cywkQ29udHJvbFR5cGUsJEluaGVyaXRhbmNlVHlwZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJHcmFudGluZyBwcmluY2lwYWwgJFJlc29sdmVkUHJpbmNpcGFsU0lEICckUmlnaHRzJyBvbiAkKCRfLlByb3BlcnRpZXMuZGlzdGluZ3Vpc2hlZG5hbWUpIgogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBGb3JFYWNoICgkQUNFIGluICRBQ0VzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJHcmFudGluZyBwcmluY2lwYWwgJFJlc29sdmVkUHJpbmNpcGFsU0lEICckKCRBQ0UuT2JqZWN0VHlwZSknIHJpZ2h0cyBvbiAkKCRfLlByb3BlcnRpZXMuZGlzdGluZ3Vpc2hlZG5hbWUpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE9iamVjdCA9IFthZHNpXSgkXy5wYXRoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE9iamVjdC5Qc0Jhc2UuT2JqZWN0U2VjdXJpdHkuQWRkQWNjZXNzUnVsZSgkQUNFKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE9iamVjdC5Qc0Jhc2UuY29tbWl0Y2hhbmdlcygpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJFcnJvciBncmFudGluZyBwcmluY2lwYWwgJFJlc29sdmVkUHJpbmNpcGFsU0lEICckUmlnaHRzJyBvbiAkVGFyZ2V0RE4gOiAkXyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkUmVzdWx0cy5kaXNwb3NlKCkKICAgICAgICAgICAgICAgICRTZWFyY2hlci5kaXNwb3NlKCkKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJFcnJvcjogJF8iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0=
ZnVuY3Rpb24gSW52b2tlLUFDTFNjYW5uZXIgewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTYW1BY2NvdW50TmFtZSwKICAgICAgICBbU3RyaW5nXQogICAgICAgICROYW1lID0gIioiLAogICAgICAgIFtBbGlhcygnRE4nKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREaXN0aW5ndWlzaGVkTmFtZSA9ICIqIiwKICAgICAgICBbU3RyaW5nXQogICAgICAgICRGaWx0ZXIsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQURTcGF0aCwKICAgICAgICBbU3RyaW5nXQogICAgICAgICRBRFNwcmVmaXgsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkUmVzb2x2ZUdVSURzLAogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMAogICAgKQogICAgCiAgICBHZXQtT2JqZWN0QUNMIEBQU0JvdW5kUGFyYW1ldGVycyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAKICAgICAgICAkXyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJZGVudGl0eVNJRCcgKCRfLklkZW50aXR5UmVmZXJlbmNlLlRyYW5zbGF0ZShbU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5TZWN1cml0eUlkZW50aWZpZXJdKS5WYWx1ZSkKICAgICAgICAkXwogICAgfSB8IFdoZXJlLU9iamVjdCB7CiAgICAgICAgCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgCiAgICAgICAgICAgIFtpbnRdKCRfLklkZW50aXR5U2lkLnNwbGl0KCItIilbLTFdKSAtZ2UgMTAwMAogICAgICAgIH0KICAgICAgICBjYXRjaCB7fQogICAgfSB8IFdoZXJlLU9iamVjdCB7CiAgICAgICAgCiAgICAgICAgKCRfLkFjdGl2ZURpcmVjdG9yeVJpZ2h0cyAtZXEgIkdlbmVyaWNBbGwiKSAtb3IgKCRfLkFjdGl2ZURpcmVjdG9yeVJpZ2h0cyAtbWF0Y2ggIldyaXRlIikgLW9yICgkXy5BY3RpdmVEaXJlY3RvcnlSaWdodHMgLW1hdGNoICJDcmVhdGUiKSAtb3IgKCRfLkFjdGl2ZURpcmVjdG9yeVJpZ2h0cyAtbWF0Y2ggIkRlbGV0ZSIpIC1vciAoKCRfLkFjdGl2ZURpcmVjdG9yeVJpZ2h0cyAtbWF0Y2ggIkV4dGVuZGVkUmlnaHQiKSAtYW5kICgkXy5BY2Nlc3NDb250cm9sVHlwZSAtZXEgIkFsbG93IikpCiAgICB9Cn0=
ZmlsdGVyIEdldC1HVUlETWFwIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwCiAgICApCiAgICAkR1VJRHMgPSBAeycwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAnID0gJ0FsbCd9CiAgICAkU2NoZW1hUGF0aCA9IChHZXQtTmV0Rm9yZXN0KS5zY2hlbWEubmFtZQogICAgJFNjaGVtYVNlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIC1BRFNwYXRoICRTY2hlbWFQYXRoIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1QYWdlU2l6ZSAkUGFnZVNpemUKICAgIGlmKCRTY2hlbWFTZWFyY2hlcikgewogICAgICAgICRTY2hlbWFTZWFyY2hlci5maWx0ZXIgPSAiKHNjaGVtYUlER1VJRD0qKSIKICAgICAgICB0cnkgewogICAgICAgICAgICAkUmVzdWx0cyA9ICRTY2hlbWFTZWFyY2hlci5GaW5kQWxsKCkKICAgICAgICAgICAgJFJlc3VsdHMgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJEdVSURzWyhOZXctT2JqZWN0IEd1aWQgKCwkXy5wcm9wZXJ0aWVzLnNjaGVtYWlkZ3VpZFswXSkpLkd1aWRdID0gJF8ucHJvcGVydGllcy5uYW1lWzBdCiAgICAgICAgICAgIH0KICAgICAgICAgICAgJFJlc3VsdHMuZGlzcG9zZSgpCiAgICAgICAgICAgICRTY2hlbWFTZWFyY2hlci5kaXNwb3NlKCkKICAgICAgICB9CiAgICAgICAgY2F0Y2ggewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJFcnJvciBpbiBidWlsZGluZyBHVUlEIG1hcDogJF8iCiAgICAgICAgfQogICAgfQogICAgJFJpZ2h0c1NlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIC1BRFNwYXRoICRTY2hlbWFQYXRoLnJlcGxhY2UoIlNjaGVtYSIsIkV4dGVuZGVkLVJpZ2h0cyIpIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1QYWdlU2l6ZSAkUGFnZVNpemUgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgIGlmICgkUmlnaHRzU2VhcmNoZXIpIHsKICAgICAgICAkUmlnaHRzU2VhcmNoZXIuZmlsdGVyID0gIihvYmplY3RDbGFzcz1jb250cm9sQWNjZXNzUmlnaHQpIgogICAgICAgIHRyeSB7CiAgICAgICAgICAgICRSZXN1bHRzID0gJFJpZ2h0c1NlYXJjaGVyLkZpbmRBbGwoKQogICAgICAgICAgICAkUmVzdWx0cyB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkR1VJRHNbJF8ucHJvcGVydGllcy5yaWdodHNndWlkWzBdLnRvU3RyaW5nKCldID0gJF8ucHJvcGVydGllcy5uYW1lWzBdCiAgICAgICAgICAgIH0KICAgICAgICAgICAgJFJlc3VsdHMuZGlzcG9zZSgpCiAgICAgICAgICAgICRSaWdodHNTZWFyY2hlci5kaXNwb3NlKCkKICAgICAgICB9CiAgICAgICAgY2F0Y2ggewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJFcnJvciBpbiBidWlsZGluZyBHVUlEIG1hcDogJF8iCiAgICAgICAgfQogICAgfQogICAgJEdVSURzCn0=
ZnVuY3Rpb24gR2V0LU5ldENvbXB1dGVyIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdIb3N0TmFtZScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICcqJywKICAgICAgICBbU3RyaW5nXQogICAgICAgICRTUE4sCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkT3BlcmF0aW5nU3lzdGVtLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlcnZpY2VQYWNrLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEZpbHRlciwKICAgICAgICBbU3dpdGNoXQogICAgICAgICRQcmludGVycywKICAgICAgICBbU3dpdGNoXQogICAgICAgICRQaW5nLAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEZ1bGxEYXRhLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEFEU3BhdGgsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2l0ZU5hbWUsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVW5jb25zdHJhaW5lZCwKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMDAwKV0gCiAgICAgICAgW0ludF0KICAgICAgICAkUGFnZVNpemUgPSAyMDAsCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKICAgIGJlZ2luIHsKICAgICAgICAKICAgICAgICAkQ29tcFNlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQURTcGF0aCAkQURTcGF0aCAtUGFnZVNpemUgJFBhZ2VTaXplIC1DcmVkZW50aWFsICRDcmVkZW50aWFsCiAgICB9CiAgICBwcm9jZXNzIHsKICAgICAgICBpZiAoJENvbXBTZWFyY2hlcikgewogICAgICAgICAgICAKICAgICAgICAgICAgaWYoJFVuY29uc3RyYWluZWQpIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIlNlYXJjaGluZyBmb3IgY29tcHV0ZXJzIHdpdGggZm9yIHVuY29uc3RyYWluZWQgZGVsZWdhdGlvbiIKICAgICAgICAgICAgICAgICRGaWx0ZXIgKz0gIih1c2VyQWNjb3VudENvbnRyb2w6MS4yLjg0MC4xMTM1NTYuMS40LjgwMzo9NTI0Mjg4KSIKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgaWYoJFByaW50ZXJzKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJTZWFyY2hpbmcgZm9yIHByaW50ZXJzIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICIob2JqZWN0Q2F0ZWdvcnk9cHJpbnRRdWV1ZSkiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoJFNQTikgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiU2VhcmNoaW5nIGZvciBjb21wdXRlcnMgd2l0aCBTUE46ICRTUE4iCiAgICAgICAgICAgICAgICAkRmlsdGVyICs9ICIoc2VydmljZVByaW5jaXBhbE5hbWU9JFNQTikiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoJE9wZXJhdGluZ1N5c3RlbSkgewogICAgICAgICAgICAgICAgJEZpbHRlciArPSAiKG9wZXJhdGluZ3N5c3RlbT0kT3BlcmF0aW5nU3lzdGVtKSIKICAgICAgICAgICAgfQogICAgICAgICAgICBpZigkU2VydmljZVBhY2spIHsKICAgICAgICAgICAgICAgICRGaWx0ZXIgKz0gIihvcGVyYXRpbmdzeXN0ZW1zZXJ2aWNlcGFjaz0kU2VydmljZVBhY2spIgogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKCRTaXRlTmFtZSkgewogICAgICAgICAgICAgICAgJEZpbHRlciArPSAiKHNlcnZlcnJlZmVyZW5jZWJsPSRTaXRlTmFtZSkiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgJENvbXBGaWx0ZXIgPSAiKCYoc0FNQWNjb3VudFR5cGU9ODA1MzA2MzY5KShkbnNob3N0bmFtZT0kQ29tcHV0ZXJOYW1lKSRGaWx0ZXIpIgogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJHZXQtTmV0Q29tcHV0ZXIgZmlsdGVyIDogJyRDb21wRmlsdGVyJyIKICAgICAgICAgICAgJENvbXBTZWFyY2hlci5maWx0ZXIgPSAkQ29tcEZpbHRlcgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgJFJlc3VsdHMgPSAkQ29tcFNlYXJjaGVyLkZpbmRBbGwoKQogICAgICAgICAgICAgICAgJFJlc3VsdHMgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAkVXAgPSAkVHJ1ZQogICAgICAgICAgICAgICAgICAgIGlmKCRQaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAkVXAgPSBUZXN0LUNvbm5lY3Rpb24gLUNvdW50IDEgLVF1aWV0IC1Db21wdXRlck5hbWUgJF8ucHJvcGVydGllcy5kbnNob3N0bmFtZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZigkVXApIHsKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkRnVsbERhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJENvbXB1dGVyID0gQ29udmVydC1MREFQUHJvcGVydHkgLVByb3BlcnRpZXMgJF8uUHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJENvbXB1dGVyLlBTT2JqZWN0LlR5cGVOYW1lcy5BZGQoJ1Bvd2VyVmlldy5Db21wdXRlcicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkQ29tcHV0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJF8ucHJvcGVydGllcy5kbnNob3N0bmFtZQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJFJlc3VsdHMuZGlzcG9zZSgpCiAgICAgICAgICAgICAgICAkQ29tcFNlYXJjaGVyLmRpc3Bvc2UoKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIkVycm9yOiAkXyIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQ==
ZnVuY3Rpb24gR2V0LUFET2JqZWN0IHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU0lELAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJE5hbWUsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2FtQWNjb3VudE5hbWUsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQURTcGF0aCwKICAgICAgICBbU3RyaW5nXQogICAgICAgICRGaWx0ZXIsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkUmV0dXJuUmF3LAogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQogICAgcHJvY2VzcyB7CiAgICAgICAgaWYoJFNJRCkgewogICAgICAgICAgICAKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICROYW1lID0gQ29udmVydC1TaWRUb05hbWUgJFNJRAogICAgICAgICAgICAgICAgaWYoJE5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAkQ2Fub25pY2FsID0gQ29udmVydC1BRE5hbWUgLU9iamVjdE5hbWUgJE5hbWUgLUlucHV0VHlwZSBOVDQgLU91dHB1dFR5cGUgQ2Fub25pY2FsCiAgICAgICAgICAgICAgICAgICAgaWYoJENhbm9uaWNhbCkgewogICAgICAgICAgICAgICAgICAgICAgICAkRG9tYWluID0gJENhbm9uaWNhbC5zcGxpdCgiLyIpWzBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJFcnJvciByZXNvbHZpbmcgU0lEICckU0lEJyIKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICROdWxsCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIkVycm9yIHJlc29sdmluZyBTSUQgJyRTSUQnIDogJF8iCiAgICAgICAgICAgICAgICByZXR1cm4gJE51bGwKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAkT2JqZWN0U2VhcmNoZXIgPSBHZXQtRG9tYWluU2VhcmNoZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1BRFNwYXRoICRBRFNwYXRoIC1QYWdlU2l6ZSAkUGFnZVNpemUKICAgICAgICBpZigkT2JqZWN0U2VhcmNoZXIpIHsKICAgICAgICAgICAgaWYoJFNJRCkgewogICAgICAgICAgICAgICAgJE9iamVjdFNlYXJjaGVyLmZpbHRlciA9ICIoJihvYmplY3RzaWQ9JFNJRCkkRmlsdGVyKSIKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYoJE5hbWUpIHsKICAgICAgICAgICAgICAgICRPYmplY3RTZWFyY2hlci5maWx0ZXIgPSAiKCYobmFtZT0kTmFtZSkkRmlsdGVyKSIKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYoJFNhbUFjY291bnROYW1lKSB7CiAgICAgICAgICAgICAgICAkT2JqZWN0U2VhcmNoZXIuZmlsdGVyID0gIigmKHNhbUFjY291bnROYW1lPSRTYW1BY2NvdW50TmFtZSkkRmlsdGVyKSIKICAgICAgICAgICAgfQogICAgICAgICAgICAkUmVzdWx0cyA9ICRPYmplY3RTZWFyY2hlci5GaW5kQWxsKCkKICAgICAgICAgICAgJFJlc3VsdHMgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgIGlmKCRSZXR1cm5SYXcpIHsKICAgICAgICAgICAgICAgICAgICAkXwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgQ29udmVydC1MREFQUHJvcGVydHkgLVByb3BlcnRpZXMgJF8uUHJvcGVydGllcwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgICRSZXN1bHRzLmRpc3Bvc2UoKQogICAgICAgICAgICAkT2JqZWN0U2VhcmNoZXIuZGlzcG9zZSgpCiAgICAgICAgfQogICAgfQp9
ZnVuY3Rpb24gU2V0LUFET2JqZWN0IHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSAoCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU0lELAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJE5hbWUsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2FtQWNjb3VudE5hbWUsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRmlsdGVyLAogICAgICAgIFtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFByb3BlcnR5TmFtZSwKICAgICAgICAkUHJvcGVydHlWYWx1ZSwKICAgICAgICBbSW50XQogICAgICAgICRQcm9wZXJ0eVhvclZhbHVlLAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJENsZWFyVmFsdWUsCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCiAgICAkQXJndW1lbnRzID0gQHsKICAgICAgICAnU0lEJyA9ICRTSUQKICAgICAgICAnTmFtZScgPSAkTmFtZQogICAgICAgICdTYW1BY2NvdW50TmFtZScgPSAkU2FtQWNjb3VudE5hbWUKICAgICAgICAnRG9tYWluJyA9ICREb21haW4KICAgICAgICAnRG9tYWluQ29udHJvbGxlcicgPSAkRG9tYWluQ29udHJvbGxlcgogICAgICAgICdGaWx0ZXInID0gJEZpbHRlcgogICAgICAgICdQYWdlU2l6ZScgPSAkUGFnZVNpemUKICAgICAgICAnQ3JlZGVudGlhbCcgPSAkQ3JlZGVudGlhbAogICAgfQogICAgCiAgICAkUmF3T2JqZWN0ID0gR2V0LUFET2JqZWN0IC1SZXR1cm5SYXcgQEFyZ3VtZW50cwogICAgCiAgICB0cnkgewogICAgICAgIAogICAgICAgICRFbnRyeSA9ICRSYXdPYmplY3QuR2V0RGlyZWN0b3J5RW50cnkoKQogICAgICAgIAogICAgICAgIGlmKCRDbGVhclZhbHVlKSB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkNsZWFyaW5nIHZhbHVlIgogICAgICAgICAgICAkRW50cnkuJFByb3BlcnR5TmFtZS5jbGVhcigpCiAgICAgICAgICAgICRFbnRyeS5jb21taXRjaGFuZ2VzKCkKICAgICAgICB9CiAgICAgICAgZWxzZWlmKCRQcm9wZXJ0eVhvclZhbHVlKSB7CiAgICAgICAgICAgICRUeXBlTmFtZSA9ICRFbnRyeS4kUHJvcGVydHlOYW1lWzBdLkdldFR5cGUoKS5uYW1lCiAgICAgICAgICAgIAogICAgICAgICAgICAkUHJvcGVydHlWYWx1ZSA9ICQoJEVudHJ5LiRQcm9wZXJ0eU5hbWUpIC1ieG9yICRQcm9wZXJ0eVhvclZhbHVlIAogICAgICAgICAgICAkRW50cnkuJFByb3BlcnR5TmFtZSA9ICRQcm9wZXJ0eVZhbHVlIC1hcyAkVHlwZU5hbWUgICAgICAgCiAgICAgICAgICAgICRFbnRyeS5jb21taXRjaGFuZ2VzKCkgICAgIAogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJEVudHJ5LnB1dCgkUHJvcGVydHlOYW1lLCAkUHJvcGVydHlWYWx1ZSkKICAgICAgICAgICAgJEVudHJ5LnNldGluZm8oKQogICAgICAgIH0KICAgIH0KICAgIGNhdGNoIHsKICAgICAgICBXcml0ZS1XYXJuaW5nICJFcnJvciBzZXR0aW5nIHByb3BlcnR5ICRQcm9wZXJ0eU5hbWUgdG8gdmFsdWUgJyRQcm9wZXJ0eVZhbHVlJyBmb3Igb2JqZWN0ICQoJFJhd09iamVjdC5Qcm9wZXJ0aWVzLnNhbWFjY291bnRuYW1lKSA6ICRfIgogICAgfQp9
ZnVuY3Rpb24gSW52b2tlLURvd25ncmFkZUFjY291bnQgewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnU2FtQWNjb3VudE5hbWUnLCBQb3NpdGlvbj0wLCBWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU2FtQWNjb3VudE5hbWUsCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ05hbWUnKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICROYW1lLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEZpbHRlciwKICAgICAgICBbU3dpdGNoXQogICAgICAgICRSZXBhaXIsCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKICAgIHByb2Nlc3MgewogICAgICAgICRBcmd1bWVudHMgPSBAewogICAgICAgICAgICAnU2FtQWNjb3VudE5hbWUnID0gJFNhbUFjY291bnROYW1lCiAgICAgICAgICAgICdOYW1lJyA9ICROYW1lCiAgICAgICAgICAgICdEb21haW4nID0gJERvbWFpbgogICAgICAgICAgICAnRG9tYWluQ29udHJvbGxlcicgPSAkRG9tYWluQ29udHJvbGxlcgogICAgICAgICAgICAnRmlsdGVyJyA9ICRGaWx0ZXIKICAgICAgICAgICAgJ0NyZWRlbnRpYWwnID0gJENyZWRlbnRpYWwKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgJFVBQ1ZhbHVlcyA9IEdldC1BRE9iamVjdCBAQXJndW1lbnRzIHwgc2VsZWN0IHVzZXJhY2NvdW50Y29udHJvbCB8IENvbnZlcnRGcm9tLVVBQ1ZhbHVlCiAgICAgICAgaWYoJFJlcGFpcikgewogICAgICAgICAgICBpZigkVUFDVmFsdWVzLktleXMgLWNvbnRhaW5zICJFTkNSWVBURURfVEVYVF9QV0RfQUxMT1dFRCIpIHsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgU2V0LUFET2JqZWN0IEBBcmd1bWVudHMgLVByb3BlcnR5TmFtZSB1c2VyYWNjb3VudGNvbnRyb2wgLVByb3BlcnR5WG9yVmFsdWUgMTI4CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIFNldC1BRE9iamVjdCBAQXJndW1lbnRzIC1Qcm9wZXJ0eU5hbWUgcHdkbGFzdHNldCAtUHJvcGVydHlWYWx1ZSAtMQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgaWYoJFVBQ1ZhbHVlcy5LZXlzIC1jb250YWlucyAiRE9OVF9FWFBJUkVfUEFTU1dPUkQiKSB7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIFNldC1BRE9iamVjdCBAQXJndW1lbnRzIC1Qcm9wZXJ0eU5hbWUgdXNlcmFjY291bnRjb250cm9sIC1Qcm9wZXJ0eVhvclZhbHVlIDY1NTM2CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoJFVBQ1ZhbHVlcy5LZXlzIC1ub3Rjb250YWlucyAiRU5DUllQVEVEX1RFWFRfUFdEX0FMTE9XRUQiKSB7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIFNldC1BRE9iamVjdCBAQXJndW1lbnRzIC1Qcm9wZXJ0eU5hbWUgdXNlcmFjY291bnRjb250cm9sIC1Qcm9wZXJ0eVhvclZhbHVlIDEyOAogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICBTZXQtQURPYmplY3QgQEFyZ3VtZW50cyAtUHJvcGVydHlOYW1lIHB3ZGxhc3RzZXQgLVByb3BlcnR5VmFsdWUgMAogICAgICAgIH0KICAgIH0KfQ==
ZnVuY3Rpb24gR2V0LUNvbXB1dGVyUHJvcGVydHkgewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkUHJvcGVydGllcywKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMDAwKV0gCiAgICAgICAgW0ludF0KICAgICAgICAkUGFnZVNpemUgPSAyMDAsCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKICAgIGlmKCRQcm9wZXJ0aWVzKSB7CiAgICAgICAgCiAgICAgICAgJFByb3BlcnRpZXMgPSAsIm5hbWUiICsgJFByb3BlcnRpZXMgfCBTb3J0LU9iamVjdCAtVW5pcXVlCiAgICAgICAgR2V0LU5ldENvbXB1dGVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtRnVsbERhdGEgLVBhZ2VTaXplICRQYWdlU2l6ZSB8IFNlbGVjdC1PYmplY3QgLVByb3BlcnR5ICRQcm9wZXJ0aWVzCiAgICB9CiAgICBlbHNlIHsKICAgICAgICAKICAgICAgICBHZXQtTmV0Q29tcHV0ZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1GdWxsRGF0YSAtUGFnZVNpemUgJFBhZ2VTaXplIHwgU2VsZWN0LU9iamVjdCAtZmlyc3QgMSB8IEdldC1NZW1iZXIgLU1lbWJlclR5cGUgKlByb3BlcnR5IHwgU2VsZWN0LU9iamVjdCAtUHJvcGVydHkgIk5hbWUiCiAgICB9Cn0=
ZnVuY3Rpb24gRmluZC1Db21wdXRlckZpZWxkIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uPTAsVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtBbGlhcygnVGVybScpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaFRlcm0gPSAncGFzcycsCiAgICAgICAgW0FsaWFzKCdGaWVsZCcpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNlYXJjaEZpZWxkID0gJ2Rlc2NyaXB0aW9uJywKICAgICAgICBbU3RyaW5nXQogICAgICAgICRBRFNwYXRoLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQogICAgcHJvY2VzcyB7CiAgICAgICAgR2V0LU5ldENvbXB1dGVyIC1BRFNwYXRoICRBRFNwYXRoIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtRnVsbERhdGEgLUZpbHRlciAiKCRTZWFyY2hGaWVsZD0qJFNlYXJjaFRlcm0qKSIgLVBhZ2VTaXplICRQYWdlU2l6ZSB8IFNlbGVjdC1PYmplY3Qgc2FtYWNjb3VudG5hbWUsJFNlYXJjaEZpZWxkCiAgICB9Cn0=
ZnVuY3Rpb24gR2V0LU5ldE9VIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkT1VOYW1lID0gJyonLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEdVSUQsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQURTcGF0aCwKICAgICAgICBbU3dpdGNoXQogICAgICAgICRGdWxsRGF0YSwKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMDAwKV0gCiAgICAgICAgW0ludF0KICAgICAgICAkUGFnZVNpemUgPSAyMDAsCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKICAgIGJlZ2luIHsKICAgICAgICAkT1VTZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLUFEU3BhdGggJEFEU3BhdGggLVBhZ2VTaXplICRQYWdlU2l6ZQogICAgfQogICAgcHJvY2VzcyB7CiAgICAgICAgaWYgKCRPVVNlYXJjaGVyKSB7CiAgICAgICAgICAgIGlmICgkR1VJRCkgewogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkT1VTZWFyY2hlci5maWx0ZXI9IigmKG9iamVjdENhdGVnb3J5PW9yZ2FuaXphdGlvbmFsVW5pdCkobmFtZT0kT1VOYW1lKShncGxpbms9KiRHVUlEKikpIgogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJE9VU2VhcmNoZXIuZmlsdGVyPSIoJihvYmplY3RDYXRlZ29yeT1vcmdhbml6YXRpb25hbFVuaXQpKG5hbWU9JE9VTmFtZSkpIgogICAgICAgICAgICB9CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkUmVzdWx0cyA9ICRPVVNlYXJjaGVyLkZpbmRBbGwoKQogICAgICAgICAgICAgICAgJFJlc3VsdHMgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICBpZiAoJEZ1bGxEYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAkT1UgPSBDb252ZXJ0LUxEQVBQcm9wZXJ0eSAtUHJvcGVydGllcyAkXy5Qcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICAgICAgICAgICRPVS5QU09iamVjdC5UeXBlTmFtZXMuQWRkKCdQb3dlclZpZXcuT1UnKQogICAgICAgICAgICAgICAgICAgICAgICAkT1UKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7IAogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgJF8ucHJvcGVydGllcy5hZHNwYXRoCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJFJlc3VsdHMuZGlzcG9zZSgpCiAgICAgICAgICAgICAgICAkT1VTZWFyY2hlci5kaXNwb3NlKCkKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICRfCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0=
ZnVuY3Rpb24gR2V0LU5ldFNpdGUgewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRTaXRlTmFtZSA9ICIqIiwKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKICAgICAgICBbU3RyaW5nXQogICAgICAgICRBRFNwYXRoLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEdVSUQsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRnVsbERhdGEsCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCiAgICBiZWdpbiB7CiAgICAgICAgJFNpdGVTZWFyY2hlciA9IEdldC1Eb21haW5TZWFyY2hlciAtQURTcGF0aCAkQURTcGF0aCAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLUFEU3ByZWZpeCAiQ049U2l0ZXMsQ049Q29uZmlndXJhdGlvbiIgLVBhZ2VTaXplICRQYWdlU2l6ZQogICAgfQogICAgcHJvY2VzcyB7CiAgICAgICAgaWYoJFNpdGVTZWFyY2hlcikgewogICAgICAgICAgICBpZiAoJEdVSUQpIHsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJFNpdGVTZWFyY2hlci5maWx0ZXI9IigmKG9iamVjdENhdGVnb3J5PXNpdGUpKG5hbWU9JFNpdGVOYW1lKShncGxpbms9KiRHVUlEKikpIgogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJFNpdGVTZWFyY2hlci5maWx0ZXI9IigmKG9iamVjdENhdGVnb3J5PXNpdGUpKG5hbWU9JFNpdGVOYW1lKSkiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkUmVzdWx0cyA9ICRTaXRlU2VhcmNoZXIuRmluZEFsbCgpCiAgICAgICAgICAgICAgICAkUmVzdWx0cyB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgIGlmICgkRnVsbERhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICRTaXRlID0gQ29udmVydC1MREFQUHJvcGVydHkgLVByb3BlcnRpZXMgJF8uUHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgICAgICAkU2l0ZS5QU09iamVjdC5UeXBlTmFtZXMuQWRkKCdQb3dlclZpZXcuU2l0ZScpCiAgICAgICAgICAgICAgICAgICAgICAgICRTaXRlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgJF8ucHJvcGVydGllcy5uYW1lCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJFJlc3VsdHMuZGlzcG9zZSgpCiAgICAgICAgICAgICAgICAkU2l0ZVNlYXJjaGVyLmRpc3Bvc2UoKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgJF8KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQ==
ZnVuY3Rpb24gR2V0LU5ldFN1Ym5ldCB7CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0gKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFNpdGVOYW1lID0gIioiLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKICAgICAgICBbU3RyaW5nXQogICAgICAgICRBRFNwYXRoLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRnVsbERhdGEsCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCiAgICBiZWdpbiB7CiAgICAgICAgJFN1Ym5ldFNlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtQURTcGF0aCAkQURTcGF0aCAtQURTcHJlZml4ICJDTj1TdWJuZXRzLENOPVNpdGVzLENOPUNvbmZpZ3VyYXRpb24iIC1QYWdlU2l6ZSAkUGFnZVNpemUKICAgIH0KICAgIHByb2Nlc3MgewogICAgICAgIGlmKCRTdWJuZXRTZWFyY2hlcikgewogICAgICAgICAgICAkU3VibmV0U2VhcmNoZXIuZmlsdGVyPSIoJihvYmplY3RDYXRlZ29yeT1zdWJuZXQpKSIKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICRSZXN1bHRzID0gJFN1Ym5ldFNlYXJjaGVyLkZpbmRBbGwoKQogICAgICAgICAgICAgICAgJFJlc3VsdHMgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICBpZiAoJEZ1bGxEYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBDb252ZXJ0LUxEQVBQcm9wZXJ0eSAtUHJvcGVydGllcyAkXy5Qcm9wZXJ0aWVzIHwgV2hlcmUtT2JqZWN0IHsgJF8uc2l0ZW9iamVjdCAtbWF0Y2ggIkNOPSRTaXRlTmFtZSIgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggKCRTaXRlTmFtZSAtYW5kICgkXy5wcm9wZXJ0aWVzLnNpdGVvYmplY3QgLW1hdGNoICJDTj0kU2l0ZU5hbWUsIikpIC1vciAoJFNpdGVOYW1lIC1lcSAnKicpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU3VibmV0UHJvcGVydGllcyA9IEB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1N1Ym5ldCcgPSAkXy5wcm9wZXJ0aWVzLm5hbWVbMF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFN1Ym5ldFByb3BlcnRpZXNbJ1NpdGUnXSA9ICgkXy5wcm9wZXJ0aWVzLnNpdGVvYmplY3RbMF0pLnNwbGl0KCIsIilbMF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkU3VibmV0UHJvcGVydGllc1snU2l0ZSddID0gJ0Vycm9yJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgTmV3LU9iamVjdCAtVHlwZU5hbWUgUFNPYmplY3QgLVByb3BlcnR5ICRTdWJuZXRQcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkUmVzdWx0cy5kaXNwb3NlKCkKICAgICAgICAgICAgICAgICRTdWJuZXRTZWFyY2hlci5kaXNwb3NlKCkKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICRfCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0=
ZnVuY3Rpb24gR2V0LURvbWFpblNJRCB7CiAgICBwYXJhbSgKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlcgogICAgKQogICAgJERDU0lEID0gR2V0LU5ldENvbXB1dGVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtRnVsbERhdGEgLUZpbHRlciAnKHVzZXJBY2NvdW50Q29udHJvbDoxLjIuODQwLjExMzU1Ni4xLjQuODAzOj04MTkyKScgfCBTZWxlY3QtT2JqZWN0IC1GaXJzdCAxIC1FeHBhbmRQcm9wZXJ0eSBvYmplY3RzaWQKICAgIGlmKCREQ1NJRCkgewogICAgICAgICREQ1NJRC5TdWJzdHJpbmcoMCwgJERDU0lELkxhc3RJbmRleE9mKCctJykpCiAgICB9CiAgICBlbHNlIHsKICAgICAgICBXcml0ZS1WZXJib3NlICJFcnJvciBleHRyYWN0aW5nIGRvbWFpbiBTSUQgZm9yICREb21haW4iCiAgICB9Cn0=
ZnVuY3Rpb24gR2V0LU5ldEdyb3VwIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRHcm91cE5hbWUgPSAnKicsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkU0lELAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFVzZXJOYW1lLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEZpbHRlciwKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKICAgICAgICBbU3RyaW5nXQogICAgICAgICRBRFNwYXRoLAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEFkbWluQ291bnQsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRnVsbERhdGEsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkUmF3U2lkcywKICAgICAgICBbU3dpdGNoXQogICAgICAgICRBbGxUeXBlcywKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMDAwKV0KICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQogICAgYmVnaW4gewogICAgICAgICRHcm91cFNlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtQURTcGF0aCAkQURTcGF0aCAtUGFnZVNpemUgJFBhZ2VTaXplCiAgICAgICAgaWYgKCEkQWxsVHlwZXMpCiAgICAgICAgewogICAgICAgICAgJEZpbHRlciArPSAiKGdyb3VwVHlwZToxLjIuODQwLjExMzU1Ni4xLjQuODAzOj0yMTQ3NDgzNjQ4KSIKICAgICAgICB9CiAgICB9CiAgICBwcm9jZXNzIHsKICAgICAgICBpZigkR3JvdXBTZWFyY2hlcikgewogICAgICAgICAgICBpZigkQWRtaW5Db3VudCkgewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiQ2hlY2tpbmcgZm9yIGFkbWluQ291bnQ9MSIKICAgICAgICAgICAgICAgICRGaWx0ZXIgKz0gIihhZG1pbmNvdW50PTEpIgogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkVXNlck5hbWUpIHsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJFVzZXIgPSBHZXQtQURPYmplY3QgLVNhbUFjY291bnROYW1lICRVc2VyTmFtZSAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLVJldHVyblJhdyAtUGFnZVNpemUgJFBhZ2VTaXplIHwgU2VsZWN0LU9iamVjdCAtRmlyc3QgMQogICAgICAgICAgICAgICAgaWYoJFVzZXIpIHsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAkVXNlckRpcmVjdG9yeUVudHJ5ID0gJFVzZXIuR2V0RGlyZWN0b3J5RW50cnkoKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICRVc2VyRGlyZWN0b3J5RW50cnkuUmVmcmVzaENhY2hlKCJ0b2tlbkdyb3VwcyIpCiAgICAgICAgICAgICAgICAgICAgJFVzZXJEaXJlY3RvcnlFbnRyeS5Ub2tlbkdyb3VwcyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cFNpZCA9IChOZXctT2JqZWN0IFN5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuU2VjdXJpdHlJZGVudGlmaWVyKCRfLDApKS5WYWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgaWYoJEdyb3VwU2lkIC1ub3RtYXRjaCAnXlMtMS01LTMyLS4qJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJEZ1bGxEYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwID0gR2V0LUFET2JqZWN0IC1TSUQgJEdyb3VwU2lkIC1QYWdlU2l6ZSAkUGFnZVNpemUgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwLlBTT2JqZWN0LlR5cGVOYW1lcy5BZGQoJ1Bvd2VyVmlldy5Hcm91cCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkUmF3U2lkcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBTaWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbnZlcnQtU2lkVG9OYW1lIC1TSUQgJEdyb3VwU2lkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAiVXNlck5hbWUgJyRVc2VyTmFtZScgZmFpbGVkIHRvIHJlc29sdmUuIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgaWYgKCRTSUQpIHsKICAgICAgICAgICAgICAgICAgICAkR3JvdXBTZWFyY2hlci5maWx0ZXIgPSAiKCYob2JqZWN0Q2F0ZWdvcnk9Z3JvdXApKG9iamVjdFNJRD0kU0lEKSRGaWx0ZXIpIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJEdyb3VwU2VhcmNoZXIuZmlsdGVyID0gIigmKG9iamVjdENhdGVnb3J5PWdyb3VwKShzYW1hY2NvdW50bmFtZT0kR3JvdXBOYW1lKSRGaWx0ZXIpIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJFJlc3VsdHMgPSAkR3JvdXBTZWFyY2hlci5GaW5kQWxsKCkKICAgICAgICAgICAgICAgICRSZXN1bHRzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgaWYgKCRGdWxsRGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwID0gQ29udmVydC1MREFQUHJvcGVydHkgLVByb3BlcnRpZXMgJF8uUHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXAuUFNPYmplY3QuVHlwZU5hbWVzLkFkZCgnUG93ZXJWaWV3Lkdyb3VwJykKICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgJF8ucHJvcGVydGllcy5zYW1hY2NvdW50bmFtZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRSZXN1bHRzLmRpc3Bvc2UoKQogICAgICAgICAgICAgICAgJEdyb3VwU2VhcmNoZXIuZGlzcG9zZSgpCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0=

ZnVuY3Rpb24gR2V0LU5ldEZpbGVTZXJ2ZXIgewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAogICAgICAgIFtTdHJpbmdbXV0KICAgICAgICAkVGFyZ2V0VXNlcnMsCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCiAgICBmdW5jdGlvbiBTcGxpdFBhdGggewogICAgICAgIAogICAgICAgIHBhcmFtKFtTdHJpbmddJFBhdGgpCiAgICAgICAgaWYgKCRQYXRoIC1hbmQgKCRQYXRoLnNwbGl0KCJcXCIpLkNvdW50IC1nZSAzKSkgewogICAgICAgICAgICAkVGVtcCA9ICRQYXRoLnNwbGl0KCJcXCIpWzJdCiAgICAgICAgICAgIGlmKCRUZW1wIC1hbmQgKCRUZW1wIC1uZSAnJykpIHsKICAgICAgICAgICAgICAgICRUZW1wCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICAkZmlsdGVyID0gIighKHVzZXJBY2NvdW50Q29udHJvbDoxLjIuODQwLjExMzU1Ni4xLjQuODAzOj0yKSkofChzY3JpcHRwYXRoPSopKGhvbWVkaXJlY3Rvcnk9KikocHJvZmlsZXBhdGg9KikpIgogICAgR2V0LU5ldFVzZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1QYWdlU2l6ZSAkUGFnZVNpemUgLUZpbHRlciAkZmlsdGVyIHwgV2hlcmUtT2JqZWN0IHskX30gfCBXaGVyZS1PYmplY3QgewogICAgICAgICAgICAKICAgICAgICAgICAgaWYoJFRhcmdldFVzZXJzKSB7CiAgICAgICAgICAgICAgICAkVGFyZ2V0VXNlcnMgLU1hdGNoICRfLnNhbUFjY291bnROYW1lCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7ICRUcnVlIH0KICAgICAgICB9IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAKICAgICAgICAgICAgaWYoJF8uaG9tZWRpcmVjdG9yeSkgewogICAgICAgICAgICAgICAgU3BsaXRQYXRoKCRfLmhvbWVkaXJlY3RvcnkpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoJF8uc2NyaXB0cGF0aCkgewogICAgICAgICAgICAgICAgU3BsaXRQYXRoKCRfLnNjcmlwdHBhdGgpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoJF8ucHJvZmlsZXBhdGgpIHsKICAgICAgICAgICAgICAgIFNwbGl0UGF0aCgkXy5wcm9maWxlcGF0aCkKICAgICAgICAgICAgfQogICAgICAgIH0gfCBXaGVyZS1PYmplY3QgeyRffSB8IFNvcnQtT2JqZWN0IC1VbmlxdWUKfQ==

ZmlsdGVyIEdldC1HcHRUbXBsIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBQYXJhbSAoCiAgICAgICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JFRydWUsIFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRHcHRUbXBsUGF0aCwKICAgICAgICBbU3dpdGNoXQogICAgICAgICRVc2VQU0RyaXZlCiAgICApCiAgICBpZigkVXNlUFNEcml2ZSkgewogICAgICAgIAogICAgICAgICRQYXJ0cyA9ICRHcHRUbXBsUGF0aC5zcGxpdCgnXCcpCiAgICAgICAgJEZvbGRlclBhdGggPSAkUGFydHNbMC4uKCRQYXJ0cy5sZW5ndGgtMildIC1qb2luICdcJwogICAgICAgICRGaWxlUGF0aCA9ICRQYXJ0c1stMV0KICAgICAgICAkUmFuZERyaXZlID0gKCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eiIuVG9DaGFyQXJyYXkoKSB8IEdldC1SYW5kb20gLUNvdW50IDcpIC1qb2luICcnCiAgICAgICAgV3JpdGUtVmVyYm9zZSAiTW91bnRpbmcgcGF0aCAkR3B0VG1wbFBhdGggdXNpbmcgYSB0ZW1wIFBTRHJpdmUgYXQgJFJhbmREcml2ZSIKICAgICAgICB0cnkgewogICAgICAgICAgICAkTnVsbCA9IE5ldy1QU0RyaXZlIC1OYW1lICRSYW5kRHJpdmUgLVBTUHJvdmlkZXIgRmlsZVN5c3RlbSAtUm9vdCAkRm9sZGVyUGF0aCAgLUVycm9yQWN0aW9uIFN0b3AKICAgICAgICB9CiAgICAgICAgY2F0Y2ggewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJFcnJvciBtb3VudGluZyBwYXRoICRHcHRUbXBsUGF0aCA6ICRfIgogICAgICAgICAgICByZXR1cm4gJE51bGwKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgJFRhcmdldEdwdFRtcGxQYXRoID0gJFJhbmREcml2ZSArICI6XCIgKyAkRmlsZVBhdGgKICAgIH0KICAgIGVsc2UgewogICAgICAgICRUYXJnZXRHcHRUbXBsUGF0aCA9ICRHcHRUbXBsUGF0aAogICAgfQogICAgV3JpdGUtVmVyYm9zZSAiR3B0VG1wbFBhdGg6ICRHcHRUbXBsUGF0aCIKICAgIHRyeSB7CiAgICAgICAgV3JpdGUtVmVyYm9zZSAiUGFyc2luZyAkVGFyZ2V0R3B0VG1wbFBhdGgiCiAgICAgICAgJFRhcmdldEdwdFRtcGxQYXRoIHwgR2V0LUluaUNvbnRlbnQgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKICAgIH0KICAgIGNhdGNoIHsKICAgICAgICBXcml0ZS1WZXJib3NlICJFcnJvciBwYXJzaW5nICRUYXJnZXRHcHRUbXBsUGF0aCA6ICRfIgogICAgfQogICAgaWYoJFVzZVBTRHJpdmUgLWFuZCAkUmFuZERyaXZlKSB7CiAgICAgICAgV3JpdGUtVmVyYm9zZSAiUmVtb3ZpbmcgdGVtcCBQU0RyaXZlICRSYW5kRHJpdmUiCiAgICAgICAgR2V0LVBTRHJpdmUgLU5hbWUgJFJhbmREcml2ZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB8IFJlbW92ZS1QU0RyaXZlIC1Gb3JjZQogICAgfQp9
ZmlsdGVyIEdldC1Hcm91cHNYTUwgewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIFBhcmFtICgKICAgICAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeT0kVHJ1ZSwgVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEdyb3Vwc1hNTFBhdGgsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkVXNlUFNEcml2ZQogICAgKQogICAgaWYoJFVzZVBTRHJpdmUpIHsKICAgICAgICAKICAgICAgICAkUGFydHMgPSAkR3JvdXBzWE1MUGF0aC5zcGxpdCgnXCcpCiAgICAgICAgJEZvbGRlclBhdGggPSAkUGFydHNbMC4uKCRQYXJ0cy5sZW5ndGgtMildIC1qb2luICdcJwogICAgICAgICRGaWxlUGF0aCA9ICRQYXJ0c1stMV0KICAgICAgICAkUmFuZERyaXZlID0gKCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eiIuVG9DaGFyQXJyYXkoKSB8IEdldC1SYW5kb20gLUNvdW50IDcpIC1qb2luICcnCiAgICAgICAgV3JpdGUtVmVyYm9zZSAiTW91bnRpbmcgcGF0aCAkR3JvdXBzWE1MUGF0aCB1c2luZyBhIHRlbXAgUFNEcml2ZSBhdCAkUmFuZERyaXZlIgogICAgICAgIHRyeSB7CiAgICAgICAgICAgICROdWxsID0gTmV3LVBTRHJpdmUgLU5hbWUgJFJhbmREcml2ZSAtUFNQcm92aWRlciBGaWxlU3lzdGVtIC1Sb290ICRGb2xkZXJQYXRoICAtRXJyb3JBY3Rpb24gU3RvcAogICAgICAgIH0KICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkVycm9yIG1vdW50aW5nIHBhdGggJEdyb3Vwc1hNTFBhdGggOiAkXyIKICAgICAgICAgICAgcmV0dXJuICROdWxsCiAgICAgICAgfQogICAgICAgIAogICAgICAgICRUYXJnZXRHcm91cHNYTUxQYXRoID0gJFJhbmREcml2ZSArICI6XCIgKyAkRmlsZVBhdGgKICAgIH0KICAgIGVsc2UgewogICAgICAgICRUYXJnZXRHcm91cHNYTUxQYXRoID0gJEdyb3Vwc1hNTFBhdGgKICAgIH0KICAgIHRyeSB7CiAgICAgICAgW1hNTF0kR3JvdXBzWE1MY29udGVudCA9IEdldC1Db250ZW50ICRUYXJnZXRHcm91cHNYTUxQYXRoIC1FcnJvckFjdGlvbiBTdG9wCiAgICAgICAgCiAgICAgICAgJEdyb3Vwc1hNTGNvbnRlbnQgfCBTZWxlY3QtWG1sICIvR3JvdXBzL0dyb3VwIiB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IG5vZGUgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICRHcm91cG5hbWUgPSAkXy5Qcm9wZXJ0aWVzLmdyb3VwTmFtZQogICAgICAgICAgICAKICAgICAgICAgICAgJEdyb3VwU0lEID0gJF8uUHJvcGVydGllcy5ncm91cFNpZAogICAgICAgICAgICBpZigtbm90ICRHcm91cFNJRCkgewogICAgICAgICAgICAgICAgaWYoJEdyb3VwbmFtZSAtbWF0Y2ggJ0FkbWluaXN0cmF0b3JzJykgewogICAgICAgICAgICAgICAgICAgICRHcm91cFNJRCA9ICdTLTEtNS0zMi01NDQnCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlaWYoJEdyb3VwbmFtZSAtbWF0Y2ggJ1JlbW90ZSBEZXNrdG9wJykgewogICAgICAgICAgICAgICAgICAgICRHcm91cFNJRCA9ICdTLTEtNS0zMi01NTUnCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlaWYoJEdyb3VwbmFtZSAtbWF0Y2ggJ0d1ZXN0cycpIHsKICAgICAgICAgICAgICAgICAgICAkR3JvdXBTSUQgPSAnUy0xLTUtMzItNTQ2JwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJEdyb3VwU0lEID0gQ29udmVydC1OYW1lVG9TaWQgLU9iamVjdE5hbWUgJEdyb3VwbmFtZSB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IFNJRAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAkTWVtYmVycyA9ICRfLlByb3BlcnRpZXMubWVtYmVycyB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IE1lbWJlciB8IFdoZXJlLU9iamVjdCB7ICRfLmFjdGlvbiAtbWF0Y2ggJ0FERCcgfSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgIGlmKCRfLnNpZCkgeyAkXy5zaWQgfQogICAgICAgICAgICAgICAgZWxzZSB7ICRfLm5hbWUgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgkTWVtYmVycykgewogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZigkXy5maWx0ZXJzKSB7CiAgICAgICAgICAgICAgICAgICAgJEZpbHRlcnMgPSAkXy5maWx0ZXJzLkdldEVudW1lcmF0b3IoKSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgTmV3LU9iamVjdCAtVHlwZU5hbWUgUFNPYmplY3QgLVByb3BlcnR5IEB7J1R5cGUnID0gJF8uTG9jYWxOYW1lOydWYWx1ZScgPSAkXy5uYW1lfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICRGaWx0ZXJzID0gJE51bGwKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmKCRNZW1iZXJzIC1pc25vdCBbU3lzdGVtLkFycmF5XSkgeyAkTWVtYmVycyA9IEAoJE1lbWJlcnMpIH0KICAgICAgICAgICAgICAgICRHUE9Hcm91cCA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICRHUE9Hcm91cCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdHUE9QYXRoJyAkVGFyZ2V0R3JvdXBzWE1MUGF0aAogICAgICAgICAgICAgICAgJEdQT0dyb3VwIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0ZpbHRlcnMnICRGaWx0ZXJzCiAgICAgICAgICAgICAgICAkR1BPR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR3JvdXBOYW1lJyAkR3JvdXBOYW1lCiAgICAgICAgICAgICAgICAkR1BPR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR3JvdXBTSUQnICRHcm91cFNJRAogICAgICAgICAgICAgICAgJEdQT0dyb3VwIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dyb3VwTWVtYmVyT2YnICROdWxsCiAgICAgICAgICAgICAgICAkR1BPR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR3JvdXBNZW1iZXJzJyAkTWVtYmVycwogICAgICAgICAgICAgICAgJEdQT0dyb3VwCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBjYXRjaCB7CiAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXJyb3IgcGFyc2luZyAkVGFyZ2V0R3JvdXBzWE1MUGF0aCA6ICRfIgogICAgfQogICAgaWYoJFVzZVBTRHJpdmUgLWFuZCAkUmFuZERyaXZlKSB7CiAgICAgICAgV3JpdGUtVmVyYm9zZSAiUmVtb3ZpbmcgdGVtcCBQU0RyaXZlICRSYW5kRHJpdmUiCiAgICAgICAgR2V0LVBTRHJpdmUgLU5hbWUgJFJhbmREcml2ZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB8IFJlbW92ZS1QU0RyaXZlIC1Gb3JjZQogICAgfQp9
ZnVuY3Rpb24gR2V0LU5ldEdQTyB7CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0gKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEdQT25hbWUgPSAnKicsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRGlzcGxheU5hbWUsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJOYW1lLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAogICAgICAgIAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEFEU3BhdGgsCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCiAgICBiZWdpbiB7CiAgICAgICAgJEdQT1NlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtQURTcGF0aCAkQURTcGF0aCAtUGFnZVNpemUgJFBhZ2VTaXplCiAgICB9CiAgICBwcm9jZXNzIHsKICAgICAgICBpZiAoJEdQT1NlYXJjaGVyKSB7CiAgICAgICAgICAgIGlmKCRDb21wdXRlck5hbWUpIHsKICAgICAgICAgICAgICAgICRHUE9OYW1lcyA9IEAoKQogICAgICAgICAgICAgICAgJENvbXB1dGVycyA9IEdldC1OZXRDb21wdXRlciAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1GdWxsRGF0YSAtUGFnZVNpemUgJFBhZ2VTaXplCiAgICAgICAgICAgICAgICBpZighJENvbXB1dGVycykgewogICAgICAgICAgICAgICAgICAgIHRocm93ICJDb21wdXRlciAkQ29tcHV0ZXJOYW1lIGluIGRvbWFpbiAnJERvbWFpbicgbm90IGZvdW5kISBUcnkgYSBmdWxseSBxdWFsaWZpZWQgaG9zdCBuYW1lIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICRDb21wdXRlck9VcyA9IEAoKQogICAgICAgICAgICAgICAgRm9yRWFjaCgkQ29tcHV0ZXIgaW4gJENvbXB1dGVycykgewogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICRETiA9ICRDb21wdXRlci5kaXN0aW5ndWlzaGVkbmFtZQogICAgICAgICAgICAgICAgICAgICRDb21wdXRlck9VcyArPSAkRE4uc3BsaXQoIiwiKSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoJF8uc3RhcnRzd2l0aCgiT1U9IikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRETi5zdWJzdHJpbmcoJEROLmluZGV4b2YoJF8pKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJDb21wdXRlck9VczogJENvbXB1dGVyT1VzIgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBGb3JFYWNoKCRDb21wdXRlck9VIGluICRDb21wdXRlck9VcykgewogICAgICAgICAgICAgICAgICAgICRHUE9OYW1lcyArPSBHZXQtTmV0T1UgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1BRFNwYXRoICRDb21wdXRlck9VIC1GdWxsRGF0YSAtUGFnZVNpemUgJFBhZ2VTaXplIHwgRm9yRWFjaC1PYmplY3QgeyAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlLXZlcmJvc2UgImJsYWg6ICQoJF8ubmFtZSkiCiAgICAgICAgICAgICAgICAgICAgICAgICRfLmdwbGluay5zcGxpdCgiXVsiKSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkXy5zdGFydHN3aXRoKCJMREFQIikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkXy5zcGxpdCgiOyIpWzBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkdQT05hbWVzOiAkR1BPTmFtZXMiCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICRDb21wdXRlclNpdGUgPSAoR2V0LVNpdGVOYW1lIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZSkuU2l0ZU5hbWUKICAgICAgICAgICAgICAgIGlmKCRDb21wdXRlclNpdGUgLWFuZCAoJENvbXB1dGVyU2l0ZSAtbm90bGlrZSAnRXJyb3IqJykpIHsKICAgICAgICAgICAgICAgICAgICAkR1BPTmFtZXMgKz0gR2V0LU5ldFNpdGUgLVNpdGVOYW1lICRDb21wdXRlclNpdGUgLUZ1bGxEYXRhIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICBpZigkXy5ncGxpbmspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfLmdwbGluay5zcGxpdCgiXVsiKSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJF8uc3RhcnRzd2l0aCgiTERBUCIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfLnNwbGl0KCI7IilbMF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkR1BPTmFtZXMgfCBXaGVyZS1PYmplY3R7JF8gLWFuZCAoJF8gLW5lICcnKX0gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgJEdQT1NlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtQURTcGF0aCAkXyAtUGFnZVNpemUgJFBhZ2VTaXplCiAgICAgICAgICAgICAgICAgICAgJEdQT1NlYXJjaGVyLmZpbHRlcj0iKCYob2JqZWN0Q2F0ZWdvcnk9Z3JvdXBQb2xpY3lDb250YWluZXIpKG5hbWU9JEdQT25hbWUpKSIKICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAkUmVzdWx0cyA9ICRHUE9TZWFyY2hlci5GaW5kQWxsKCkKICAgICAgICAgICAgICAgICAgICAgICAgJFJlc3VsdHMgfCBXaGVyZS1PYmplY3QgeyRffSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRPdXQgPSBDb252ZXJ0LUxEQVBQcm9wZXJ0eSAtUHJvcGVydGllcyAkXy5Qcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkT3V0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE91dAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICRSZXN1bHRzLmRpc3Bvc2UoKQogICAgICAgICAgICAgICAgICAgICAgICAkR1BPU2VhcmNoZXIuZGlzcG9zZSgpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtV2FybmluZyAkXwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGlmKCREaXNwbGF5TmFtZSkgewogICAgICAgICAgICAgICAgICAgICRHUE9TZWFyY2hlci5maWx0ZXI9IigmKG9iamVjdENhdGVnb3J5PWdyb3VwUG9saWN5Q29udGFpbmVyKShkaXNwbGF5bmFtZT0kRGlzcGxheU5hbWUpKSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICRHUE9TZWFyY2hlci5maWx0ZXI9IigmKG9iamVjdENhdGVnb3J5PWdyb3VwUG9saWN5Q29udGFpbmVyKShuYW1lPSRHUE9uYW1lKSkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICRSZXN1bHRzID0gJEdQT1NlYXJjaGVyLkZpbmRBbGwoKQogICAgICAgICAgICAgICAgICAgICRSZXN1bHRzIHwgV2hlcmUtT2JqZWN0IHskX30gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRBRFNQYXRoIC1hbmQgKCRBRFNwYXRoIC1NYXRjaCAnXkdDOi8vJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRQcm9wZXJ0aWVzID0gQ29udmVydC1MREFQUHJvcGVydHkgLVByb3BlcnRpZXMgJF8uUHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR1BPRE4gPSAkUHJvcGVydGllcy5kaXN0aW5ndWlzaGVkbmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHUE9Eb21haW4gPSAkR1BPRE4uc3ViU3RyaW5nKCRHUE9ETi5JbmRleE9mKCJEQz0iKSkgLXJlcGxhY2UgJ0RDPScsJycgLXJlcGxhY2UgJywnLCcuJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRncGNmaWxlc3lzcGF0aCA9ICJcXCRHUE9Eb21haW5cU3lzVm9sXCRHUE9Eb21haW5cUG9saWNpZXNcJCgkUHJvcGVydGllcy5jbikiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFByb3BlcnRpZXMgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnZ3BjZmlsZXN5c3BhdGgnICRncGNmaWxlc3lzcGF0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRQcm9wZXJ0aWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFByb3BlcnRpZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29udmVydC1MREFQUHJvcGVydHkgLVByb3BlcnRpZXMgJF8uUHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICRSZXN1bHRzLmRpc3Bvc2UoKQogICAgICAgICAgICAgICAgICAgICRHUE9TZWFyY2hlci5kaXNwb3NlKCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICRfCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0=




ZnVuY3Rpb24gR2V0LURvbWFpblBvbGljeSB7CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgUGFyYW0gKAogICAgICAgIFtTdHJpbmddCiAgICAgICAgW1ZhbGlkYXRlU2V0KCJEb21haW4iLCJEQyIpXQogICAgICAgICRTb3VyY2UgPSJEb21haW4iLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFJlc29sdmVTaWRzLAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFVzZVBTRHJpdmUKICAgICkKICAgIGlmKCRTb3VyY2UgLWVxICJEb21haW4iKSB7CiAgICAgICAgCiAgICAgICAgJEdQTyA9IEdldC1OZXRHUE8gLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1HUE9uYW1lICJ7MzFCMkYzNDAtMDE2RC0xMUQyLTk0NUYtMDBDMDRGQjk4NEY5fSIKICAgICAgICAKICAgICAgICBpZigkR1BPKSB7CiAgICAgICAgICAgIAogICAgICAgICAgICAkR3B0VG1wbFBhdGggPSAkR1BPLmdwY2ZpbGVzeXNwYXRoICsgIlxNQUNISU5FXE1pY3Jvc29mdFxXaW5kb3dzIE5UXFNlY0VkaXRcR3B0VG1wbC5pbmYiCiAgICAgICAgICAgICRQYXJzZUFyZ3MgPSAgQHsKICAgICAgICAgICAgICAgICdHcHRUbXBsUGF0aCcgPSAkR3B0VG1wbFBhdGgKICAgICAgICAgICAgICAgICdVc2VQU0RyaXZlJyA9ICRVc2VQU0RyaXZlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIEdldC1HcHRUbXBsIEBQYXJzZUFyZ3MKICAgICAgICB9CiAgICB9CiAgICBlbHNlaWYoJFNvdXJjZSAtZXEgIkRDIikgewogICAgICAgIAogICAgICAgICRHUE8gPSBHZXQtTmV0R1BPIC1Eb21haW4gJERvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtR1BPbmFtZSAiezZBQzE3ODZDLTAxNkYtMTFEMi05NDVGLTAwQzA0RkI5ODRGOX0iCiAgICAgICAgaWYoJEdQTykgewogICAgICAgICAgICAKICAgICAgICAgICAgJEdwdFRtcGxQYXRoID0gJEdQTy5ncGNmaWxlc3lzcGF0aCArICJcTUFDSElORVxNaWNyb3NvZnRcV2luZG93cyBOVFxTZWNFZGl0XEdwdFRtcGwuaW5mIgogICAgICAgICAgICAkUGFyc2VBcmdzID0gIEB7CiAgICAgICAgICAgICAgICAnR3B0VG1wbFBhdGgnID0gJEdwdFRtcGxQYXRoCiAgICAgICAgICAgICAgICAnVXNlUFNEcml2ZScgPSAkVXNlUFNEcml2ZQogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICBHZXQtR3B0VG1wbCBAUGFyc2VBcmdzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgaWYoJFJlc29sdmVTaWRzKSB7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgJFBvbGljeSA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAkXy5wc29iamVjdC5wcm9wZXJ0aWVzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICBpZiggJF8uTmFtZSAtZXEgJ1ByaXZpbGVnZVJpZ2h0cycpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRQcml2aWxlZ2VSaWdodHMgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfLlZhbHVlLnBzb2JqZWN0LnByb3BlcnRpZXMgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNpZHMgPSAkXy5WYWx1ZSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRfIC1pc25vdCBbU3lzdGVtLkFycmF5XSkgeyAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb252ZXJ0LVNpZFRvTmFtZSAkXyAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfIHwgRm9yRWFjaC1PYmplY3QgeyBDb252ZXJ0LVNpZFRvTmFtZSAkXyB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXJyb3IgcmVzb2x2aW5nIFNJRCA6ICRfIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRQcml2aWxlZ2VSaWdodHMgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAkXy5OYW1lICRTaWRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkUG9saWN5IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1ByaXZpbGVnZVJpZ2h0cycgJFByaXZpbGVnZVJpZ2h0cwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFBvbGljeSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICRfLk5hbWUgJF8uVmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkUG9saWN5CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsgJF8gfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9
ZnVuY3Rpb24gR2V0LU5ldExvY2FsR3JvdXAgewogICAgW0NtZGxldEJpbmRpbmcoRGVmYXVsdFBhcmFtZXRlclNldE5hbWUgPSAnV2luTlQnKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdBUEknLCBQb3NpdGlvbj0wLCBWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ1dpbk5UJywgUG9zaXRpb249MCwgVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICRFbnY6Q29tcHV0ZXJOYW1lLAogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdXaW5OVCcpXQogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdBUEknKV0KICAgICAgICBbVmFsaWRhdGVTY3JpcHQoe1Rlc3QtUGF0aCAtUGF0aCAkXyB9KV0KICAgICAgICBbQWxpYXMoJ0hvc3RMaXN0JyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJGaWxlLAogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdXaW5OVCcpXQogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdBUEknKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRHcm91cE5hbWUgPSAnQWRtaW5pc3RyYXRvcnMnLAogICAgICAgIFtQYXJhbWV0ZXIoUGFyYW1ldGVyU2V0TmFtZSA9ICdXaW5OVCcpXQogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJExpc3RHcm91cHMsCiAgICAgICAgW1BhcmFtZXRlcihQYXJhbWV0ZXJTZXROYW1lID0gJ1dpbk5UJyldCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkUmVjdXJzZSwKICAgICAgICBbUGFyYW1ldGVyKFBhcmFtZXRlclNldE5hbWUgPSAnQVBJJyldCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkQVBJCiAgICApCiAgICBwcm9jZXNzIHsKICAgICAgICAkU2VydmVycyA9IEAoKQogICAgICAgIAogICAgICAgIGlmKCRDb21wdXRlckZpbGUpIHsKICAgICAgICAgICAgJFNlcnZlcnMgPSBHZXQtQ29udGVudCAtUGF0aCAkQ29tcHV0ZXJGaWxlCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAKICAgICAgICAgICAgJFNlcnZlcnMgKz0gJENvbXB1dGVyTmFtZSB8IEdldC1OYW1lRmllbGQKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgRm9yRWFjaCgkU2VydmVyIGluICRTZXJ2ZXJzKSB7CiAgICAgICAgICAgIGlmKCRBUEkpIHsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkUXVlcnlMZXZlbCA9IDIKICAgICAgICAgICAgICAgICRQdHJJbmZvID0gW0ludFB0cl06Olplcm8KICAgICAgICAgICAgICAgICRFbnRyaWVzUmVhZCA9IDAKICAgICAgICAgICAgICAgICRUb3RhbFJlYWQgPSAwCiAgICAgICAgICAgICAgICAkUmVzdW1lSGFuZGxlID0gMAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkUmVzdWx0ID0gJE5ldGFwaTMyOjpOZXRMb2NhbEdyb3VwR2V0TWVtYmVycygkU2VydmVyLCAkR3JvdXBOYW1lLCAkUXVlcnlMZXZlbCwgW3JlZl0kUHRySW5mbywgLTEsIFtyZWZdJEVudHJpZXNSZWFkLCBbcmVmXSRUb3RhbFJlYWQsIFtyZWZdJFJlc3VtZUhhbmRsZSkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJE9mZnNldCA9ICRQdHJJbmZvLlRvSW50NjQoKQogICAgICAgICAgICAgICAgJExvY2FsVXNlcnMgPSBAKCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgKCgkUmVzdWx0IC1lcSAwKSAtYW5kICgkT2Zmc2V0IC1ndCAwKSkgewogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICRJbmNyZW1lbnQgPSAkTE9DQUxHUk9VUF9NRU1CRVJTX0lORk9fMjo6R2V0U2l6ZSgpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZm9yICgkaSA9IDA7ICgkaSAtbHQgJEVudHJpZXNSZWFkKTsgJGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgJE5ld0ludFB0ciA9IE5ldy1PYmplY3QgU3lzdGVtLkludHB0ciAtQXJndW1lbnRMaXN0ICRPZmZzZXQKICAgICAgICAgICAgICAgICAgICAgICAgJEluZm8gPSAkTmV3SW50UHRyIC1hcyAkTE9DQUxHUk9VUF9NRU1CRVJTX0lORk9fMgogICAgICAgICAgICAgICAgICAgICAgICAkT2Zmc2V0ID0gJE5ld0ludFB0ci5Ub0ludDY0KCkKICAgICAgICAgICAgICAgICAgICAgICAgJE9mZnNldCArPSAkSW5jcmVtZW50CiAgICAgICAgICAgICAgICAgICAgICAgICRTaWRTdHJpbmcgPSAiIgogICAgICAgICAgICAgICAgICAgICAgICAkUmVzdWx0MiA9ICRBZHZhcGkzMjo6Q29udmVydFNpZFRvU3RyaW5nU2lkKCRJbmZvLmxncm1pMl9zaWQsIFtyZWZdJFNpZFN0cmluZyk7JExhc3RFcnJvciA9IFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6R2V0TGFzdFdpbjMyRXJyb3IoKQogICAgICAgICAgICAgICAgICAgICAgICBpZigkUmVzdWx0MiAtZXEgMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXJyb3I6ICQoKFtDb21wb25lbnRNb2RlbC5XaW4zMkV4Y2VwdGlvbl0gJExhc3RFcnJvcikuTWVzc2FnZSkiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWxVc2VyID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRTZXJ2ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbFVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQWNjb3VudE5hbWUnICRJbmZvLmxncm1pMl9kb21haW5hbmRuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWxVc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NJRCcgJFNpZFN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJElzR3JvdXAgPSAkKCRJbmZvLmxncm1pMl9zaWR1c2FnZSAtZXEgJ1NpZFR5cGVHcm91cCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWxVc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lzR3JvdXAnICRJc0dyb3VwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTG9jYWxVc2VyLlBTT2JqZWN0LlR5cGVOYW1lcy5BZGQoJ1Bvd2VyVmlldy5Mb2NhbFVzZXJBUEknKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJExvY2FsVXNlcnMgKz0gJExvY2FsVXNlcgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICROdWxsID0gJE5ldGFwaTMyOjpOZXRBcGlCdWZmZXJGcmVlKCRQdHJJbmZvKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICRNYWNoaW5lU2lkID0gJExvY2FsVXNlcnMgfCBXaGVyZS1PYmplY3QgeyRfLlNJRCAtbGlrZSAnKi01MDAnfQogICAgICAgICAgICAgICAgICAgICRQYXJ0cyA9ICRNYWNoaW5lU2lkLlNJRC5TcGxpdCgnLScpCiAgICAgICAgICAgICAgICAgICAgJE1hY2hpbmVTaWQgPSAkUGFydHNbMC4uKCRQYXJ0cy5MZW5ndGggLTIpXSAtam9pbiAnLScKICAgICAgICAgICAgICAgICAgICAkTG9jYWxVc2VycyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoJF8uU0lEIC1tYXRjaCAkTWFjaGluZVNpZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJF8gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSXNEb21haW4nICRGYWxzZQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJF8gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSXNEb21haW4nICRUcnVlCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgJExvY2FsVXNlcnMKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkVycm9yOiAkKChbQ29tcG9uZW50TW9kZWwuV2luMzJFeGNlcHRpb25dICRSZXN1bHQpLk1lc3NhZ2UpIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIGlmKCRMaXN0R3JvdXBzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAkQ29tcHV0ZXIgPSBbQURTSV0iV2luTlQ6Ly8kU2VydmVyLGNvbXB1dGVyIgogICAgICAgICAgICAgICAgICAgICAgICAkQ29tcHV0ZXIucHNiYXNlLmNoaWxkcmVuIHwgV2hlcmUtT2JqZWN0IHsgJF8ucHNiYXNlLnNjaGVtYUNsYXNzTmFtZSAtZXEgJ2dyb3VwJyB9IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NlcnZlcicgJFNlcnZlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dyb3VwJyAoJF8ubmFtZVswXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdTSUQnICgoTmV3LU9iamVjdCBTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLlNlY3VyaXR5SWRlbnRpZmllciAkXy5vYmplY3RzaWRbMF0sMCkuVmFsdWUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXAgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnRGVzY3JpcHRpb24nICgkXy5EZXNjcmlwdGlvblswXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRHcm91cC5QU09iamVjdC5UeXBlTmFtZXMuQWRkKCdQb3dlclZpZXcuTG9jYWxHcm91cCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXAKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJzID0gQCgkKFtBRFNJXSJXaW5OVDovLyRTZXJ2ZXIvJEdyb3VwTmFtZSxncm91cCIpLnBzYmFzZS5JbnZva2UoJ01lbWJlcnMnKSkKICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlcnMgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRTZXJ2ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRBZHNQYXRoID0gKCRfLkdldFR5cGUoKS5JbnZva2VNZW1iZXIoJ0Fkc3BhdGgnLCAnR2V0UHJvcGVydHknLCAkTnVsbCwgJF8sICROdWxsKSkuUmVwbGFjZSgnV2luTlQ6Ly8nLCAnJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRDbGFzcyA9ICRfLkdldFR5cGUoKS5JbnZva2VNZW1iZXIoJ0NsYXNzJywgJ0dldFByb3BlcnR5JywgJE51bGwsICRfLCAkTnVsbCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE5hbWUgPSBDb252ZXJ0LUFETmFtZSAtT2JqZWN0TmFtZSAkQWRzUGF0aCAtSW5wdXRUeXBlICdOVDQnIC1PdXRwdXRUeXBlICdDYW5vbmljYWwnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkSXNHcm91cCA9ICRDbGFzcyAtZXEgIkdyb3VwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJE5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRlFETiA9ICROYW1lLnNwbGl0KCIvIilbMF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkT2JqTmFtZSA9ICRBZHNQYXRoLnNwbGl0KCIvIilbLTFdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE5hbWUgPSAiJEZRRE4vJE9iak5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJElzRG9tYWluID0gJFRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRPYmpOYW1lID0gJEFkc1BhdGguc3BsaXQoIi8iKVstMV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTmFtZSA9ICRBZHNQYXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJElzRG9tYWluID0gJEZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0FjY291bnROYW1lJyAkTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJc0RvbWFpbicgJElzRG9tYWluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lzR3JvdXAnICRJc0dyb3VwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkSXNEb21haW4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NJRCcgKChOZXctT2JqZWN0IFN5c3RlbS5TZWN1cml0eS5QcmluY2lwYWwuU2VjdXJpdHlJZGVudGlmaWVyKCRfLkdldFR5cGUoKS5JbnZva2VNZW1iZXIoJ09iamVjdFNJRCcsICdHZXRQcm9wZXJ0eScsICROdWxsLCAkXywgJE51bGwpLDApKS5WYWx1ZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0Rlc2NyaXB0aW9uJyAiIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnRGlzYWJsZWQnICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJElzR3JvdXApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdMYXN0TG9naW4nICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdMYXN0TG9naW4nICggJF8uR2V0VHlwZSgpLkludm9rZU1lbWJlcignTGFzdExvZ2luJywgJ0dldFByb3BlcnR5JywgJE51bGwsICRfLCAkTnVsbCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdMYXN0TG9naW4nICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdQd2RMYXN0U2V0JyAiIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUHdkRXhwaXJlZCcgIiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJGbGFncycgIiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRMb2NhbFVzZXIgPSAkKFtBRFNJXSAiV2luTlQ6Ly8kQWRzUGF0aCIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdTSUQnICgoTmV3LU9iamVjdCBTeXN0ZW0uU2VjdXJpdHkuUHJpbmNpcGFsLlNlY3VyaXR5SWRlbnRpZmllcigkTG9jYWxVc2VyLm9iamVjdFNpZC52YWx1ZSwwKSkuVmFsdWUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdEZXNjcmlwdGlvbicgKCRMb2NhbFVzZXIuRGVzY3JpcHRpb25bMF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJElzR3JvdXApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdQd2RMYXN0U2V0JyAiIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1B3ZEV4cGlyZWQnICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlckZsYWdzJyAiIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0Rpc2FibGVkJyAiIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0xhc3RMb2dpbicgIiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUHdkTGFzdFNldCcgKCAoR2V0LURhdGUpLkFkZFNlY29uZHMoLSRMb2NhbFVzZXIuUGFzc3dvcmRBZ2VbMF0pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1B3ZEV4cGlyZWQnICggJExvY2FsVXNlci5QYXNzd29yZEV4cGlyZWRbMF0gLWVxICcxJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyRmxhZ3MnICggJExvY2FsVXNlci5Vc2VyRmxhZ3NbMF0gKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdEaXNhYmxlZCcgJCgoJExvY2FsVXNlci51c2VyRmxhZ3MudmFsdWUgLWJhbmQgMikgLWVxIDIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0xhc3RMb2dpbicgKCAkTG9jYWxVc2VyLkxhc3RMb2dpblswXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0xhc3RMb2dpbicgIiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIuUFNPYmplY3QuVHlwZU5hbWVzLkFkZCgnUG93ZXJWaWV3LkxvY2FsVXNlcicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFJlY3Vyc2UgLWFuZCAkSXNHcm91cCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRJc0RvbWFpbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEZRRE4gPSAkTmFtZS5zcGxpdCgiLyIpWzBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkR3JvdXBOYW1lID0gJE5hbWUuc3BsaXQoIi8iKVsxXS50cmltKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldC1OZXRHcm91cE1lbWJlciAtR3JvdXBOYW1lICRHcm91cE5hbWUgLURvbWFpbiAkRlFETiAtRnVsbERhdGEgLVJlY3Vyc2UgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgIiRGUUROLyQoJF8uR3JvdXBOYW1lKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyRE4gPSAkXy5kaXN0aW5ndWlzaGVkTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJEb21haW4gPSAkTWVtYmVyRE4uc3ViU3RyaW5nKCRNZW1iZXJETi5JbmRleE9mKCJEQz0iKSkgLXJlcGxhY2UgJ0RDPScsJycgLXJlcGxhY2UgJywnLCcuJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJJc0dyb3VwID0gQCgnMjY4NDM1NDU2JywnMjY4NDM1NDU3JywnNTM2ODcwOTEyJywnNTM2ODcwOTEzJykgLWNvbnRhaW5zICRfLnNhbWFjY291bnR0eXBlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRfLnNhbUFjY291bnROYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyTmFtZSA9ICRfLnNhbUFjY291bnROYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXJOYW1lID0gQ29udmVydC1TaWRUb05hbWUgJF8uY24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyTmFtZSA9ICRfLmNuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtRGVidWcgIkVycm9yIHJlc29sdmluZyBTSUQgOiAkXyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0FjY291bnROYW1lJyAiJE1lbWJlckRvbWFpbi8kTWVtYmVyTmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NJRCcgJF8ub2JqZWN0c2lkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdEZXNjcmlwdGlvbicgJF8uZGVzY3JpcHRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0Rpc2FibGVkJyAkRmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lzR3JvdXAnICRNZW1iZXJJc0dyb3VwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJc0RvbWFpbicgJFRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0xhc3RMb2dpbicgJycKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1B3ZExhc3RTZXQnICRfLnB3ZExhc3RTZXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkTWVtYmVyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1B3ZEV4cGlyZWQnICcnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyRmxhZ3MnICRfLnVzZXJBY2NvdW50Q29udHJvbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRNZW1iZXIuUFNPYmplY3QuVHlwZU5hbWVzLkFkZCgnUG93ZXJWaWV3LkxvY2FsVXNlcicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJE1lbWJlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldC1OZXRMb2NhbEdyb3VwIC1Db21wdXRlck5hbWUgJFNlcnZlciAtR3JvdXBOYW1lICRPYmpOYW1lIC1SZWN1cnNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1XYXJuaW5nICJbIV0gRXJyb3I6ICRfIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9
ZmlsdGVyIEdldC1OZXRTaGFyZSB7CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdIb3N0TmFtZScpXQogICAgICAgIFtPYmplY3RbXV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgICRDb21wdXRlck5hbWUgPSAnbG9jYWxob3N0JwogICAgKQogICAgCiAgICAkQ29tcHV0ZXIgPSAkQ29tcHV0ZXJOYW1lIHwgR2V0LU5hbWVGaWVsZAogICAgCiAgICAkUXVlcnlMZXZlbCA9IDEKICAgICRQdHJJbmZvID0gW0ludFB0cl06Olplcm8KICAgICRFbnRyaWVzUmVhZCA9IDAKICAgICRUb3RhbFJlYWQgPSAwCiAgICAkUmVzdW1lSGFuZGxlID0gMAogICAgCiAgICAkUmVzdWx0ID0gJE5ldGFwaTMyOjpOZXRTaGFyZUVudW0oJENvbXB1dGVyLCAkUXVlcnlMZXZlbCwgW3JlZl0kUHRySW5mbywgLTEsIFtyZWZdJEVudHJpZXNSZWFkLCBbcmVmXSRUb3RhbFJlYWQsIFtyZWZdJFJlc3VtZUhhbmRsZSkKICAgIAogICAgJE9mZnNldCA9ICRQdHJJbmZvLlRvSW50NjQoKQogICAgCiAgICBpZiAoKCRSZXN1bHQgLWVxIDApIC1hbmQgKCRPZmZzZXQgLWd0IDApKSB7CiAgICAgICAgCiAgICAgICAgJEluY3JlbWVudCA9ICRTSEFSRV9JTkZPXzE6OkdldFNpemUoKQogICAgICAgIAogICAgICAgIGZvciAoJGkgPSAwOyAoJGkgLWx0ICRFbnRyaWVzUmVhZCk7ICRpKyspIHsKICAgICAgICAgICAgCiAgICAgICAgICAgICROZXdJbnRQdHIgPSBOZXctT2JqZWN0IFN5c3RlbS5JbnRwdHIgLUFyZ3VtZW50TGlzdCAkT2Zmc2V0CiAgICAgICAgICAgICRJbmZvID0gJE5ld0ludFB0ciAtYXMgJFNIQVJFX0lORk9fMQogICAgICAgICAgICAKICAgICAgICAgICAgJFNoYXJlcyA9ICRJbmZvIHwgU2VsZWN0LU9iamVjdCAqCiAgICAgICAgICAgICRTaGFyZXMgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkQ29tcHV0ZXIKICAgICAgICAgICAgJE9mZnNldCA9ICROZXdJbnRQdHIuVG9JbnQ2NCgpCiAgICAgICAgICAgICRPZmZzZXQgKz0gJEluY3JlbWVudAogICAgICAgICAgICAkU2hhcmVzCiAgICAgICAgfQogICAgICAgIAogICAgICAgICROdWxsID0gJE5ldGFwaTMyOjpOZXRBcGlCdWZmZXJGcmVlKCRQdHJJbmZvKQogICAgfQogICAgZWxzZSB7CiAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXJyb3I6ICQoKFtDb21wb25lbnRNb2RlbC5XaW4zMkV4Y2VwdGlvbl0gJFJlc3VsdCkuTWVzc2FnZSkiCiAgICB9Cn0=
ZmlsdGVyIEdldC1OZXRMb2dnZWRvbiB7CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdIb3N0TmFtZScpXQogICAgICAgIFtPYmplY3RbXV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgICRDb21wdXRlck5hbWUgPSAnbG9jYWxob3N0JwogICAgKQogICAgCiAgICAkQ29tcHV0ZXIgPSAkQ29tcHV0ZXJOYW1lIHwgR2V0LU5hbWVGaWVsZAogICAgCiAgICAkUXVlcnlMZXZlbCA9IDEKICAgICRQdHJJbmZvID0gW0ludFB0cl06Olplcm8KICAgICRFbnRyaWVzUmVhZCA9IDAKICAgICRUb3RhbFJlYWQgPSAwCiAgICAkUmVzdW1lSGFuZGxlID0gMAogICAgCiAgICAkUmVzdWx0ID0gJE5ldGFwaTMyOjpOZXRXa3N0YVVzZXJFbnVtKCRDb21wdXRlciwgJFF1ZXJ5TGV2ZWwsIFtyZWZdJFB0ckluZm8sIC0xLCBbcmVmXSRFbnRyaWVzUmVhZCwgW3JlZl0kVG90YWxSZWFkLCBbcmVmXSRSZXN1bWVIYW5kbGUpCiAgICAKICAgICRPZmZzZXQgPSAkUHRySW5mby5Ub0ludDY0KCkKICAgIAogICAgaWYgKCgkUmVzdWx0IC1lcSAwKSAtYW5kICgkT2Zmc2V0IC1ndCAwKSkgewogICAgICAgIAogICAgICAgICRJbmNyZW1lbnQgPSAkV0tTVEFfVVNFUl9JTkZPXzE6OkdldFNpemUoKQogICAgICAgIAogICAgICAgIGZvciAoJGkgPSAwOyAoJGkgLWx0ICRFbnRyaWVzUmVhZCk7ICRpKyspIHsKICAgICAgICAgICAgCiAgICAgICAgICAgICROZXdJbnRQdHIgPSBOZXctT2JqZWN0IFN5c3RlbS5JbnRwdHIgLUFyZ3VtZW50TGlzdCAkT2Zmc2V0CiAgICAgICAgICAgICRJbmZvID0gJE5ld0ludFB0ciAtYXMgJFdLU1RBX1VTRVJfSU5GT18xCiAgICAgICAgICAgIAogICAgICAgICAgICAkTG9nZ2VkT24gPSAkSW5mbyB8IFNlbGVjdC1PYmplY3QgKgogICAgICAgICAgICAkTG9nZ2VkT24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkQ29tcHV0ZXIKICAgICAgICAgICAgJE9mZnNldCA9ICROZXdJbnRQdHIuVG9JbnQ2NCgpCiAgICAgICAgICAgICRPZmZzZXQgKz0gJEluY3JlbWVudAogICAgICAgICAgICAkTG9nZ2VkT24KICAgICAgICB9CiAgICAgICAgCiAgICAgICAgJE51bGwgPSAkTmV0YXBpMzI6Ok5ldEFwaUJ1ZmZlckZyZWUoJFB0ckluZm8pCiAgICB9CiAgICBlbHNlIHsKICAgICAgICBXcml0ZS1WZXJib3NlICJFcnJvcjogJCgoW0NvbXBvbmVudE1vZGVsLldpbjMyRXhjZXB0aW9uXSAkUmVzdWx0KS5NZXNzYWdlKSIKICAgIH0KfQ==
ZmlsdGVyIEdldC1OZXRTZXNzaW9uIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJyldCiAgICAgICAgW09iamVjdFtdXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICdsb2NhbGhvc3QnLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFVzZXJOYW1lID0gJycKICAgICkKICAgIAogICAgJENvbXB1dGVyID0gJENvbXB1dGVyTmFtZSB8IEdldC1OYW1lRmllbGQKICAgIAogICAgJFF1ZXJ5TGV2ZWwgPSAxMAogICAgJFB0ckluZm8gPSBbSW50UHRyXTo6WmVybwogICAgJEVudHJpZXNSZWFkID0gMAogICAgJFRvdGFsUmVhZCA9IDAKICAgICRSZXN1bWVIYW5kbGUgPSAwCiAgICAKICAgICRSZXN1bHQgPSAkTmV0YXBpMzI6Ok5ldFNlc3Npb25FbnVtKCRDb21wdXRlciwgJycsICRVc2VyTmFtZSwgJFF1ZXJ5TGV2ZWwsIFtyZWZdJFB0ckluZm8sIC0xLCBbcmVmXSRFbnRyaWVzUmVhZCwgW3JlZl0kVG90YWxSZWFkLCBbcmVmXSRSZXN1bWVIYW5kbGUpCiAgICAKICAgICRPZmZzZXQgPSAkUHRySW5mby5Ub0ludDY0KCkKICAgIAogICAgaWYgKCgkUmVzdWx0IC1lcSAwKSAtYW5kICgkT2Zmc2V0IC1ndCAwKSkgewogICAgICAgIAogICAgICAgICRJbmNyZW1lbnQgPSAkU0VTU0lPTl9JTkZPXzEwOjpHZXRTaXplKCkKICAgICAgICAKICAgICAgICBmb3IgKCRpID0gMDsgKCRpIC1sdCAkRW50cmllc1JlYWQpOyAkaSsrKSB7CiAgICAgICAgICAgIAogICAgICAgICAgICAkTmV3SW50UHRyID0gTmV3LU9iamVjdCBTeXN0ZW0uSW50cHRyIC1Bcmd1bWVudExpc3QgJE9mZnNldAogICAgICAgICAgICAkSW5mbyA9ICROZXdJbnRQdHIgLWFzICRTRVNTSU9OX0lORk9fMTAKICAgICAgICAgICAgCiAgICAgICAgICAgICRTZXNzaW9ucyA9ICRJbmZvIHwgU2VsZWN0LU9iamVjdCAqCiAgICAgICAgICAgICRTZXNzaW9ucyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRDb21wdXRlcgogICAgICAgICAgICAkT2Zmc2V0ID0gJE5ld0ludFB0ci5Ub0ludDY0KCkKICAgICAgICAgICAgJE9mZnNldCArPSAkSW5jcmVtZW50CiAgICAgICAgICAgICRTZXNzaW9ucwogICAgICAgIH0KICAgICAgICAKICAgICAgICAkTnVsbCA9ICROZXRhcGkzMjo6TmV0QXBpQnVmZmVyRnJlZSgkUHRySW5mbykKICAgIH0KICAgIGVsc2UgewogICAgICAgIFdyaXRlLVZlcmJvc2UgIkVycm9yOiAkKChbQ29tcG9uZW50TW9kZWwuV2luMzJFeGNlcHRpb25dICRSZXN1bHQpLk1lc3NhZ2UpIgogICAgfQp9
ZmlsdGVyIEdldC1Mb2dnZWRPbkxvY2FsIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJyldCiAgICAgICAgW09iamVjdFtdXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICdsb2NhbGhvc3QnCiAgICApCiAgICAKICAgICRDb21wdXRlck5hbWUgPSBHZXQtTmFtZUZpZWxkIC1PYmplY3QgJENvbXB1dGVyTmFtZQogICAgdHJ5IHsKICAgICAgICAKICAgICAgICAkUmVnID0gW01pY3Jvc29mdC5XaW4zMi5SZWdpc3RyeUtleV06Ok9wZW5SZW1vdGVCYXNlS2V5KCdVc2VycycsICIkQ29tcHV0ZXJOYW1lIikKICAgICAgICAKICAgICAgICAkUmVnLkdldFN1YktleU5hbWVzKCkgfCBXaGVyZS1PYmplY3QgeyAkXyAtbWF0Y2ggJ1MtMS01LTIxLVswLTldKy1bMC05XSstWzAtOV0rLVswLTldKyQnIH0gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICRVc2VyTmFtZSA9IENvbnZlcnQtU2lkVG9OYW1lICRfCiAgICAgICAgICAgICRQYXJ0cyA9ICRVc2VyTmFtZS5TcGxpdCgnXCcpCiAgICAgICAgICAgICRVc2VyRG9tYWluID0gJE51bGwKICAgICAgICAgICAgJFVzZXJOYW1lID0gJFBhcnRzWy0xXQogICAgICAgICAgICBpZiAoJFBhcnRzLkxlbmd0aCAtZXEgMikgewogICAgICAgICAgICAgICAgJFVzZXJEb21haW4gPSAkUGFydHNbMF0KICAgICAgICAgICAgfQogICAgICAgICAgICAkTG9jYWxMb2dnZWRPblVzZXIgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICRMb2NhbExvZ2dlZE9uVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICIkQ29tcHV0ZXJOYW1lIgogICAgICAgICAgICAkTG9jYWxMb2dnZWRPblVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlckRvbWFpbicgJFVzZXJEb21haW4KICAgICAgICAgICAgJExvY2FsTG9nZ2VkT25Vc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJOYW1lJyAkVXNlck5hbWUKICAgICAgICAgICAgJExvY2FsTG9nZ2VkT25Vc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJTSUQnICRfCiAgICAgICAgICAgICRMb2NhbExvZ2dlZE9uVXNlcgogICAgICAgIH0KICAgIH0KICAgIGNhdGNoIHsKICAgICAgICBXcml0ZS1WZXJib3NlICJFcnJvciBvcGVuaW5nIHJlbW90ZSByZWdpc3RyeSBvbiAnJENvbXB1dGVyTmFtZSciCiAgICB9Cn0=
ZmlsdGVyIEdldC1OZXRSRFBTZXNzaW9uIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJyldCiAgICAgICAgW09iamVjdFtdXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICdsb2NhbGhvc3QnCiAgICApCiAgICAKICAgICRDb21wdXRlciA9ICRDb21wdXRlck5hbWUgfCBHZXQtTmFtZUZpZWxkCiAgICAKICAgICRIYW5kbGUgPSAkV3RzYXBpMzI6OldUU09wZW5TZXJ2ZXJFeCgkQ29tcHV0ZXIpCiAgICAKICAgIGlmICgkSGFuZGxlIC1uZSAwKSB7CiAgICAgICAgCiAgICAgICAgJHBwU2Vzc2lvbkluZm8gPSBbSW50UHRyXTo6WmVybwogICAgICAgICRwQ291bnQgPSAwCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgJFJlc3VsdCA9ICRXdHNhcGkzMjo6V1RTRW51bWVyYXRlU2Vzc2lvbnNFeCgkSGFuZGxlLCBbcmVmXTEsIDAsIFtyZWZdJHBwU2Vzc2lvbkluZm8sIFtyZWZdJHBDb3VudCk7JExhc3RFcnJvciA9IFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6R2V0TGFzdFdpbjMyRXJyb3IoKQogICAgICAgIAogICAgICAgICRPZmZzZXQgPSAkcHBTZXNzaW9uSW5mby5Ub0ludDY0KCkKICAgICAgICBpZiAoKCRSZXN1bHQgLW5lIDApIC1hbmQgKCRPZmZzZXQgLWd0IDApKSB7CiAgICAgICAgICAgIAogICAgICAgICAgICAkSW5jcmVtZW50ID0gJFdUU19TRVNTSU9OX0lORk9fMTo6R2V0U2l6ZSgpCiAgICAgICAgICAgIAogICAgICAgICAgICBmb3IgKCRpID0gMDsgKCRpIC1sdCAkcENvdW50KTsgJGkrKykgewogCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICROZXdJbnRQdHIgPSBOZXctT2JqZWN0IFN5c3RlbS5JbnRwdHIgLUFyZ3VtZW50TGlzdCAkT2Zmc2V0CiAgICAgICAgICAgICAgICAkSW5mbyA9ICROZXdJbnRQdHIgLWFzICRXVFNfU0VTU0lPTl9JTkZPXzEKICAgICAgICAgICAgICAgICRSRFBTZXNzaW9uID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgaWYgKCRJbmZvLnBIb3N0TmFtZSkgewogICAgICAgICAgICAgICAgICAgICRSRFBTZXNzaW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJEluZm8ucEhvc3ROYW1lCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAkUkRQU2Vzc2lvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRDb21wdXRlcgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJFJEUFNlc3Npb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU2Vzc2lvbk5hbWUnICRJbmZvLnBTZXNzaW9uTmFtZQogICAgICAgICAgICAgICAgaWYgKCQoLW5vdCAkSW5mby5wRG9tYWluTmFtZSkgLW9yICgkSW5mby5wRG9tYWluTmFtZSAtZXEgJycpKSB7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgJFJEUFNlc3Npb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlck5hbWUnICIkKCRJbmZvLnBVc2VyTmFtZSkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkUkRQU2Vzc2lvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyTmFtZScgIiQoJEluZm8ucERvbWFpbk5hbWUpXCQoJEluZm8ucFVzZXJOYW1lKSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRSRFBTZXNzaW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lEJyAkSW5mby5TZXNzaW9uSUQKICAgICAgICAgICAgICAgICRSRFBTZXNzaW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1N0YXRlJyAkSW5mby5TdGF0ZQogICAgICAgICAgICAgICAgJHBwQnVmZmVyID0gW0ludFB0cl06Olplcm8KICAgICAgICAgICAgICAgICRwQnl0ZXNSZXR1cm5lZCA9IDAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkUmVzdWx0MiA9ICRXdHNhcGkzMjo6V1RTUXVlcnlTZXNzaW9uSW5mb3JtYXRpb24oJEhhbmRsZSwgJEluZm8uU2Vzc2lvbklELCAxNCwgW3JlZl0kcHBCdWZmZXIsIFtyZWZdJHBCeXRlc1JldHVybmVkKTskTGFzdEVycm9yMiA9IFtSdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6R2V0TGFzdFdpbjMyRXJyb3IoKQogICAgICAgICAgICAgICAgaWYoJFJlc3VsdCAtZXEgMCkgewogICAgICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkVycm9yOiAkKChbQ29tcG9uZW50TW9kZWwuV2luMzJFeGNlcHRpb25dICRMYXN0RXJyb3IyKS5NZXNzYWdlKSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICRPZmZzZXQyID0gJHBwQnVmZmVyLlRvSW50NjQoKQogICAgICAgICAgICAgICAgICAgICROZXdJbnRQdHIyID0gTmV3LU9iamVjdCBTeXN0ZW0uSW50cHRyIC1Bcmd1bWVudExpc3QgJE9mZnNldDIKICAgICAgICAgICAgICAgICAgICAkSW5mbzIgPSAkTmV3SW50UHRyMiAtYXMgJFdUU19DTElFTlRfQUREUkVTUwogICAgICAgICAgICAgICAgICAgICRTb3VyY2VJUCA9ICRJbmZvMi5BZGRyZXNzICAgICAgIAogICAgICAgICAgICAgICAgICAgIGlmKCRTb3VyY2VJUFsyXSAtbmUgMCkgewogICAgICAgICAgICAgICAgICAgICAgICAkU291cmNlSVAgPSBbU3RyaW5nXSRTb3VyY2VJUFsyXSsiLiIrW1N0cmluZ10kU291cmNlSVBbM10rIi4iK1tTdHJpbmddJFNvdXJjZUlQWzRdKyIuIitbU3RyaW5nXSRTb3VyY2VJUFs1XQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFNvdXJjZUlQID0gJE51bGwKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgJFJEUFNlc3Npb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU291cmNlSVAnICRTb3VyY2VJUAogICAgICAgICAgICAgICAgICAgICRSRFBTZXNzaW9uCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgJE51bGwgPSAkV3RzYXBpMzI6OldUU0ZyZWVNZW1vcnkoJHBwQnVmZmVyKQogICAgICAgICAgICAgICAgICAgICRPZmZzZXQgKz0gJEluY3JlbWVudAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAkTnVsbCA9ICRXdHNhcGkzMjo6V1RTRnJlZU1lbW9yeUV4KDIsICRwcFNlc3Npb25JbmZvLCAkcENvdW50KQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXJyb3I6ICQoKFtDb21wb25lbnRNb2RlbC5XaW4zMkV4Y2VwdGlvbl0gJExhc3RFcnJvcikuTWVzc2FnZSkiCiAgICAgICAgfQogICAgICAgIAogICAgICAgICROdWxsID0gJFd0c2FwaTMyOjpXVFNDbG9zZVNlcnZlcigkSGFuZGxlKQogICAgfQogICAgZWxzZSB7CiAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXJyb3Igb3BlbmluZyB0aGUgUmVtb3RlIERlc2t0b3AgU2Vzc2lvbiBIb3N0IChSRCBTZXNzaW9uIEhvc3QpIHNlcnZlciBmb3I6ICRDb21wdXRlck5hbWUiCiAgICB9Cn0=
ZmlsdGVyIEludm9rZS1DaGVja0xvY2FsQWRtaW5BY2Nlc3MgewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnKV0KICAgICAgICBbT2JqZWN0W11dCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJ2xvY2FsaG9zdCcKICAgICkKICAgIAogICAgJENvbXB1dGVyID0gJENvbXB1dGVyTmFtZSB8IEdldC1OYW1lRmllbGQKICAgIAogICAgCiAgICAkSGFuZGxlID0gJEFkdmFwaTMyOjpPcGVuU0NNYW5hZ2VyVygiXFwkQ29tcHV0ZXIiLCAnU2VydmljZXNBY3RpdmUnLCAweEYwMDNGKTskTGFzdEVycm9yID0gW1J1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpHZXRMYXN0V2luMzJFcnJvcigpCiAgICBXcml0ZS1WZXJib3NlICJJbnZva2UtQ2hlY2tMb2NhbEFkbWluQWNjZXNzIGhhbmRsZTogJEhhbmRsZSIKICAgICRJc0FkbWluID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgJElzQWRtaW4gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkQ29tcHV0ZXIKICAgIAogICAgaWYgKCRIYW5kbGUgLW5lIDApIHsKICAgICAgICAkTnVsbCA9ICRBZHZhcGkzMjo6Q2xvc2VTZXJ2aWNlSGFuZGxlKCRIYW5kbGUpCiAgICAgICAgJElzQWRtaW4gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnSXNBZG1pbicgJFRydWUKICAgIH0KICAgIGVsc2UgewogICAgICAgIFdyaXRlLVZlcmJvc2UgIkVycm9yOiAkKChbQ29tcG9uZW50TW9kZWwuV2luMzJFeGNlcHRpb25dICRMYXN0RXJyb3IpLk1lc3NhZ2UpIgogICAgICAgICRJc0FkbWluIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0lzQWRtaW4nICRGYWxzZQogICAgfQogICAgJElzQWRtaW4KfQ==
ZmlsdGVyIEdldC1TaXRlTmFtZSB7CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdIb3N0TmFtZScpXQogICAgICAgIFtPYmplY3RbXV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgICRDb21wdXRlck5hbWUgPSAkRW52OkNvbXB1dGVyTmFtZQogICAgKQogICAgCiAgICAkQ29tcHV0ZXIgPSAkQ29tcHV0ZXJOYW1lIHwgR2V0LU5hbWVGaWVsZAogICAgCiAgICBpZigkQ29tcHV0ZXIgLW1hdGNoICdeKD86WzAtOV17MSwzfVwuKXszfVswLTldezEsM30kJykgewogICAgICAgICRJUEFkZHJlc3MgPSAkQ29tcHV0ZXIKICAgICAgICAkQ29tcHV0ZXIgPSBbU3lzdGVtLk5ldC5EbnNdOjpHZXRIb3N0QnlBZGRyZXNzKCRDb21wdXRlcikKICAgIH0KICAgIGVsc2UgewogICAgICAgICRJUEFkZHJlc3MgPSBAKEdldC1JUEFkZHJlc3MgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXIpWzBdLklQQWRkcmVzcwogICAgfQogICAgJFB0ckluZm8gPSBbSW50UHRyXTo6WmVybwogICAgJFJlc3VsdCA9ICROZXRhcGkzMjo6RHNHZXRTaXRlTmFtZSgkQ29tcHV0ZXIsIFtyZWZdJFB0ckluZm8pCiAgICAkQ29tcHV0ZXJTaXRlID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgJENvbXB1dGVyU2l0ZSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRDb21wdXRlcgogICAgJENvbXB1dGVyU2l0ZSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdJUEFkZHJlc3MnICRJUEFkZHJlc3MKICAgIGlmICgkUmVzdWx0IC1lcSAwKSB7CiAgICAgICAgJFNpdGVuYW1lID0gW1N5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5NYXJzaGFsXTo6UHRyVG9TdHJpbmdBdXRvKCRQdHJJbmZvKQogICAgICAgICRDb21wdXRlclNpdGUgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU2l0ZU5hbWUnICRTaXRlbmFtZQogICAgfQogICAgZWxzZSB7CiAgICAgICAgJEVycm9yTWVzc2FnZSA9ICJFcnJvcjogJCgoW0NvbXBvbmVudE1vZGVsLldpbjMyRXhjZXB0aW9uXSAkUmVzdWx0KS5NZXNzYWdlKSIKICAgICAgICAkQ29tcHV0ZXJTaXRlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NpdGVOYW1lJyAkRXJyb3JNZXNzYWdlCiAgICB9CiAgICAkTnVsbCA9ICROZXRhcGkzMjo6TmV0QXBpQnVmZmVyRnJlZSgkUHRySW5mbykKICAgICRDb21wdXRlclNpdGUKfQ==
ZmlsdGVyIEdldC1MYXN0TG9nZ2VkT24gewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtQYXJhbWV0ZXIoVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdE5hbWUnKV0KICAgICAgICBbT2JqZWN0W11dCiAgICAgICAgW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KICAgICAgICAkQ29tcHV0ZXJOYW1lID0gJ2xvY2FsaG9zdCcsCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKICAgIAogICAgJENvbXB1dGVyID0gJENvbXB1dGVyTmFtZSB8IEdldC1OYW1lRmllbGQKICAgIAogICAgJEhLTE0gPSAyMTQ3NDgzNjUwCiAgICAKICAgIHRyeSB7CiAgICAgICAgaWYoJENyZWRlbnRpYWwpIHsKICAgICAgICAgICAgJFJlZyA9IEdldC1XbWlPYmplY3QgLUxpc3QgJ1N0ZFJlZ1Byb3YnIC1OYW1lc3BhY2Ugcm9vdFxkZWZhdWx0IC1Db21wdXRlcm5hbWUgJENvbXB1dGVyIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkUmVnID0gR2V0LVdtaU9iamVjdCAtTGlzdCAnU3RkUmVnUHJvdicgLU5hbWVzcGFjZSByb290XGRlZmF1bHQgLUNvbXB1dGVybmFtZSAkQ29tcHV0ZXIgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKICAgICAgICB9CiAgICAgICAgJEtleSA9ICJTT0ZUV0FSRVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxBdXRoZW50aWNhdGlvblxMb2dvblVJIgogICAgICAgICRWYWx1ZSA9ICJMYXN0TG9nZ2VkT25Vc2VyIgogICAgICAgICRMYXN0VXNlciA9ICRSZWcuR2V0U3RyaW5nVmFsdWUoJEhLTE0sICRLZXksICRWYWx1ZSkuc1ZhbHVlCiAgICAgICAgJExhc3RMb2dnZWRPbiA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAkTGFzdExvZ2dlZE9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyCiAgICAgICAgJExhc3RMb2dnZWRPbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdMYXN0TG9nZ2VkT24nICRMYXN0VXNlcgogICAgICAgICRMYXN0TG9nZ2VkT24KICAgIH0KICAgIGNhdGNoIHsKICAgICAgICBXcml0ZS1XYXJuaW5nICJbIV0gRXJyb3Igb3BlbmluZyByZW1vdGUgcmVnaXN0cnkgb24gJENvbXB1dGVyLiBSZW1vdGUgcmVnaXN0cnkgbGlrZWx5IG5vdCBlbmFibGVkLiIKICAgIH0KfQ==
ZmlsdGVyIEdldC1DYWNoZWRSRFBDb25uZWN0aW9uIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJyldCiAgICAgICAgW09iamVjdFtdXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgJENvbXB1dGVyTmFtZSA9ICdsb2NhbGhvc3QnLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCiAgICAKICAgICRDb21wdXRlciA9ICRDb21wdXRlck5hbWUgfCBHZXQtTmFtZUZpZWxkCiAgICAKICAgICRIS1UgPSAyMTQ3NDgzNjUxCiAgICB0cnkgewogICAgICAgIGlmKCRDcmVkZW50aWFsKSB7CiAgICAgICAgICAgICRSZWcgPSBHZXQtV21pT2JqZWN0IC1MaXN0ICdTdGRSZWdQcm92JyAtTmFtZXNwYWNlIHJvb3RcZGVmYXVsdCAtQ29tcHV0ZXJuYW1lICRDb21wdXRlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJFJlZyA9IEdldC1XbWlPYmplY3QgLUxpc3QgJ1N0ZFJlZ1Byb3YnIC1OYW1lc3BhY2Ugcm9vdFxkZWZhdWx0IC1Db21wdXRlcm5hbWUgJENvbXB1dGVyIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlCiAgICAgICAgfQogICAgICAgIAogICAgICAgICRVc2VyU0lEcyA9ICgkUmVnLkVudW1LZXkoJEhLVSwgIiIpKS5zTmFtZXMgfCA/IHsgJF8gLW1hdGNoICdTLTEtNS0yMS1bMC05XSstWzAtOV0rLVswLTldKy1bMC05XSskJyB9CiAgICAgICAgZm9yZWFjaCAoJFVzZXJTSUQgaW4gJFVzZXJTSURzKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkVXNlck5hbWUgPSBDb252ZXJ0LVNpZFRvTmFtZSAkVXNlclNJRAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkQ29ubmVjdGlvbktleXMgPSAkUmVnLkVudW1WYWx1ZXMoJEhLVSwiJFVzZXJTSURcU29mdHdhcmVcTWljcm9zb2Z0XFRlcm1pbmFsIFNlcnZlciBDbGllbnRcRGVmYXVsdCIpLnNOYW1lcwogICAgICAgICAgICAgICAgZm9yZWFjaCAoJENvbm5lY3Rpb24gaW4gJENvbm5lY3Rpb25LZXlzKSB7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgaWYoJENvbm5lY3Rpb24gLW1hdGNoICdNUlUuKicpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFRhcmdldFNlcnZlciA9ICRSZWcuR2V0U3RyaW5nVmFsdWUoJEhLVSwgIiRVc2VyU0lEXFNvZnR3YXJlXE1pY3Jvc29mdFxUZXJtaW5hbCBTZXJ2ZXIgQ2xpZW50XERlZmF1bHQiLCAkQ29ubmVjdGlvbikuc1ZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyCiAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZENvbm5lY3Rpb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlck5hbWUnICRVc2VyTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJTSUQnICRVc2VyU0lECiAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZENvbm5lY3Rpb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVGFyZ2V0U2VydmVyJyAkVGFyZ2V0U2VydmVyCiAgICAgICAgICAgICAgICAgICAgICAgICRGb3VuZENvbm5lY3Rpb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlcm5hbWVIaW50JyAkTnVsbAogICAgICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkU2VydmVyS2V5cyA9ICRSZWcuRW51bUtleSgkSEtVLCIkVXNlclNJRFxTb2Z0d2FyZVxNaWNyb3NvZnRcVGVybWluYWwgU2VydmVyIENsaWVudFxTZXJ2ZXJzIikuc05hbWVzCiAgICAgICAgICAgICAgICBmb3JlYWNoICgkU2VydmVyIGluICRTZXJ2ZXJLZXlzKSB7CiAgICAgICAgICAgICAgICAgICAgJFVzZXJuYW1lSGludCA9ICRSZWcuR2V0U3RyaW5nVmFsdWUoJEhLVSwgIiRVc2VyU0lEXFNvZnR3YXJlXE1pY3Jvc29mdFxUZXJtaW5hbCBTZXJ2ZXIgQ2xpZW50XFNlcnZlcnNcJFNlcnZlciIsICdVc2VybmFtZUhpbnQnKS5zVmFsdWUKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uID0gTmV3LU9iamVjdCBQU09iamVjdAogICAgICAgICAgICAgICAgICAgICRGb3VuZENvbm5lY3Rpb24gfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnQ29tcHV0ZXJOYW1lJyAkQ29tcHV0ZXIKICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJOYW1lJyAkVXNlck5hbWUKICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJTSUQnICRVc2VyU0lECiAgICAgICAgICAgICAgICAgICAgJEZvdW5kQ29ubmVjdGlvbiB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdUYXJnZXRTZXJ2ZXInICRTZXJ2ZXIKICAgICAgICAgICAgICAgICAgICAkRm91bmRDb25uZWN0aW9uIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJuYW1lSGludCcgJFVzZXJuYW1lSGludAogICAgICAgICAgICAgICAgICAgICRGb3VuZENvbm5lY3Rpb24gICAKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJFcnJvcjogJF8iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBjYXRjaCB7CiAgICAgICAgV3JpdGUtV2FybmluZyAiRXJyb3IgYWNjZXNzaW5nICRDb21wdXRlciwgbGlrZWx5IGluc3VmZmljaWVudCBwZXJtaXNzaW9ucyBvciBmaXJld2FsbCBydWxlcyBvbiBob3N0OiAkXyIKICAgIH0KfQ==
ZmlsdGVyIEdldC1SZWdpc3RyeU1vdW50ZWREcml2ZSB7CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihWYWx1ZUZyb21QaXBlbGluZT0kVHJ1ZSldCiAgICAgICAgW0FsaWFzKCdIb3N0TmFtZScpXQogICAgICAgIFtPYmplY3RbXV0KICAgICAgICBbVmFsaWRhdGVOb3ROdWxsT3JFbXB0eSgpXQogICAgICAgICRDb21wdXRlck5hbWUgPSAnbG9jYWxob3N0JywKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQogICAgCiAgICAkQ29tcHV0ZXIgPSAkQ29tcHV0ZXJOYW1lIHwgR2V0LU5hbWVGaWVsZAogICAgCiAgICAkSEtVID0gMjE0NzQ4MzY1MQogICAgdHJ5IHsKICAgICAgICBpZigkQ3JlZGVudGlhbCkgewogICAgICAgICAgICAkUmVnID0gR2V0LVdtaU9iamVjdCAtTGlzdCAnU3RkUmVnUHJvdicgLU5hbWVzcGFjZSByb290XGRlZmF1bHQgLUNvbXB1dGVybmFtZSAkQ29tcHV0ZXIgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWUKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRSZWcgPSBHZXQtV21pT2JqZWN0IC1MaXN0ICdTdGRSZWdQcm92JyAtTmFtZXNwYWNlIHJvb3RcZGVmYXVsdCAtQ29tcHV0ZXJuYW1lICRDb21wdXRlciAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZQogICAgICAgIH0KICAgICAgICAKICAgICAgICAkVXNlclNJRHMgPSAoJFJlZy5FbnVtS2V5KCRIS1UsICIiKSkuc05hbWVzIHwgPyB7ICRfIC1tYXRjaCAnUy0xLTUtMjEtWzAtOV0rLVswLTldKy1bMC05XSstWzAtOV0rJCcgfQogICAgICAgIGZvcmVhY2ggKCRVc2VyU0lEIGluICRVc2VyU0lEcykgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgJFVzZXJOYW1lID0gQ29udmVydC1TaWRUb05hbWUgJFVzZXJTSUQKICAgICAgICAgICAgICAgICREcml2ZUxldHRlcnMgPSAoJFJlZy5FbnVtS2V5KCRIS1UsICIkVXNlclNJRFxOZXR3b3JrIikpLnNOYW1lcwogICAgICAgICAgICAgICAgRm9yRWFjaCgkRHJpdmVMZXR0ZXIgaW4gJERyaXZlTGV0dGVycykgewogICAgICAgICAgICAgICAgICAgICRQcm92aWRlck5hbWUgPSAkUmVnLkdldFN0cmluZ1ZhbHVlKCRIS1UsICIkVXNlclNJRFxOZXR3b3JrXCREcml2ZUxldHRlciIsICdQcm92aWRlck5hbWUnKS5zVmFsdWUKICAgICAgICAgICAgICAgICAgICAkUmVtb3RlUGF0aCA9ICRSZWcuR2V0U3RyaW5nVmFsdWUoJEhLVSwgIiRVc2VyU0lEXE5ldHdvcmtcJERyaXZlTGV0dGVyIiwgJ1JlbW90ZVBhdGgnKS5zVmFsdWUKICAgICAgICAgICAgICAgICAgICAkRHJpdmVVc2VyTmFtZSA9ICRSZWcuR2V0U3RyaW5nVmFsdWUoJEhLVSwgIiRVc2VyU0lEXE5ldHdvcmtcJERyaXZlTGV0dGVyIiwgJ1VzZXJOYW1lJykuc1ZhbHVlCiAgICAgICAgICAgICAgICAgICAgaWYoLW5vdCAkVXNlck5hbWUpIHsgJFVzZXJOYW1lID0gJycgfQogICAgICAgICAgICAgICAgICAgIGlmKCRSZW1vdGVQYXRoIC1hbmQgKCRSZW1vdGVQYXRoIC1uZSAnJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJE1vdW50ZWREcml2ZSA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgJE1vdW50ZWREcml2ZSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdDb21wdXRlck5hbWUnICRDb21wdXRlcgogICAgICAgICAgICAgICAgICAgICAgICAkTW91bnRlZERyaXZlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJOYW1lJyAkVXNlck5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJE1vdW50ZWREcml2ZSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyU0lEJyAkVXNlclNJRAogICAgICAgICAgICAgICAgICAgICAgICAkTW91bnRlZERyaXZlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0RyaXZlTGV0dGVyJyAkRHJpdmVMZXR0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgJE1vdW50ZWREcml2ZSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdQcm92aWRlck5hbWUnICRQcm92aWRlck5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJE1vdW50ZWREcml2ZSB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdSZW1vdGVQYXRoJyAkUmVtb3RlUGF0aAogICAgICAgICAgICAgICAgICAgICAgICAkTW91bnRlZERyaXZlIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0RyaXZlVXNlck5hbWUnICREcml2ZVVzZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICRNb3VudGVkRHJpdmUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXJyb3I6ICRfIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgY2F0Y2ggewogICAgICAgIFdyaXRlLVdhcm5pbmcgIkVycm9yIGFjY2Vzc2luZyAkQ29tcHV0ZXIsIGxpa2VseSBpbnN1ZmZpY2llbnQgcGVybWlzc2lvbnMgb3IgZmlyZXdhbGwgcnVsZXMgb24gaG9zdDogJF8iCiAgICB9Cn0=
ZmlsdGVyIEdldC1OZXRQcm9jZXNzIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbQWxpYXMoJ0hvc3ROYW1lJyldCiAgICAgICAgW09iamVjdFtdXQogICAgICAgIFtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldCiAgICAgICAgJENvbXB1dGVyTmFtZSA9IFtTeXN0ZW0uTmV0LkRuc106OkdldEhvc3ROYW1lKCksCiAgICAgICAgW01hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWxdCiAgICAgICAgJENyZWRlbnRpYWwKICAgICkKICAgIAogICAgJENvbXB1dGVyID0gJENvbXB1dGVyTmFtZSB8IEdldC1OYW1lRmllbGQKICAgIHRyeSB7CiAgICAgICAgaWYoJENyZWRlbnRpYWwpIHsKICAgICAgICAgICAgJFByb2Nlc3NlcyA9IEdldC1XTUlvYmplY3QgLUNsYXNzIFdpbjMyX3Byb2Nlc3MgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lIC1DcmVkZW50aWFsICRDcmVkZW50aWFsCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkUHJvY2Vzc2VzID0gR2V0LVdNSW9iamVjdCAtQ2xhc3MgV2luMzJfcHJvY2VzcyAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUKICAgICAgICB9CiAgICAgICAgJFByb2Nlc3NlcyB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgJE93bmVyID0gJF8uZ2V0b3duZXIoKTsKICAgICAgICAgICAgJFByb2Nlc3MgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICRQcm9jZXNzIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0NvbXB1dGVyTmFtZScgJENvbXB1dGVyCiAgICAgICAgICAgICRQcm9jZXNzIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1Byb2Nlc3NOYW1lJyAkXy5Qcm9jZXNzTmFtZQogICAgICAgICAgICAkUHJvY2VzcyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdQcm9jZXNzSUQnICRfLlByb2Nlc3NJRAogICAgICAgICAgICAkUHJvY2VzcyB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdEb21haW4nICRPd25lci5Eb21haW4KICAgICAgICAgICAgJFByb2Nlc3MgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVXNlcicgJE93bmVyLlVzZXIKICAgICAgICAgICAgJFByb2Nlc3MgICAgICAgICAgICAgICAgCiAgICAgICAgfQogICAgfQogICAgY2F0Y2ggewogICAgICAgIFdyaXRlLVZlcmJvc2UgIlshXSBFcnJvciBlbnVtZXJhdGluZyByZW1vdGUgcHJvY2Vzc2VzIG9uICRDb21wdXRlciwgYWNjZXNzIGxpa2VseSBkZW5pZWQ6ICRfIgogICAgfQp9
ZnVuY3Rpb24gRmluZC1JbnRlcmVzdGluZ0ZpbGUgewogICAgCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICRQYXRoID0gJy5cJywKICAgICAgICBbQWxpYXMoJ1Rlcm1zJyldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRTZWFyY2hUZXJtcyA9IEAoJ3Bhc3MnLCAnc2Vuc2l0aXZlJywgJ2FkbWluJywgJ2xvZ2luJywgJ3NlY3JldCcsICd1bmF0dGVuZCoueG1sJywgJy52bWRrJywgJ2NyZWRzJywgJ2NyZWRlbnRpYWwnLCAnLmNvbmZpZycpLAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJE9mZmljZURvY3MsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkRnJlc2hFWEVzLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJExhc3RBY2Nlc3NUaW1lLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJExhc3RXcml0ZVRpbWUsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ3JlYXRpb25UaW1lLAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEV4Y2x1ZGVGb2xkZXJzLAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEV4Y2x1ZGVIaWRkZW4sCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkQ2hlY2tXcml0ZUFjY2VzcywKICAgICAgICBbU3RyaW5nXQogICAgICAgICRPdXRGaWxlLAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFVzZVBTRHJpdmUKICAgICkKICAgIGJlZ2luIHsKICAgICAgICAkUGF0aCArPSBpZighJFBhdGguRW5kc1dpdGgoJ1wnKSkgeyJcIn0KICAgICAgICBpZiAoJENyZWRlbnRpYWwpIHsKICAgICAgICAgICAgJFVzZVBTRHJpdmUgPSAkVHJ1ZQogICAgICAgIH0KICAgICAgICAKICAgICAgICAkU2VhcmNoVGVybXMgPSAkU2VhcmNoVGVybXMgfCBGb3JFYWNoLU9iamVjdCB7IGlmKCRfIC1ub3RtYXRjaCAnXlwqLipcKiQnKSB7IiokKCRfKSoifSBlbHNleyRffSB9CiAgICAgICAgCiAgICAgICAgaWYgKCRPZmZpY2VEb2NzKSB7CiAgICAgICAgICAgICRTZWFyY2hUZXJtcyA9IEAoJyouZG9jJywgJyouZG9jeCcsICcqLnhscycsICcqLnhsc3gnLCAnKi5wcHQnLCAnKi5wcHR4JykKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgaWYoJEZyZXNoRVhFcykgewogICAgICAgICAgICAKICAgICAgICAgICAgJExhc3RBY2Nlc3NUaW1lID0gKEdldC1EYXRlKS5BZGREYXlzKC03KS5Ub1N0cmluZygnTU0vZGQveXl5eScpCiAgICAgICAgICAgICRTZWFyY2hUZXJtcyA9ICcqLmV4ZScKICAgICAgICB9CiAgICAgICAgaWYoJFVzZVBTRHJpdmUpIHsKICAgICAgICAgICAgCiAgICAgICAgICAgICRQYXJ0cyA9ICRQYXRoLnNwbGl0KCdcJykKICAgICAgICAgICAgJEZvbGRlclBhdGggPSAkUGFydHNbMC4uKCRQYXJ0cy5sZW5ndGgtMildIC1qb2luICdcJwogICAgICAgICAgICAkRmlsZVBhdGggPSAkUGFydHNbLTFdCiAgICAgICAgICAgICRSYW5kRHJpdmUgPSAoImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6Ii5Ub0NoYXJBcnJheSgpIHwgR2V0LVJhbmRvbSAtQ291bnQgNykgLWpvaW4gJycKICAgICAgICAgICAgCiAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIk1vdW50aW5nIHBhdGggJyRQYXRoJyB1c2luZyBhIHRlbXAgUFNEcml2ZSBhdCAkUmFuZERyaXZlIgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgJE51bGwgPSBOZXctUFNEcml2ZSAtTmFtZSAkUmFuZERyaXZlIC1QU1Byb3ZpZGVyIEZpbGVTeXN0ZW0gLVJvb3QgJEZvbGRlclBhdGggLUVycm9yQWN0aW9uIFN0b3AKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJFcnJvciBtb3VudGluZyBwYXRoICckUGF0aCcgOiAkXyIKICAgICAgICAgICAgICAgIHJldHVybiAkTnVsbAogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAkUGF0aCA9ICIke1JhbmREcml2ZX06XCR7RmlsZVBhdGh9IgogICAgICAgIH0KICAgIH0KICAgIHByb2Nlc3MgewogICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBTZWFyY2ggcGF0aCAkUGF0aCIKICAgICAgICBmdW5jdGlvbiBJbnZva2UtQ2hlY2tXcml0ZSB7CiAgICAgICAgICAgIAogICAgICAgICAgICBbQ21kbGV0QmluZGluZygpXXBhcmFtKFtTdHJpbmddJFBhdGgpCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAkRmlsZXRlc3QgPSBbSU8uRklMRV06Ok9wZW5Xcml0ZSgkUGF0aCkKICAgICAgICAgICAgICAgICRGaWxldGVzdC5DbG9zZSgpCiAgICAgICAgICAgICAgICAkVHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgLU1lc3NhZ2UgJEVycm9yWzBdCiAgICAgICAgICAgICAgICAkRmFsc2UKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAkU2VhcmNoQXJncyA9ICBAewogICAgICAgICAgICAnUGF0aCcgPSAkUGF0aAogICAgICAgICAgICAnUmVjdXJzZScgPSAkVHJ1ZQogICAgICAgICAgICAnRm9yY2UnID0gJCgtbm90ICRFeGNsdWRlSGlkZGVuKQogICAgICAgICAgICAnSW5jbHVkZScgPSAkU2VhcmNoVGVybXMKICAgICAgICAgICAgJ0Vycm9yQWN0aW9uJyA9ICdTaWxlbnRseUNvbnRpbnVlJwogICAgICAgIH0KICAgICAgICBHZXQtQ2hpbGRJdGVtIEBTZWFyY2hBcmdzIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICRfCiAgICAgICAgICAgIAogICAgICAgICAgICBpZighJEV4Y2x1ZGVGb2xkZXJzIC1vciAhJF8uUFNJc0NvbnRhaW5lcikgeyRffQogICAgICAgIH0gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgIGlmKCRMYXN0QWNjZXNzVGltZSAtb3IgJExhc3RXcml0ZVRpbWUgLW9yICRDcmVhdGlvblRpbWUpIHsKICAgICAgICAgICAgICAgIGlmKCRMYXN0QWNjZXNzVGltZSAtYW5kICgkXy5MYXN0QWNjZXNzVGltZSAtZ3QgJExhc3RBY2Nlc3NUaW1lKSkgeyRffQogICAgICAgICAgICAgICAgZWxzZWlmKCRMYXN0V3JpdGVUaW1lIC1hbmQgKCRfLkxhc3RXcml0ZVRpbWUgLWd0ICRMYXN0V3JpdGVUaW1lKSkgeyRffQogICAgICAgICAgICAgICAgZWxzZWlmKCRDcmVhdGlvblRpbWUgLWFuZCAoJF8uQ3JlYXRpb25UaW1lIC1ndCAkQ3JlYXRpb25UaW1lKSkgeyRffQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgeyRffQogICAgICAgIH0gfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgIAogICAgICAgICAgICBpZigoLW5vdCAkQ2hlY2tXcml0ZUFjY2VzcykgLW9yIChJbnZva2UtQ2hlY2tXcml0ZSAtUGF0aCAkXy5GdWxsTmFtZSkpIHskX30KICAgICAgICB9IHwgU2VsZWN0LU9iamVjdCBGdWxsTmFtZSxAe05hbWU9J093bmVyJztFeHByZXNzaW9uPXsoR2V0LUFjbCAkXy5GdWxsTmFtZSkuT3duZXJ9fSxMYXN0QWNjZXNzVGltZSxMYXN0V3JpdGVUaW1lLENyZWF0aW9uVGltZSxMZW5ndGggfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgIAogICAgICAgICAgICBpZigkT3V0RmlsZSkge0V4cG9ydC1Qb3dlclZpZXdDU1YgLUlucHV0T2JqZWN0ICRfIC1PdXRGaWxlICRPdXRGaWxlfQogICAgICAgICAgICBlbHNlIHskX30KICAgICAgICB9CiAgICB9CiAgICBlbmQgewogICAgICAgIGlmKCRVc2VQU0RyaXZlIC1hbmQgJFJhbmREcml2ZSkgewogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJSZW1vdmluZyB0ZW1wIFBTRHJpdmUgJFJhbmREcml2ZSIKICAgICAgICAgICAgR2V0LVBTRHJpdmUgLU5hbWUgJFJhbmREcml2ZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB8IFJlbW92ZS1QU0RyaXZlIC1Gb3JjZQogICAgICAgIH0KICAgIH0KfQ==
ZnVuY3Rpb24gSW52b2tlLVRocmVhZGVkRnVuY3Rpb24gewogICAgCiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbj0wLE1hbmRhdG9yeT0kVHJ1ZSldCiAgICAgICAgW1N0cmluZ1tdXQogICAgICAgICRDb21wdXRlck5hbWUsCiAgICAgICAgW1BhcmFtZXRlcihQb3NpdGlvbj0xLE1hbmRhdG9yeT0kVHJ1ZSldCiAgICAgICAgW1N5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uU2NyaXB0QmxvY2tdCiAgICAgICAgJFNjcmlwdEJsb2NrLAogICAgICAgIFtQYXJhbWV0ZXIoUG9zaXRpb249MildCiAgICAgICAgW0hhc2h0YWJsZV0KICAgICAgICAkU2NyaXB0UGFyYW1ldGVycywKICAgICAgICBbSW50XQogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwKV0gCiAgICAgICAgJFRocmVhZHMgPSAyMCwKICAgICAgICBbU3dpdGNoXQogICAgICAgICROb0ltcG9ydHMKICAgICkKICAgIGJlZ2luIHsKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEZWJ1ZyddKSB7CiAgICAgICAgICAgICREZWJ1Z1ByZWZlcmVuY2UgPSAnQ29udGludWUnCiAgICAgICAgfQogICAgICAgIFdyaXRlLVZlcmJvc2UgIlsqXSBUb3RhbCBudW1iZXIgb2YgaG9zdHM6ICQoJENvbXB1dGVyTmFtZS5jb3VudCkiCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgJFNlc3Npb25TdGF0ZSA9IFtTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLlJ1bnNwYWNlcy5Jbml0aWFsU2Vzc2lvblN0YXRlXTo6Q3JlYXRlRGVmYXVsdCgpCiAgICAgICAgJFNlc3Npb25TdGF0ZS5BcGFydG1lbnRTdGF0ZSA9IFtTeXN0ZW0uVGhyZWFkaW5nLlRocmVhZF06OkN1cnJlbnRUaHJlYWQuR2V0QXBhcnRtZW50U3RhdGUoKQogICAgICAgIAogICAgICAgIAogICAgICAgIGlmKCEkTm9JbXBvcnRzKSB7CiAgICAgICAgICAgIAogICAgICAgICAgICAkTXlWYXJzID0gR2V0LVZhcmlhYmxlIC1TY29wZSAyCiAgICAgICAgICAgIAogICAgICAgICAgICAkVm9yYmlkZGVuVmFycyA9IEAoIj8iLCJhcmdzIiwiQ29uc29sZUZpbGVOYW1lIiwiRXJyb3IiLCJFeGVjdXRpb25Db250ZXh0IiwiZmFsc2UiLCJIT01FIiwiSG9zdCIsImlucHV0IiwiSW5wdXRPYmplY3QiLCJNYXhpbXVtQWxpYXNDb3VudCIsIk1heGltdW1Ecml2ZUNvdW50IiwiTWF4aW11bUVycm9yQ291bnQiLCJNYXhpbXVtRnVuY3Rpb25Db3VudCIsIk1heGltdW1IaXN0b3J5Q291bnQiLCJNYXhpbXVtVmFyaWFibGVDb3VudCIsIk15SW52b2NhdGlvbiIsIm51bGwiLCJQSUQiLCJQU0JvdW5kUGFyYW1ldGVycyIsIlBTQ29tbWFuZFBhdGgiLCJQU0N1bHR1cmUiLCJQU0RlZmF1bHRQYXJhbWV0ZXJWYWx1ZXMiLCJQU0hPTUUiLCJQU1NjcmlwdFJvb3QiLCJQU1VJQ3VsdHVyZSIsIlBTVmVyc2lvblRhYmxlIiwiUFdEIiwiU2hlbGxJZCIsIlN5bmNocm9uaXplZEhhc2giLCJ0cnVlIikKICAgICAgICAgICAgCiAgICAgICAgICAgIEZvckVhY2goJFZhciBpbiAkTXlWYXJzKSB7CiAgICAgICAgICAgICAgICBpZigkVm9yYmlkZGVuVmFycyAtTm90Q29udGFpbnMgJFZhci5OYW1lKSB7CiAgICAgICAgICAgICAgICAkU2Vzc2lvblN0YXRlLlZhcmlhYmxlcy5BZGQoKE5ldy1PYmplY3QgLVR5cGVOYW1lIFN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUnVuc3BhY2VzLlNlc3Npb25TdGF0ZVZhcmlhYmxlRW50cnkgLUFyZ3VtZW50TGlzdCAkVmFyLm5hbWUsJFZhci5WYWx1ZSwkVmFyLmRlc2NyaXB0aW9uLCRWYXIub3B0aW9ucywkVmFyLmF0dHJpYnV0ZXMpKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICBGb3JFYWNoKCRGdW5jdGlvbiBpbiAoR2V0LUNoaWxkSXRlbSBGdW5jdGlvbjopKSB7CiAgICAgICAgICAgICAgICAkU2Vzc2lvblN0YXRlLkNvbW1hbmRzLkFkZCgoTmV3LU9iamVjdCAtVHlwZU5hbWUgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5SdW5zcGFjZXMuU2Vzc2lvblN0YXRlRnVuY3Rpb25FbnRyeSAtQXJndW1lbnRMaXN0ICRGdW5jdGlvbi5OYW1lLCAkRnVuY3Rpb24uRGVmaW5pdGlvbikpCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgJFBvb2wgPSBbcnVuc3BhY2VmYWN0b3J5XTo6Q3JlYXRlUnVuc3BhY2VQb29sKDEsICRUaHJlYWRzLCAkU2Vzc2lvblN0YXRlLCAkSG9zdCkKICAgICAgICAkUG9vbC5PcGVuKCkKICAgICAgICAkbWV0aG9kID0gJG51bGwKICAgICAgICBGb3JFYWNoICgkbSBpbiBbUG93ZXJTaGVsbF0uR2V0TWV0aG9kcygpIHwgV2hlcmUtT2JqZWN0IHsgJF8uTmFtZSAtZXEgIkJlZ2luSW52b2tlIiB9KSB7CiAgICAgICAgICAgICRtZXRob2RQYXJhbWV0ZXJzID0gJG0uR2V0UGFyYW1ldGVycygpCiAgICAgICAgICAgIGlmICgoJG1ldGhvZFBhcmFtZXRlcnMuQ291bnQgLWVxIDIpIC1hbmQgJG1ldGhvZFBhcmFtZXRlcnNbMF0uTmFtZSAtZXEgImlucHV0IiAtYW5kICRtZXRob2RQYXJhbWV0ZXJzWzFdLk5hbWUgLWVxICJvdXRwdXQiKSB7CiAgICAgICAgICAgICAgICAkbWV0aG9kID0gJG0uTWFrZUdlbmVyaWNNZXRob2QoW09iamVjdF0sIFtPYmplY3RdKQogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAkSm9icyA9IEAoKQogICAgfQogICAgcHJvY2VzcyB7CiAgICAgICAgRm9yRWFjaCAoJENvbXB1dGVyIGluICRDb21wdXRlck5hbWUpIHsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmICgkQ29tcHV0ZXIgLW5lICcnKSB7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIFdoaWxlICgkKCRQb29sLkdldEF2YWlsYWJsZVJ1bnNwYWNlcygpKSAtbGUgMCkgewogICAgICAgICAgICAgICAgICAgIFN0YXJ0LVNsZWVwIC1NaWxsaVNlY29uZHMgNTAwCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICRwID0gW3Bvd2Vyc2hlbGxdOjpjcmVhdGUoKQogICAgICAgICAgICAgICAgJHAucnVuc3BhY2Vwb29sID0gJFBvb2wKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJE51bGwgPSAkcC5BZGRTY3JpcHQoJFNjcmlwdEJsb2NrKS5BZGRQYXJhbWV0ZXIoJ0NvbXB1dGVyTmFtZScsICRDb21wdXRlcikKICAgICAgICAgICAgICAgIGlmKCRTY3JpcHRQYXJhbWV0ZXJzKSB7CiAgICAgICAgICAgICAgICAgICAgRm9yRWFjaCAoJFBhcmFtIGluICRTY3JpcHRQYXJhbWV0ZXJzLkdldEVudW1lcmF0b3IoKSkgewogICAgICAgICAgICAgICAgICAgICAgICAkTnVsbCA9ICRwLkFkZFBhcmFtZXRlcigkUGFyYW0uTmFtZSwgJFBhcmFtLlZhbHVlKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRvID0gTmV3LU9iamVjdCBNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNEYXRhQ29sbGVjdGlvbltPYmplY3RdCiAgICAgICAgICAgICAgICAkSm9icyArPSBAewogICAgICAgICAgICAgICAgICAgIFBTID0gJHAKICAgICAgICAgICAgICAgICAgICBPdXRwdXQgPSAkbwogICAgICAgICAgICAgICAgICAgIFJlc3VsdCA9ICRtZXRob2QuSW52b2tlKCRwLCBAKCRudWxsLCBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTRGF0YUNvbGxlY3Rpb25bT2JqZWN0XV0kbykpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBlbmQgewogICAgICAgIFdyaXRlLVZlcmJvc2UgIldhaXRpbmcgZm9yIHRocmVhZHMgdG8gZmluaXNoLi4uIgogICAgICAgIERvIHsKICAgICAgICAgICAgRm9yRWFjaCAoJEpvYiBpbiAkSm9icykgewogICAgICAgICAgICAgICAgJEpvYi5PdXRwdXQuUmVhZEFsbCgpCiAgICAgICAgICAgIH0KICAgICAgICB9IFdoaWxlICgoJEpvYnMgfCBXaGVyZS1PYmplY3QgeyAhICRfLlJlc3VsdC5Jc0NvbXBsZXRlZCB9KS5Db3VudCAtZ3QgMCkKICAgICAgICBGb3JFYWNoICgkSm9iIGluICRKb2JzKSB7CiAgICAgICAgICAgICRKb2IuUFMuRGlzcG9zZSgpCiAgICAgICAgfQogICAgICAgICRQb29sLkRpc3Bvc2UoKQogICAgICAgIFdyaXRlLVZlcmJvc2UgIkFsbCB0aHJlYWRzIGNvbXBsZXRlZCEiCiAgICB9Cn0=

ZnVuY3Rpb24gSW52b2tlLVN0ZWFsdGhVc2VySHVudGVyIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uPTAsVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdHMnKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJENvbXB1dGVyTmFtZSwKICAgICAgICBbVmFsaWRhdGVTY3JpcHQoe1Rlc3QtUGF0aCAtUGF0aCAkXyB9KV0KICAgICAgICBbQWxpYXMoJ0hvc3RMaXN0JyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJGaWxlLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyRmlsdGVyLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyQURTcGF0aCwKICAgICAgICBbU3RyaW5nXQogICAgICAgICRHcm91cE5hbWUgPSAnRG9tYWluIEFkbWlucycsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkVGFyZ2V0U2VydmVyLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFVzZXJOYW1lLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJFVzZXJGaWx0ZXIsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkVXNlckFEU3BhdGgsCiAgICAgICAgW1ZhbGlkYXRlU2NyaXB0KHtUZXN0LVBhdGggLVBhdGggJF8gfSldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkVXNlckZpbGUsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkQ2hlY2tBY2Nlc3MsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkU3RvcE9uU3VjY2VzcywKICAgICAgICBbU3dpdGNoXQogICAgICAgICROb1BpbmcsCiAgICAgICAgW1VJbnQzMl0KICAgICAgICAkRGVsYXkgPSAwLAogICAgICAgIFtEb3VibGVdCiAgICAgICAgJEppdHRlciA9IC4zLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKICAgICAgICBbU3dpdGNoXQogICAgICAgICRTaG93QWxsLAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFNlYXJjaEZvcmVzdCwKICAgICAgICBbU3RyaW5nXQogICAgICAgIFtWYWxpZGF0ZVNldCgiREZTIiwiREMiLCJGaWxlIiwiQWxsIildCiAgICAgICAgJFN0ZWFsdGhTb3VyY2UgPSJBbGwiCiAgICApCiAgICAKICAgIEludm9rZS1Vc2VySHVudGVyIC1TdGVhbHRoIEBQU0JvdW5kUGFyYW1ldGVycwp9




ZnVuY3Rpb24gRmluZC1Mb2NhbEFkbWluQWNjZXNzIHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uPTAsVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtBbGlhcygnSG9zdHMnKV0KICAgICAgICBbU3RyaW5nW11dCiAgICAgICAgJENvbXB1dGVyTmFtZSwKICAgICAgICBbVmFsaWRhdGVTY3JpcHQoe1Rlc3QtUGF0aCAtUGF0aCAkXyB9KV0KICAgICAgICBbQWxpYXMoJ0hvc3RMaXN0JyldCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkQ29tcHV0ZXJGaWxlLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyRmlsdGVyLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJENvbXB1dGVyQURTcGF0aCwKICAgICAgICBbU3dpdGNoXQogICAgICAgICROb1BpbmcsCiAgICAgICAgW1VJbnQzMl0KICAgICAgICAkRGVsYXkgPSAwLAogICAgICAgIFtEb3VibGVdCiAgICAgICAgJEppdHRlciA9IC4zLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbiwKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW5Db250cm9sbGVyLAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFNlYXJjaEZvcmVzdCwKICAgICAgICBbVmFsaWRhdGVSYW5nZSgxLDEwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFRocmVhZHMKICAgICkKICAgIGJlZ2luIHsKICAgICAgICBpZiAoJFBTQm91bmRQYXJhbWV0ZXJzWydEZWJ1ZyddKSB7CiAgICAgICAgICAgICREZWJ1Z1ByZWZlcmVuY2UgPSAnQ29udGludWUnCiAgICAgICAgfQogICAgICAgIAogICAgICAgICRSYW5kTm8gPSBOZXctT2JqZWN0IFN5c3RlbS5SYW5kb20KICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gUnVubmluZyBGaW5kLUxvY2FsQWRtaW5BY2Nlc3Mgd2l0aCBkZWxheSBvZiAkRGVsYXkiCiAgICAgICAgCiAgICAgICAgaWYoJENvbXB1dGVyRmlsZSkgewogICAgICAgICAgICAkQ29tcHV0ZXJOYW1lID0gR2V0LUNvbnRlbnQgLVBhdGggJENvbXB1dGVyRmlsZQogICAgICAgIH0KICAgICAgICBpZighJENvbXB1dGVyTmFtZSkgewogICAgICAgICAgICBbYXJyYXldJENvbXB1dGVyTmFtZSA9IEAoKQogICAgICAgICAgICBpZigkRG9tYWluKSB7CiAgICAgICAgICAgICAgICAkVGFyZ2V0RG9tYWlucyA9IEAoJERvbWFpbikKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlaWYoJFNlYXJjaEZvcmVzdCkgewogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkVGFyZ2V0RG9tYWlucyA9IEdldC1OZXRGb3Jlc3REb21haW4gfCBGb3JFYWNoLU9iamVjdCB7ICRfLk5hbWUgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkVGFyZ2V0RG9tYWlucyA9IEAoIChHZXQtTmV0RG9tYWluKS5uYW1lICkKICAgICAgICAgICAgfQogICAgICAgICAgICBGb3JFYWNoICgkRG9tYWluIGluICRUYXJnZXREb21haW5zKSB7CiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gUXVlcnlpbmcgZG9tYWluICREb21haW4gZm9yIGhvc3RzIgogICAgICAgICAgICAgICAgJENvbXB1dGVyTmFtZSArPSBHZXQtTmV0Q29tcHV0ZXIgLUZpbHRlciAkQ29tcHV0ZXJGaWx0ZXIgLUFEU3BhdGggJENvbXB1dGVyQURTcGF0aCAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIKICAgICAgICAgICAgfQogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgJENvbXB1dGVyTmFtZSA9ICRDb21wdXRlck5hbWUgfCBXaGVyZS1PYmplY3QgeyAkXyB9IHwgU29ydC1PYmplY3QgLVVuaXF1ZSB8IFNvcnQtT2JqZWN0IHsgR2V0LVJhbmRvbSB9CiAgICAgICAgICAgIGlmKCQoJENvbXB1dGVyTmFtZS5Db3VudCkgLWVxIDApIHsKICAgICAgICAgICAgICAgIHRocm93ICJObyBob3N0cyBmb3VuZCEiCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgCiAgICAgICAgJEhvc3RFbnVtQmxvY2sgPSB7CiAgICAgICAgICAgIHBhcmFtKCRDb21wdXRlck5hbWUsICRQaW5nKQogICAgICAgICAgICAkVXAgPSAkVHJ1ZQogICAgICAgICAgICBpZigkUGluZykgewogICAgICAgICAgICAgICAgJFVwID0gVGVzdC1Db25uZWN0aW9uIC1Db3VudCAxIC1RdWlldCAtQ29tcHV0ZXJOYW1lICRDb21wdXRlck5hbWUKICAgICAgICAgICAgfQogICAgICAgICAgICBpZigkVXApIHsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJEFjY2VzcyA9IEludm9rZS1DaGVja0xvY2FsQWRtaW5BY2Nlc3MgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lCiAgICAgICAgICAgICAgICBpZiAoJEFjY2Vzcy5Jc0FkbWluKSB7CiAgICAgICAgICAgICAgICAgICAgJENvbXB1dGVyTmFtZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgcHJvY2VzcyB7CiAgICAgICAgaWYoJFRocmVhZHMpIHsKICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiVXNpbmcgdGhyZWFkaW5nIHdpdGggdGhyZWFkcyA9ICRUaHJlYWRzIgogICAgICAgICAgICAKICAgICAgICAgICAgJFNjcmlwdFBhcmFtcyA9IEB7CiAgICAgICAgICAgICAgICAnUGluZycgPSAkKC1ub3QgJE5vUGluZykKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgSW52b2tlLVRocmVhZGVkRnVuY3Rpb24gLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lIC1TY3JpcHRCbG9jayAkSG9zdEVudW1CbG9jayAtU2NyaXB0UGFyYW1ldGVycyAkU2NyaXB0UGFyYW1zIC1UaHJlYWRzICRUaHJlYWRzCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBpZigtbm90ICROb1BpbmcgLWFuZCAoJENvbXB1dGVyTmFtZS5jb3VudCAtbmUgMSkpIHsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJFBpbmcgPSB7cGFyYW0oJENvbXB1dGVyTmFtZSkgaWYoVGVzdC1Db25uZWN0aW9uIC1Db21wdXRlck5hbWUgJENvbXB1dGVyTmFtZSAtQ291bnQgMSAtUXVpZXQgLUVycm9yQWN0aW9uIFN0b3ApeyRDb21wdXRlck5hbWV9fQogICAgICAgICAgICAgICAgJENvbXB1dGVyTmFtZSA9IEludm9rZS1UaHJlYWRlZEZ1bmN0aW9uIC1Ob0ltcG9ydHMgLUNvbXB1dGVyTmFtZSAkQ29tcHV0ZXJOYW1lIC1TY3JpcHRCbG9jayAkUGluZyAtVGhyZWFkcyAxMDAKICAgICAgICAgICAgfQogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gVG90YWwgbnVtYmVyIG9mIGFjdGl2ZSBob3N0czogJCgkQ29tcHV0ZXJOYW1lLmNvdW50KSIKICAgICAgICAgICAgJENvdW50ZXIgPSAwCiAgICAgICAgICAgIEZvckVhY2ggKCRDb21wdXRlciBpbiAkQ29tcHV0ZXJOYW1lKSB7CiAgICAgICAgICAgICAgICAkQ291bnRlciA9ICRDb3VudGVyICsgMQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAkUmFuZE5vLk5leHQoKDEtJEppdHRlcikqJERlbGF5LCAoMSskSml0dGVyKSokRGVsYXkpCiAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJbKl0gRW51bWVyYXRpbmcgc2VydmVyICRDb21wdXRlciAoJENvdW50ZXIgb2YgJCgkQ29tcHV0ZXJOYW1lLmNvdW50KSkiCiAgICAgICAgICAgICAgICBJbnZva2UtQ29tbWFuZCAtU2NyaXB0QmxvY2sgJEhvc3RFbnVtQmxvY2sgLUFyZ3VtZW50TGlzdCAkQ29tcHV0ZXIsICRGYWxzZQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9


ZnVuY3Rpb24gR2V0LU5ldERvbWFpblRydXN0IHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uPTAsIFZhbHVlRnJvbVBpcGVsaW5lPSRUcnVlKV0KICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKICAgICAgICBbU3RyaW5nXQogICAgICAgICRBRFNwYXRoLAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJEFQSSwKICAgICAgICBbU3dpdGNoXQogICAgICAgICRMREFQLAogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMCwKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQogICAgYmVnaW4gewogICAgICAgICRUcnVzdEF0dHJpYnV0ZXMgPSBAewogICAgICAgICAgICBbdWludDMyXScweDAwMDAwMDAxJyA9ICdub25fdHJhbnNpdGl2ZScKICAgICAgICAgICAgW3VpbnQzMl0nMHgwMDAwMDAwMicgPSAndXBsZXZlbF9vbmx5JwogICAgICAgICAgICBbdWludDMyXScweDAwMDAwMDA0JyA9ICdxdWFyYW50aW5lZF9kb21haW4nCiAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMDAwMDgnID0gJ2ZvcmVzdF90cmFuc2l0aXZlJwogICAgICAgICAgICBbdWludDMyXScweDAwMDAwMDEwJyA9ICdjcm9zc19vcmdhbml6YXRpb24nCiAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMDAwMjAnID0gJ3dpdGhpbl9mb3Jlc3QnCiAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMDAwNDAnID0gJ3RyZWF0X2FzX2V4dGVybmFsJwogICAgICAgICAgICBbdWludDMyXScweDAwMDAwMDgwJyA9ICd0cnVzdF91c2VzX3JjNF9lbmNyeXB0aW9uJwogICAgICAgICAgICBbdWludDMyXScweDAwMDAwMTAwJyA9ICd0cnVzdF91c2VzX2Flc19rZXlzJwogICAgICAgICAgICBbdWludDMyXScweDAwMDAwMjAwJyA9ICdjcm9zc19vcmdhbml6YXRpb25fbm9fdGd0X2RlbGVnYXRpb24nCiAgICAgICAgICAgIFt1aW50MzJdJzB4MDAwMDA0MDAnID0gJ3BpbV90cnVzdCcKICAgICAgICB9CiAgICB9CiAgICBwcm9jZXNzIHsKICAgICAgICBpZigtbm90ICREb21haW4pIHsKICAgICAgICAgICAgCiAgICAgICAgICAgICRTb3VyY2VEb21haW4gPSAoR2V0LU5ldERvbWFpbiAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCkuTmFtZQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJFNvdXJjZURvbWFpbiA9ICREb21haW4KICAgICAgICB9CiAgICAgICAgaWYoJExEQVAgLW9yICRBRFNQYXRoKSB7CiAgICAgICAgICAgICRUcnVzdFNlYXJjaGVyID0gR2V0LURvbWFpblNlYXJjaGVyIC1Eb21haW4gJFNvdXJjZURvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtUGFnZVNpemUgJFBhZ2VTaXplIC1BRFNwYXRoICRBRFNwYXRoCiAgICAgICAgICAgICRTb3VyY2VTSUQgPSBHZXQtRG9tYWluU0lEIC1Eb21haW4gJFNvdXJjZURvbWFpbiAtRG9tYWluQ29udHJvbGxlciAkRG9tYWluQ29udHJvbGxlcgogICAgICAgICAgICBpZigkVHJ1c3RTZWFyY2hlcikgewogICAgICAgICAgICAgICAgJFRydXN0U2VhcmNoZXIuRmlsdGVyID0gJyhvYmplY3RDbGFzcz10cnVzdGVkRG9tYWluKScKICAgICAgICAgICAgICAgICRSZXN1bHRzID0gJFRydXN0U2VhcmNoZXIuRmluZEFsbCgpCiAgICAgICAgICAgICAgICAkUmVzdWx0cyB8IFdoZXJlLU9iamVjdCB7JF99IHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICRQcm9wcyA9ICRfLlByb3BlcnRpZXMKICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgJFRydXN0QXR0cmliID0gQCgpCiAgICAgICAgICAgICAgICAgICAgJFRydXN0QXR0cmliICs9ICRUcnVzdEF0dHJpYnV0ZXMuS2V5cyB8IFdoZXJlLU9iamVjdCB7ICRQcm9wcy50cnVzdGF0dHJpYnV0ZXNbMF0gLWJhbmQgJF8gfSB8IEZvckVhY2gtT2JqZWN0IHsgJFRydXN0QXR0cmlidXRlc1skX10gfQogICAgICAgICAgICAgICAgICAgICREaXJlY3Rpb24gPSBTd2l0Y2ggKCRQcm9wcy50cnVzdGRpcmVjdGlvbikgewogICAgICAgICAgICAgICAgICAgICAgICAwIHsgJ0Rpc2FibGVkJyB9CiAgICAgICAgICAgICAgICAgICAgICAgIDEgeyAnSW5ib3VuZCcgfQogICAgICAgICAgICAgICAgICAgICAgICAyIHsgJ091dGJvdW5kJyB9CiAgICAgICAgICAgICAgICAgICAgICAgIDMgeyAnQmlkaXJlY3Rpb25hbCcgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkT2JqZWN0R3VpZCA9IE5ldy1PYmplY3QgR3VpZCBAKCwkUHJvcHMub2JqZWN0Z3VpZFswXSkKICAgICAgICAgICAgICAgICAgICAkVGFyZ2V0U0lEID0gKE5ldy1PYmplY3QgU3lzdGVtLlNlY3VyaXR5LlByaW5jaXBhbC5TZWN1cml0eUlkZW50aWZpZXIoJFByb3BzLnNlY3VyaXR5aWRlbnRpZmllclswXSwwKSkuVmFsdWUKICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU291cmNlTmFtZScgJFNvdXJjZURvbWFpbgogICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdTb3VyY2VTSUQnICRTb3VyY2VTSUQKICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVGFyZ2V0TmFtZScgJFByb3BzLm5hbWVbMF0KICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVGFyZ2V0U0lEJyAkVGFyZ2V0U0lECiAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ09iamVjdEd1aWQnICJ7JE9iamVjdEd1aWR9IgogICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdUcnVzdFR5cGUnICQoJFRydXN0QXR0cmliIC1qb2luICcsJykKICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVHJ1c3REaXJlY3Rpb24nICIkRGlyZWN0aW9uIgogICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdC5QU09iamVjdC5UeXBlTmFtZXMuQWRkKCdQb3dlclZpZXcuRG9tYWluVHJ1c3RMREFQJykKICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICRSZXN1bHRzLmRpc3Bvc2UoKQogICAgICAgICAgICAgICAgJFRydXN0U2VhcmNoZXIuZGlzcG9zZSgpCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZWlmKCRBUEkpIHsKICAgICAgICAgICAgaWYoLW5vdCAkRG9tYWluQ29udHJvbGxlcikgewogICAgICAgICAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIgPSBHZXQtTmV0RG9tYWluQ29udHJvbGxlciAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtRG9tYWluICRTb3VyY2VEb21haW4gfCBTZWxlY3QtT2JqZWN0IC1GaXJzdCAxIHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgTmFtZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKCREb21haW5Db250cm9sbGVyKSB7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICRQdHJJbmZvID0gW0ludFB0cl06Olplcm8KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJEZsYWdzID0gNjMKICAgICAgICAgICAgICAgICREb21haW5Db3VudCA9IDAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJFJlc3VsdCA9ICROZXRhcGkzMjo6RHNFbnVtZXJhdGVEb21haW5UcnVzdHMoJERvbWFpbkNvbnRyb2xsZXIsICRGbGFncywgW3JlZl0kUHRySW5mbywgW3JlZl0kRG9tYWluQ291bnQpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICRPZmZzZXQgPSAkUHRySW5mby5Ub0ludDY0KCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgKCgkUmVzdWx0IC1lcSAwKSAtYW5kICgkT2Zmc2V0IC1ndCAwKSkgewogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICRJbmNyZW1lbnQgPSAkRFNfRE9NQUlOX1RSVVNUUzo6R2V0U2l6ZSgpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZm9yICgkaSA9IDA7ICgkaSAtbHQgJERvbWFpbkNvdW50KTsgJGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgJE5ld0ludFB0ciA9IE5ldy1PYmplY3QgU3lzdGVtLkludHB0ciAtQXJndW1lbnRMaXN0ICRPZmZzZXQKICAgICAgICAgICAgICAgICAgICAgICAgJEluZm8gPSAkTmV3SW50UHRyIC1hcyAkRFNfRE9NQUlOX1RSVVNUUwogICAgICAgICAgICAgICAgICAgICAgICAkT2Zmc2V0ID0gJE5ld0ludFB0ci5Ub0ludDY0KCkKICAgICAgICAgICAgICAgICAgICAgICAgJE9mZnNldCArPSAkSW5jcmVtZW50CiAgICAgICAgICAgICAgICAgICAgICAgICRTaWRTdHJpbmcgPSAiIgogICAgICAgICAgICAgICAgICAgICAgICAkUmVzdWx0ID0gJEFkdmFwaTMyOjpDb252ZXJ0U2lkVG9TdHJpbmdTaWQoJEluZm8uRG9tYWluU2lkLCBbcmVmXSRTaWRTdHJpbmcpOyRMYXN0RXJyb3IgPSBbUnVudGltZS5JbnRlcm9wU2VydmljZXMuTWFyc2hhbF06OkdldExhc3RXaW4zMkVycm9yKCkKICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFJlc3VsdCAtZXEgMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiRXJyb3I6ICQoKFtDb21wb25lbnRNb2RlbC5XaW4zMkV4Y2VwdGlvbl0gJExhc3RFcnJvcikuTWVzc2FnZSkiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU291cmNlRG9tYWluJyAkU291cmNlRG9tYWluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnU291cmNlRG9tYWluQ29udHJvbGxlcicgJERvbWFpbkNvbnRyb2xsZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdOZXRiaW9zRG9tYWluTmFtZScgJEluZm8uTmV0Ymlvc0RvbWFpbk5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdEbnNEb21haW5OYW1lJyAkSW5mby5EbnNEb21haW5OYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnRmxhZ3MnICRJbmZvLkZsYWdzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnUGFyZW50SW5kZXgnICRJbmZvLlBhcmVudEluZGV4CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVHJ1c3RUeXBlJyAkSW5mby5UcnVzdFR5cGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdUcnVzdEF0dHJpYnV0ZXMnICRJbmZvLlRydXN0QXR0cmlidXRlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0RvbWFpblNpZCcgJFNpZFN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0RvbWFpbkd1aWQnICRJbmZvLkRvbWFpbkd1aWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdC5QU09iamVjdC5UeXBlTmFtZXMuQWRkKCdQb3dlclZpZXcuQVBJRG9tYWluVHJ1c3QnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgJE51bGwgPSAkTmV0YXBpMzI6Ok5ldEFwaUJ1ZmZlckZyZWUoJFB0ckluZm8pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBXcml0ZS1WZXJib3NlICJFcnJvcjogJCgoW0NvbXBvbmVudE1vZGVsLldpbjMyRXhjZXB0aW9uXSAkUmVzdWx0KS5NZXNzYWdlKSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIFdyaXRlLVZlcmJvc2UgIkNvdWxkIG5vdCByZXRyaWV2ZSBkb21haW4gY29udHJvbGxlciBmb3IgJERvbWFpbiIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgCiAgICAgICAgICAgICRGb3VuZERvbWFpbiA9IEdldC1OZXREb21haW4gLURvbWFpbiAkRG9tYWluIC1DcmVkZW50aWFsICRDcmVkZW50aWFsCiAgICAgICAgICAgIGlmKCRGb3VuZERvbWFpbikgewogICAgICAgICAgICAgICAgJEZvdW5kRG9tYWluLkdldEFsbFRydXN0UmVsYXRpb25zaGlwcygpIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgICAgICRfLlBTT2JqZWN0LlR5cGVOYW1lcy5BZGQoJ1Bvd2VyVmlldy5Eb21haW5UcnVzdCcpCiAgICAgICAgICAgICAgICAgICAgJF8KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQ==
ZnVuY3Rpb24gR2V0LU5ldEZvcmVzdFRydXN0IHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbUGFyYW1ldGVyKFBvc2l0aW9uPTAsVmFsdWVGcm9tUGlwZWxpbmU9JFRydWUpXQogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEZvcmVzdCwKICAgICAgICBbTWFuYWdlbWVudC5BdXRvbWF0aW9uLlBTQ3JlZGVudGlhbF0KICAgICAgICAkQ3JlZGVudGlhbAogICAgKQogICAgcHJvY2VzcyB7CiAgICAgICAgJEZvdW5kRm9yZXN0ID0gR2V0LU5ldEZvcmVzdCAtRm9yZXN0ICRGb3Jlc3QgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgICAgICBpZigkRm91bmRGb3Jlc3QpIHsKICAgICAgICAgICAgJEZvdW5kRm9yZXN0LkdldEFsbFRydXN0UmVsYXRpb25zaGlwcygpIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICAgICAgJF8uUFNPYmplY3QuVHlwZU5hbWVzLkFkZCgnUG93ZXJWaWV3LkZvcmVzdFRydXN0JykKICAgICAgICAgICAgICAgICRfCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0=
ZnVuY3Rpb24gRmluZC1Gb3JlaWduVXNlciB7CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkVXNlck5hbWUsCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCiAgICAgICAgW1N3aXRjaF0KICAgICAgICAkTERBUCwKICAgICAgICBbU3dpdGNoXQogICAgICAgICRSZWN1cnNlLAogICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICBbSW50XQogICAgICAgICRQYWdlU2l6ZSA9IDIwMAogICAgKQogICAgZnVuY3Rpb24gR2V0LUZvcmVpZ25Vc2VyIHsKICAgICAgICAKICAgICAgICBwYXJhbSgKICAgICAgICAgICAgW1N0cmluZ10KICAgICAgICAgICAgJFVzZXJOYW1lLAogICAgICAgICAgICBbU3RyaW5nXQogICAgICAgICAgICAkRG9tYWluLAogICAgICAgICAgICBbU3RyaW5nXQogICAgICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKICAgICAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgICAgICBbSW50XQogICAgICAgICAgICAkUGFnZVNpemUgPSAyMDAKICAgICAgICApCiAgICAgICAgaWYgKCREb21haW4pIHsKICAgICAgICAgICAgCiAgICAgICAgICAgICREaXN0aW5ndWlzaGVkRG9tYWluTmFtZSA9ICJEQz0iICsgJERvbWFpbiAtcmVwbGFjZSAnXC4nLCcsREM9JwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJERpc3Rpbmd1aXNoZWREb21haW5OYW1lID0gW1N0cmluZ10gKFthZHNpXScnKS5kaXN0aW5ndWlzaGVkbmFtZQogICAgICAgICAgICAkRG9tYWluID0gJERpc3Rpbmd1aXNoZWREb21haW5OYW1lIC1yZXBsYWNlICdEQz0nLCcnIC1yZXBsYWNlICcsJywnLicKICAgICAgICB9CiAgICAgICAgR2V0LU5ldFVzZXIgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1Vc2VyTmFtZSAkVXNlck5hbWUgLVBhZ2VTaXplICRQYWdlU2l6ZSAtRmlsdGVyICcobWVtYmVyb2Y9KiknIHwgRm9yRWFjaC1PYmplY3QgewogICAgICAgICAgICBGb3JFYWNoICgkTWVtYmVyc2hpcCBpbiAkXy5tZW1iZXJvZikgewogICAgICAgICAgICAgICAgJEluZGV4ID0gJE1lbWJlcnNoaXAuSW5kZXhPZigiREM9IikKICAgICAgICAgICAgICAgIGlmKCRJbmRleCkgewogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICRHcm91cERvbWFpbiA9ICQoJE1lbWJlcnNoaXAuc3Vic3RyaW5nKCRJbmRleCkpIC1yZXBsYWNlICdEQz0nLCcnIC1yZXBsYWNlICcsJywnLicKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBpZiAoJEdyb3VwRG9tYWluLkNvbXBhcmVUbygkRG9tYWluKSkgewogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgJEdyb3VwTmFtZSA9ICRNZW1iZXJzaGlwLnNwbGl0KCIsIilbMF0uc3BsaXQoIj0iKVsxXQogICAgICAgICAgICAgICAgICAgICAgICAkRm9yZWlnblVzZXIgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICRGb3JlaWduVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyRG9tYWluJyAkRG9tYWluCiAgICAgICAgICAgICAgICAgICAgICAgICRGb3JlaWduVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyTmFtZScgJF8uc2FtYWNjb3VudG5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Vc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dyb3VwRG9tYWluJyAkR3JvdXBEb21haW4KICAgICAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Vc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dyb3VwTmFtZScgJEdyb3VwTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkRm9yZWlnblVzZXIgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnR3JvdXBETicgJE1lbWJlcnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Vc2VyCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgaWYgKCRSZWN1cnNlKSB7CiAgICAgICAgCiAgICAgICAgaWYoJExEQVAgLW9yICREb21haW5Db250cm9sbGVyKSB7CiAgICAgICAgICAgICREb21haW5UcnVzdHMgPSBJbnZva2UtTWFwRG9tYWluVHJ1c3QgLUxEQVAgLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLVBhZ2VTaXplICRQYWdlU2l6ZSB8IEZvckVhY2gtT2JqZWN0IHsgJF8uU291cmNlRG9tYWluIH0gfCBTb3J0LU9iamVjdCAtVW5pcXVlCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkRG9tYWluVHJ1c3RzID0gSW52b2tlLU1hcERvbWFpblRydXN0IC1QYWdlU2l6ZSAkUGFnZVNpemUgfCBGb3JFYWNoLU9iamVjdCB7ICRfLlNvdXJjZURvbWFpbiB9IHwgU29ydC1PYmplY3QgLVVuaXF1ZQogICAgICAgIH0KICAgICAgICBGb3JFYWNoKCREb21haW5UcnVzdCBpbiAkRG9tYWluVHJ1c3RzKSB7CiAgICAgICAgICAgIAogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJFbnVtZXJhdGluZyB0cnVzdCBncm91cHMgaW4gZG9tYWluICREb21haW5UcnVzdCIKICAgICAgICAgICAgR2V0LUZvcmVpZ25Vc2VyIC1Eb21haW4gJERvbWFpblRydXN0IC1Vc2VyTmFtZSAkVXNlck5hbWUgLVBhZ2VTaXplICRQYWdlU2l6ZQogICAgICAgIH0KICAgIH0KICAgIGVsc2UgewogICAgICAgIEdldC1Gb3JlaWduVXNlciAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLVVzZXJOYW1lICRVc2VyTmFtZSAtUGFnZVNpemUgJFBhZ2VTaXplCiAgICB9Cn0=
ZnVuY3Rpb24gRmluZC1Gb3JlaWduR3JvdXAgewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJEdyb3VwTmFtZSA9ICcqJywKICAgICAgICBbU3RyaW5nXQogICAgICAgICREb21haW4sCiAgICAgICAgW1N0cmluZ10KICAgICAgICAkRG9tYWluQ29udHJvbGxlciwKICAgICAgICBbU3dpdGNoXQogICAgICAgICRMREFQLAogICAgICAgIFtTd2l0Y2hdCiAgICAgICAgJFJlY3Vyc2UsCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwCiAgICApCiAgICBmdW5jdGlvbiBHZXQtRm9yZWlnbkdyb3VwIHsKICAgICAgICBwYXJhbSgKICAgICAgICAgICAgW1N0cmluZ10KICAgICAgICAgICAgJEdyb3VwTmFtZSA9ICcqJywKICAgICAgICAgICAgW1N0cmluZ10KICAgICAgICAgICAgJERvbWFpbiwKICAgICAgICAgICAgW1N0cmluZ10KICAgICAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCiAgICAgICAgICAgIFtWYWxpZGF0ZVJhbmdlKDEsMTAwMDApXSAKICAgICAgICAgICAgW0ludF0KICAgICAgICAgICAgJFBhZ2VTaXplID0gMjAwCiAgICAgICAgKQogICAgICAgIGlmKC1ub3QgJERvbWFpbikgewogICAgICAgICAgICAkRG9tYWluID0gKEdldC1OZXREb21haW4pLk5hbWUKICAgICAgICB9CiAgICAgICAgJERvbWFpbkROID0gIkRDPSQoJERvbWFpbi5SZXBsYWNlKCcuJywgJyxEQz0nKSkiCiAgICAgICAgV3JpdGUtVmVyYm9zZSAiRG9tYWluRE46ICREb21haW5ETiIKICAgICAgICAKICAgICAgICAkRXhjbHVkZUdyb3VwcyA9IEAoIlVzZXJzIiwgIkRvbWFpbiBVc2VycyIsICJHdWVzdHMiKQogICAgICAgIAogICAgICAgIEdldC1OZXRHcm91cCAtR3JvdXBOYW1lICRHcm91cE5hbWUgLUZpbHRlciAnKG1lbWJlcj0qKScgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1GdWxsRGF0YSAtUGFnZVNpemUgJFBhZ2VTaXplIHwgV2hlcmUtT2JqZWN0IHsKICAgICAgICAgICAgCiAgICAgICAgICAgIC1ub3QgKCRFeGNsdWRlR3JvdXBzIC1jb250YWlucyAkXy5zYW1hY2NvdW50bmFtZSkgfSB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJEdyb3VwTmFtZSA9ICRfLnNhbUFjY291bnROYW1lCiAgICAgICAgICAgICAgICAkXy5tZW1iZXIgfCBGb3JFYWNoLU9iamVjdCB7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgaWYgKCgkXyAtbWF0Y2ggJ0NOPVMtMS01LTIxLiotLionKSAtb3IgKCREb21haW5ETiAtbmUgKCRfLnN1YnN0cmluZygkXy5JbmRleE9mKCJEQz0iKSkpKSkgewogICAgICAgICAgICAgICAgICAgICAgICAkVXNlckRvbWFpbiA9ICRfLnN1YlN0cmluZygkXy5JbmRleE9mKCJEQz0iKSkgLXJlcGxhY2UgJ0RDPScsJycgLXJlcGxhY2UgJywnLCcuJwogICAgICAgICAgICAgICAgICAgICAgICAkVXNlck5hbWUgPSAkXy5zcGxpdCgiLCIpWzBdLnNwbGl0KCI9IilbMV0KICAgICAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Hcm91cFVzZXIgPSBOZXctT2JqZWN0IFBTT2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICRGb3JlaWduR3JvdXBVc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dyb3VwRG9tYWluJyAkRG9tYWluCiAgICAgICAgICAgICAgICAgICAgICAgICRGb3JlaWduR3JvdXBVc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ0dyb3VwTmFtZScgJEdyb3VwTmFtZQogICAgICAgICAgICAgICAgICAgICAgICAkRm9yZWlnbkdyb3VwVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyRG9tYWluJyAkVXNlckRvbWFpbgogICAgICAgICAgICAgICAgICAgICAgICAkRm9yZWlnbkdyb3VwVXNlciB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdVc2VyTmFtZScgJFVzZXJOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICRGb3JlaWduR3JvdXBVc2VyIHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1VzZXJETicgJF8KICAgICAgICAgICAgICAgICAgICAgICAgJEZvcmVpZ25Hcm91cFVzZXIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgaWYgKCRSZWN1cnNlKSB7CiAgICAgICAgCiAgICAgICAgaWYoJExEQVAgLW9yICREb21haW5Db250cm9sbGVyKSB7CiAgICAgICAgICAgICREb21haW5UcnVzdHMgPSBJbnZva2UtTWFwRG9tYWluVHJ1c3QgLUxEQVAgLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLVBhZ2VTaXplICRQYWdlU2l6ZSB8IEZvckVhY2gtT2JqZWN0IHsgJF8uU291cmNlRG9tYWluIH0gfCBTb3J0LU9iamVjdCAtVW5pcXVlCiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkRG9tYWluVHJ1c3RzID0gSW52b2tlLU1hcERvbWFpblRydXN0IC1QYWdlU2l6ZSAkUGFnZVNpemUgfCBGb3JFYWNoLU9iamVjdCB7ICRfLlNvdXJjZURvbWFpbiB9IHwgU29ydC1PYmplY3QgLVVuaXF1ZQogICAgICAgIH0KICAgICAgICBGb3JFYWNoKCREb21haW5UcnVzdCBpbiAkRG9tYWluVHJ1c3RzKSB7CiAgICAgICAgICAgIAogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJFbnVtZXJhdGluZyB0cnVzdCBncm91cHMgaW4gZG9tYWluICREb21haW5UcnVzdCIKICAgICAgICAgICAgR2V0LUZvcmVpZ25Hcm91cCAtR3JvdXBOYW1lICRHcm91cE5hbWUgLURvbWFpbiAkRG9tYWluIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1QYWdlU2l6ZSAkUGFnZVNpemUKICAgICAgICB9CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBHZXQtRm9yZWlnbkdyb3VwIC1Hcm91cE5hbWUgJEdyb3VwTmFtZSAtRG9tYWluICREb21haW4gLURvbWFpbkNvbnRyb2xsZXIgJERvbWFpbkNvbnRyb2xsZXIgLVBhZ2VTaXplICRQYWdlU2l6ZQogICAgfQp9
ZnVuY3Rpb24gRmluZC1NYW5hZ2VkU2VjdXJpdHlHcm91cHMgewogICAgCiAgICBHZXQtTmV0R3JvdXAgLUZ1bGxEYXRhIC1GaWx0ZXIgJyhtYW5hZ2VkQnk9KiknIHwgU2VsZWN0LU9iamVjdCAtVW5pcXVlIGRpc3Rpbmd1aXNoZWROYW1lLG1hbmFnZWRCeSxjbiB8IEZvckVhY2gtT2JqZWN0IHsKICAgICAgICAKICAgICAgICAkZ3JvdXBfbWFuYWdlciA9IEdldC1BRE9iamVjdCAtQURTUGF0aCAkXy5tYW5hZ2VkQnkgfCBTZWxlY3QtT2JqZWN0IGNuLGRpc3Rpbmd1aXNoZWRuYW1lLG5hbWUsc2FtYWNjb3VudHR5cGUsc2FtYWNjb3VudG5hbWUKICAgICAgICAKICAgICAgICAkcmVzdWx0c19vYmplY3QgPSBOZXctT2JqZWN0IC1UeXBlTmFtZSBQU09iamVjdCAtUHJvcGVydHkgQHsKICAgICAgICAgICAgJ0dyb3VwQ04nID0gJF8uY24KICAgICAgICAgICAgJ0dyb3VwRE4nID0gJF8uZGlzdGluZ3Vpc2hlZG5hbWUKICAgICAgICAgICAgJ01hbmFnZXJDTicgPSAkZ3JvdXBfbWFuYWdlci5jbgogICAgICAgICAgICAnTWFuYWdlckROJyA9ICRncm91cF9tYW5hZ2VyLmRpc3Rpbmd1aXNoZWROYW1lCiAgICAgICAgICAgICdNYW5hZ2VyU0FOJyA9ICRncm91cF9tYW5hZ2VyLnNhbWFjY291bnRuYW1lCiAgICAgICAgICAgICdNYW5hZ2VyVHlwZScgPSAnJwogICAgICAgICAgICAnQ2FuTWFuYWdlcldyaXRlJyA9ICRGQUxTRQogICAgICAgIH0KICAgICAgICAKICAgICAgICBpZiAoJGdyb3VwX21hbmFnZXIuc2FtYWNjb3VudHR5cGUgLWVxIDB4MTAwMDAwMDApIHsKICAgICAgICAgICAgJHJlc3VsdHNfb2JqZWN0Lk1hbmFnZXJUeXBlID0gJ0dyb3VwJwogICAgICAgIH0gZWxzZWlmICgkZ3JvdXBfbWFuYWdlci5zYW1hY2NvdW50dHlwZSAtZXEgMHgzMDAwMDAwMCkgewogICAgICAgICAgICAkcmVzdWx0c19vYmplY3QuTWFuYWdlclR5cGUgPSAnVXNlcicKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgJHhhY2wgPSBHZXQtT2JqZWN0QWNsIC1BRFNQYXRoICRfLmRpc3Rpbmd1aXNoZWRuYW1lIC1SaWdodHMgV3JpdGVNZW1iZXJzCiAgICAgICAgCiAgICAgICAgaWYgKCR4YWNsLk9iamVjdFR5cGUgLWVxICdiZjk2NzljMC0wZGU2LTExZDAtYTI4NS0wMGFhMDAzMDQ5ZTInIC1hbmQgJHhhY2wuQWNjZXNzQ29udHJvbFR5cGUgLWVxICdBbGxvdycgLWFuZCAkeGFjbC5JZGVudGl0eVJlZmVyZW5jZS5WYWx1ZS5Db250YWlucygkZ3JvdXBfbWFuYWdlci5zYW1hY2NvdW50bmFtZSkpIHsKICAgICAgICAgICAgJHJlc3VsdHNfb2JqZWN0LkNhbk1hbmFnZXJXcml0ZSA9ICRUUlVFCiAgICAgICAgfQogICAgICAgICRyZXN1bHRzX29iamVjdAogICAgfQp9
ZnVuY3Rpb24gSW52b2tlLU1hcERvbWFpblRydXN0IHsKICAgIFtDbWRsZXRCaW5kaW5nKCldCiAgICBwYXJhbSgKICAgICAgICBbU3dpdGNoXQogICAgICAgICRMREFQLAogICAgICAgIFtTdHJpbmddCiAgICAgICAgJERvbWFpbkNvbnRyb2xsZXIsCiAgICAgICAgW1ZhbGlkYXRlUmFuZ2UoMSwxMDAwMCldIAogICAgICAgIFtJbnRdCiAgICAgICAgJFBhZ2VTaXplID0gMjAwLAogICAgICAgIFtNYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNDcmVkZW50aWFsXQogICAgICAgICRDcmVkZW50aWFsCiAgICApCiAgICAKICAgICRTZWVuRG9tYWlucyA9IEB7fQogICAgCiAgICAkRG9tYWlucyA9IE5ldy1PYmplY3QgU3lzdGVtLkNvbGxlY3Rpb25zLlN0YWNrCiAgICAKICAgICRDdXJyZW50RG9tYWluID0gKEdldC1OZXREb21haW4gLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwpLk5hbWUKICAgICREb21haW5zLnB1c2goJEN1cnJlbnREb21haW4pCiAgICB3aGlsZSgkRG9tYWlucy5Db3VudCAtbmUgMCkgewogICAgICAgICREb21haW4gPSAkRG9tYWlucy5Qb3AoKQogICAgICAgIAogICAgICAgIGlmICgkRG9tYWluIC1hbmQgKCREb21haW4uVHJpbSgpIC1uZSAiIikgLWFuZCAoLW5vdCAkU2VlbkRvbWFpbnMuQ29udGFpbnNLZXkoJERvbWFpbikpKSB7CiAgICAgICAgICAgIAogICAgICAgICAgICBXcml0ZS1WZXJib3NlICJFbnVtZXJhdGluZyB0cnVzdHMgZm9yIGRvbWFpbiAnJERvbWFpbiciCiAgICAgICAgICAgIAogICAgICAgICAgICAkTnVsbCA9ICRTZWVuRG9tYWlucy5hZGQoJERvbWFpbiwgIiIpCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmKCRMREFQIC1vciAkRG9tYWluQ29udHJvbGxlcikgewogICAgICAgICAgICAgICAgICAgICRUcnVzdHMgPSBHZXQtTmV0RG9tYWluVHJ1c3QgLURvbWFpbiAkRG9tYWluIC1MREFQIC1Eb21haW5Db250cm9sbGVyICREb21haW5Db250cm9sbGVyIC1QYWdlU2l6ZSAkUGFnZVNpemUgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICRUcnVzdHMgPSBHZXQtTmV0RG9tYWluVHJ1c3QgLURvbWFpbiAkRG9tYWluIC1QYWdlU2l6ZSAkUGFnZVNpemUgLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmKCRUcnVzdHMgLWlzbm90IFtTeXN0ZW0uQXJyYXldKSB7CiAgICAgICAgICAgICAgICAgICAgJFRydXN0cyA9IEAoJFRydXN0cykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYoLW5vdCAoJExEQVAgLW9yICREb21haW5Db250cm9sbGVyKSApIHsKICAgICAgICAgICAgICAgICAgICAkVHJ1c3RzICs9IEdldC1OZXRGb3Jlc3RUcnVzdCAtRm9yZXN0ICREb21haW4gLUNyZWRlbnRpYWwgJENyZWRlbnRpYWwKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICgkVHJ1c3RzKSB7CiAgICAgICAgICAgICAgICAgICAgaWYoJFRydXN0cyAtaXNub3QgW1N5c3RlbS5BcnJheV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFRydXN0cyA9IEAoJFRydXN0cykKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgRm9yRWFjaCAoJFRydXN0IGluICRUcnVzdHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoJFRydXN0LlNvdXJjZU5hbWUgLWFuZCAkVHJ1c3QuVGFyZ2V0TmFtZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFNvdXJjZURvbWFpbiA9ICRUcnVzdC5Tb3VyY2VOYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVGFyZ2V0RG9tYWluID0gJFRydXN0LlRhcmdldE5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRUcnVzdFR5cGUgPSAkVHJ1c3QuVHJ1c3RUeXBlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVHJ1c3REaXJlY3Rpb24gPSAkVHJ1c3QuVHJ1c3REaXJlY3Rpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRPYmplY3RUeXBlID0gJFRydXN0LlBTT2JqZWN0LlR5cGVOYW1lcyB8IFdoZXJlLU9iamVjdCB7JF8gLW1hdGNoICdQb3dlclZpZXcnfSB8IFNlbGVjdC1PYmplY3QgLUZpcnN0IDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJE51bGwgPSAkRG9tYWlucy5QdXNoKCRUYXJnZXREb21haW4pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdCA9IE5ldy1PYmplY3QgUFNPYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdTb3VyY2VEb21haW4nICIkU291cmNlRG9tYWluIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1NvdXJjZVNJRCcgJFRydXN0LlNvdXJjZVNJRAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0IHwgQWRkLU1lbWJlciBOb3RlcHJvcGVydHkgJ1RhcmdldERvbWFpbicgIiRUYXJnZXREb21haW4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVGFyZ2V0U0lEJyAkVHJ1c3QuVGFyZ2V0U0lECiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRG9tYWluVHJ1c3QgfCBBZGQtTWVtYmVyIE5vdGVwcm9wZXJ0eSAnVHJ1c3RUeXBlJyAiJFRydXN0VHlwZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdCB8IEFkZC1NZW1iZXIgTm90ZXByb3BlcnR5ICdUcnVzdERpcmVjdGlvbicgIiRUcnVzdERpcmVjdGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICREb21haW5UcnVzdC5QU09iamVjdC5UeXBlTmFtZXMuQWRkKCRPYmplY3RUeXBlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJERvbWFpblRydXN0CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2ggewogICAgICAgICAgICAgICAgV3JpdGUtVmVyYm9zZSAiWyFdIEVycm9yOiAkXyIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQ==
JE1vZCA9IE5ldy1Jbk1lbW9yeU1vZHVsZSAtTW9kdWxlTmFtZSBXaW4zMgokRnVuY3Rpb25EZWZpbml0aW9ucyA9IEAoCiAgICAoZnVuYyBuZXRhcGkzMiBOZXRTaGFyZUVudW0gKFtJbnRdKSBAKFtTdHJpbmddLCBbSW50XSwgW0ludFB0cl0uTWFrZUJ5UmVmVHlwZSgpLCBbSW50XSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpLCBbSW50MzJdLk1ha2VCeVJlZlR5cGUoKSkpLAogICAgKGZ1bmMgbmV0YXBpMzIgTmV0V2tzdGFVc2VyRW51bSAoW0ludF0pIEAoW1N0cmluZ10sIFtJbnRdLCBbSW50UHRyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnRdLCBbSW50MzJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpKSksCiAgICAoZnVuYyBuZXRhcGkzMiBOZXRTZXNzaW9uRW51bSAoW0ludF0pIEAoW1N0cmluZ10sIFtTdHJpbmddLCBbU3RyaW5nXSwgW0ludF0sIFtJbnRQdHJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludF0sIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpLCBbSW50MzJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCkpKSwKICAgIChmdW5jIG5ldGFwaTMyIE5ldExvY2FsR3JvdXBHZXRNZW1iZXJzIChbSW50XSkgQChbU3RyaW5nXSwgW1N0cmluZ10sIFtJbnRdLCBbSW50UHRyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnRdLCBbSW50MzJdLk1ha2VCeVJlZlR5cGUoKSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpKSksCiAgICAoZnVuYyBuZXRhcGkzMiBEc0dldFNpdGVOYW1lIChbSW50XSkgQChbU3RyaW5nXSwgW0ludFB0cl0uTWFrZUJ5UmVmVHlwZSgpKSksCiAgICAoZnVuYyBuZXRhcGkzMiBEc0VudW1lcmF0ZURvbWFpblRydXN0cyAoW0ludF0pIEAoW1N0cmluZ10sIFtVSW50MzJdLCBbSW50UHRyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnRQdHJdLk1ha2VCeVJlZlR5cGUoKSkpLAogICAgKGZ1bmMgbmV0YXBpMzIgTmV0QXBpQnVmZmVyRnJlZSAoW0ludF0pIEAoW0ludFB0cl0pKSwKICAgIChmdW5jIGFkdmFwaTMyIENvbnZlcnRTaWRUb1N0cmluZ1NpZCAoW0ludF0pIEAoW0ludFB0cl0sIFtTdHJpbmddLk1ha2VCeVJlZlR5cGUoKSkgLVNldExhc3RFcnJvciksCiAgICAoZnVuYyBhZHZhcGkzMiBPcGVuU0NNYW5hZ2VyVyAoW0ludFB0cl0pIEAoW1N0cmluZ10sIFtTdHJpbmddLCBbSW50XSkgLVNldExhc3RFcnJvciksCiAgICAoZnVuYyBhZHZhcGkzMiBDbG9zZVNlcnZpY2VIYW5kbGUgKFtJbnRdKSBAKFtJbnRQdHJdKSksCiAgICAoZnVuYyB3dHNhcGkzMiBXVFNPcGVuU2VydmVyRXggKFtJbnRQdHJdKSBAKFtTdHJpbmddKSksCiAgICAoZnVuYyB3dHNhcGkzMiBXVFNFbnVtZXJhdGVTZXNzaW9uc0V4IChbSW50XSkgQChbSW50UHRyXSwgW0ludDMyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnRdLCBbSW50UHRyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpKSAtU2V0TGFzdEVycm9yKSwKICAgIChmdW5jIHd0c2FwaTMyIFdUU1F1ZXJ5U2Vzc2lvbkluZm9ybWF0aW9uIChbSW50XSkgQChbSW50UHRyXSwgW0ludF0sIFtJbnRdLCBbSW50UHRyXS5NYWtlQnlSZWZUeXBlKCksIFtJbnQzMl0uTWFrZUJ5UmVmVHlwZSgpKSAtU2V0TGFzdEVycm9yKSwKICAgIChmdW5jIHd0c2FwaTMyIFdUU0ZyZWVNZW1vcnlFeCAoW0ludF0pIEAoW0ludDMyXSwgW0ludFB0cl0sIFtJbnQzMl0pKSwKICAgIChmdW5jIHd0c2FwaTMyIFdUU0ZyZWVNZW1vcnkgKFtJbnRdKSBAKFtJbnRQdHJdKSksCiAgICAoZnVuYyB3dHNhcGkzMiBXVFNDbG9zZVNlcnZlciAoW0ludF0pIEAoW0ludFB0cl0pKQopCiRXVFNDb25uZWN0U3RhdGUgPSBwc2VudW0gJE1vZCBXVFNfQ09OTkVDVFNUQVRFX0NMQVNTIFVJbnQxNiBAewogICAgQWN0aXZlICAgICAgID0gICAgMAogICAgQ29ubmVjdGVkICAgID0gICAgMQogICAgQ29ubmVjdFF1ZXJ5ID0gICAgMgogICAgU2hhZG93ICAgICAgID0gICAgMwogICAgRGlzY29ubmVjdGVkID0gICAgNAogICAgSWRsZSAgICAgICAgID0gICAgNQogICAgTGlzdGVuICAgICAgID0gICAgNgogICAgUmVzZXQgICAgICAgID0gICAgNwogICAgRG93biAgICAgICAgID0gICAgOAogICAgSW5pdCAgICAgICAgID0gICAgOQp9CiRXVFNfU0VTU0lPTl9JTkZPXzEgPSBzdHJ1Y3QgJE1vZCBXVFNfU0VTU0lPTl9JTkZPXzEgQHsKICAgIEV4ZWNFbnZJZCA9IGZpZWxkIDAgVUludDMyCiAgICBTdGF0ZSA9IGZpZWxkIDEgJFdUU0Nvbm5lY3RTdGF0ZQogICAgU2Vzc2lvbklkID0gZmllbGQgMiBVSW50MzIKICAgIHBTZXNzaW9uTmFtZSA9IGZpZWxkIDMgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKICAgIHBIb3N0TmFtZSA9IGZpZWxkIDQgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKICAgIHBVc2VyTmFtZSA9IGZpZWxkIDUgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKICAgIHBEb21haW5OYW1lID0gZmllbGQgNiBTdHJpbmcgLU1hcnNoYWxBcyBAKCdMUFdTdHInKQogICAgcEZhcm1OYW1lID0gZmllbGQgNyBTdHJpbmcgLU1hcnNoYWxBcyBAKCdMUFdTdHInKQp9CiRXVFNfQ0xJRU5UX0FERFJFU1MgPSBzdHJ1Y3QgJG1vZCBXVFNfQ0xJRU5UX0FERFJFU1MgQHsKICAgIEFkZHJlc3NGYW1pbHkgPSBmaWVsZCAwIFVJbnQzMgogICAgQWRkcmVzcyA9IGZpZWxkIDEgQnl0ZVtdIC1NYXJzaGFsQXMgQCgnQnlWYWxBcnJheScsIDIwKQp9CiRTSEFSRV9JTkZPXzEgPSBzdHJ1Y3QgJE1vZCBTSEFSRV9JTkZPXzEgQHsKICAgIHNoaTFfbmV0bmFtZSA9IGZpZWxkIDAgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKICAgIHNoaTFfdHlwZSA9IGZpZWxkIDEgVUludDMyCiAgICBzaGkxX3JlbWFyayA9IGZpZWxkIDIgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKfQokV0tTVEFfVVNFUl9JTkZPXzEgPSBzdHJ1Y3QgJE1vZCBXS1NUQV9VU0VSX0lORk9fMSBAewogICAgd2t1aTFfdXNlcm5hbWUgPSBmaWVsZCAwIFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICB3a3VpMV9sb2dvbl9kb21haW4gPSBmaWVsZCAxIFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICB3a3VpMV9vdGhfZG9tYWlucyA9IGZpZWxkIDIgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKICAgIHdrdWkxX2xvZ29uX3NlcnZlciA9IGZpZWxkIDMgU3RyaW5nIC1NYXJzaGFsQXMgQCgnTFBXU3RyJykKfQokU0VTU0lPTl9JTkZPXzEwID0gc3RydWN0ICRNb2QgU0VTU0lPTl9JTkZPXzEwIEB7CiAgICBzZXNpMTBfY25hbWUgPSBmaWVsZCAwIFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICBzZXNpMTBfdXNlcm5hbWUgPSBmaWVsZCAxIFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICBzZXNpMTBfdGltZSA9IGZpZWxkIDIgVUludDMyCiAgICBzZXNpMTBfaWRsZV90aW1lID0gZmllbGQgMyBVSW50MzIKfQokU0lEX05BTUVfVVNFID0gcHNlbnVtICRNb2QgU0lEX05BTUVfVVNFIFVJbnQxNiBAewogICAgU2lkVHlwZVVzZXIgICAgICAgICAgICAgPSAxCiAgICBTaWRUeXBlR3JvdXAgICAgICAgICAgICA9IDIKICAgIFNpZFR5cGVEb21haW4gICAgICAgICAgID0gMwogICAgU2lkVHlwZUFsaWFzICAgICAgICAgICAgPSA0CiAgICBTaWRUeXBlV2VsbEtub3duR3JvdXAgICA9IDUKICAgIFNpZFR5cGVEZWxldGVkQWNjb3VudCAgID0gNgogICAgU2lkVHlwZUludmFsaWQgICAgICAgICAgPSA3CiAgICBTaWRUeXBlVW5rbm93biAgICAgICAgICA9IDgKICAgIFNpZFR5cGVDb21wdXRlciAgICAgICAgID0gOQp9CiRMT0NBTEdST1VQX01FTUJFUlNfSU5GT18yID0gc3RydWN0ICRNb2QgTE9DQUxHUk9VUF9NRU1CRVJTX0lORk9fMiBAewogICAgbGdybWkyX3NpZCA9IGZpZWxkIDAgSW50UHRyCiAgICBsZ3JtaTJfc2lkdXNhZ2UgPSBmaWVsZCAxICRTSURfTkFNRV9VU0UKICAgIGxncm1pMl9kb21haW5hbmRuYW1lID0gZmllbGQgMiBTdHJpbmcgLU1hcnNoYWxBcyBAKCdMUFdTdHInKQp9CiREc0RvbWFpbkZsYWcgPSBwc2VudW0gJE1vZCBEc0RvbWFpbi5GbGFncyBVSW50MzIgQHsKICAgIElOX0ZPUkVTVCAgICAgICA9IDEKICAgIERJUkVDVF9PVVRCT1VORCA9IDIKICAgIFRSRUVfUk9PVCAgICAgICA9IDQKICAgIFBSSU1BUlkgICAgICAgICA9IDgKICAgIE5BVElWRV9NT0RFICAgICA9IDE2CiAgICBESVJFQ1RfSU5CT1VORCAgPSAzMgp9IC1CaXRmaWVsZAokRHNEb21haW5UcnVzdFR5cGUgPSBwc2VudW0gJE1vZCBEc0RvbWFpbi5UcnVzdFR5cGUgVUludDMyIEB7CiAgICBET1dOTEVWRUwgICA9IDEKICAgIFVQTEVWRUwgICAgID0gMgogICAgTUlUICAgICAgICAgPSAzCiAgICBEQ0UgICAgICAgICA9IDQKfQokRHNEb21haW5UcnVzdEF0dHJpYnV0ZXMgPSBwc2VudW0gJE1vZCBEc0RvbWFpbi5UcnVzdEF0dHJpYnV0ZXMgVUludDMyIEB7CiAgICBOT05fVFJBTlNJVElWRSAgICAgID0gMQogICAgVVBMRVZFTF9PTkxZICAgICAgICA9IDIKICAgIEZJTFRFUl9TSURTICAgICAgICAgPSA0CiAgICBGT1JFU1RfVFJBTlNJVElWRSAgID0gOAogICAgQ1JPU1NfT1JHQU5JWkFUSU9OICA9IDE2CiAgICBXSVRISU5fRk9SRVNUICAgICAgID0gMzIKICAgIFRSRUFUX0FTX0VYVEVSTkFMICAgPSA2NAp9CiREU19ET01BSU5fVFJVU1RTID0gc3RydWN0ICRNb2QgRFNfRE9NQUlOX1RSVVNUUyBAewogICAgTmV0Ymlvc0RvbWFpbk5hbWUgPSBmaWVsZCAwIFN0cmluZyAtTWFyc2hhbEFzIEAoJ0xQV1N0cicpCiAgICBEbnNEb21haW5OYW1lID0gZmllbGQgMSBTdHJpbmcgLU1hcnNoYWxBcyBAKCdMUFdTdHInKQogICAgRmxhZ3MgPSBmaWVsZCAyICREc0RvbWFpbkZsYWcKICAgIFBhcmVudEluZGV4ID0gZmllbGQgMyBVSW50MzIKICAgIFRydXN0VHlwZSA9IGZpZWxkIDQgJERzRG9tYWluVHJ1c3RUeXBlCiAgICBUcnVzdEF0dHJpYnV0ZXMgPSBmaWVsZCA1ICREc0RvbWFpblRydXN0QXR0cmlidXRlcwogICAgRG9tYWluU2lkID0gZmllbGQgNiBJbnRQdHIKICAgIERvbWFpbkd1aWQgPSBmaWVsZCA3IEd1aWQKfQokVHlwZXMgPSAkRnVuY3Rpb25EZWZpbml0aW9ucyB8IEFkZC1XaW4zMlR5cGUgLU1vZHVsZSAkTW9kIC1OYW1lc3BhY2UgJ1dpbjMyJwokTmV0YXBpMzIgPSAkVHlwZXNbJ25ldGFwaTMyJ10KJEFkdmFwaTMyID0gJFR5cGVzWydhZHZhcGkzMiddCiRXdHNhcGkzMiA9ICRUeXBlc1snd3RzYXBpMzInXQo=